MUST be triggered when execute creates a new call using the operationType 0, 3, 4.
MUST be triggered when execute creates a new contract using the operationType 1, 2.
MUST be triggered when setData was successfully called.
When an address becomes an <em>operator</em> for a <em>holder</em>, an AuthorizedOperator event MUST be emitted.
When a <em>holder</em> revokes an <em>operator</em>, a RevokedOperator event MUST be emitted.
AuthorizedOperator events MUST NOT be emitted when defining the <em>default operators</em>.
AuthorizedOperator events MUST NOT be emitted when defining <em>default operators</em>.
an AuthorizedOperator or RevokedOperator event (respectively) MUST be emitted.
An AuthorizedOperator MUST be emitted each time.
A RevokedOperator MUST be emitted each time.
<em>NOTE</em>: This event MUST NOT be emitted outside of an <em>operator</em> authorization process.
<em>NOTE</em>: This event MUST NOT be emitted outside of an <em>operator</em> revocation process.
A Sent event MUST be emitted for every <em>holder</em> and <em>recipient</em> pair with the corresponding amount for each pair.
<em>NOTE</em>: This event MUST NOT be emitted outside of a send or an <a href="/EIPS/eip-20">ERC-20 transfer process.
While a Sent event MUST NOT be emitted when minting,
A Minted event MUST be emitted for every <em>recipient</em> with the corresponding amount for each <em>recipient</em>.
<em>NOTE</em>: This event MUST NOT be emitted outside of a mint process.
While a Sent event MUST NOT be emitted when burning;
A Burned event MUST be emitted for every <em>holder</em> with the corresponding amount for each <em>holder</em>.
<em>NOTE</em>: This event MUST NOT be emitted outside of a burn process.
During a send, mint and burn, the respective Sent, Minted and Burned events MUST be emitted.
During an <a href="/EIPS/eip-20">ERC-20’s transfer or transferFrom functions, a valid Sent event MUST be emitted.
This event MUST be fired on return from a call to a TokenValidator.check/2.
This event MUST be fired on return from a call to a TokenValidator.check/4.
MUST be triggered when changeOwner or changeOwnerSigned was successfully called.
MUST be triggered when a change to a delegate was successfully made.
MUST be triggered when a change to an attribute was successfully made.
All TransferSingle and TransferBatch events MUST be emitted to reflect all the balance changes that have occurred before any call(s) to onERC1155Received or onERC1155BatchReceived.
Successful completion of this method MUST emit an Approval event (defined below) unless the caller is attempting to clear approval when there is no pending approval. In particular, an Approval event MUST be fired if the _to address is zero and there is some outstanding approval. Additionally, an Approval event MUST be fired if _to is already the currently approved address and this call otherwise has no effect. (i.e. An approve() call that “reaffirms” an existing approval MUST fire an event.)
MUST be triggered when release is successfully called.
MUST be triggered when an Identity is created.
MUST be triggered when an address is added to an Identity.
MUST be triggered when an address is removed from an Identity.
MUST be triggered when a provider is added to an Identity.
MUST be triggered when a provider is removed.
MUST be triggered when a resolver is added.
MUST be triggered when a resolver is removed.
MUST be triggered when a recovery address change is triggered.
MUST be triggered when recovery is triggered.
MUST be triggered when an Identity is destroyed.
MUST be triggered when create is successfully called.
MUST be triggered when withdraw is successfully called.
MUST be triggered when redeem is successfully called.
MUST be triggered when confirmUpdate is successfully called.
MUST be triggered when revokeUpdate is successfully called.
MUST be triggered when an update is approved by all involved parties.
When emitting the ConsecutiveTransfer event the Transfer event MUST NOT be emitted
Contracts that implement the ConsecutiveTransfer event MAY still use the original Transfer event, however when emitting the ConsecutiveTransfer event the Transfer event MUST NOT be emitted.
Any time one or more functions are added, replaced or removed the DiamondCut event MUST be emitted to record changes.
* @dev OPTIONAL: implementer might choose not to implement (initial Configured event MUST be emitted)
* @dev Issue MUST be triggered when the operator (i.e Bank address) contract issues bonds to the given entity.
To ensure the reading of transactions, “Issue”, “Redeem”, “Burn” and “Transfer”, Events cited above MUST be emitted when such transaction is passed.
The ConsumerChanged event MUST be emitted when a consumer is changed.
MUST be emitted when tokens are deposited into the Vault via the mint and deposit methods.
MUST be emitted when shares are withdrawn from the Vault in ERC4626.redeem or ERC4626.withdraw methods.
The MetadataUpdate or BatchMetadataUpdate event MUST be emitted when the JSON metadata of a token, or a consecutive range of tokens, is changed.
The UpdateUser event MUST be emitted when a user address is changed or the user expires is changed.
MUST be emitted when Principal Tokens are burnt and underlying is withdrawn from the contract in the EIP5095.redeem method.
</span>	<span class="c1">// this event **MUST NOT** be fired twice for the same `tokenId`
The SlotAuthorizationCreated event MUST be emitted when a slot is authorized to an address.
The SlotAuthorizationRevoked event MUST be emitted when a slot authorization is revoked.
The PrivilegeAssigned event MUST be emitted when setPrivilege is called.
The PrivilegeTransfered event MUST be emitted when transferPrivilege is called.
The PrivilegeCloned event MUST be emitted when clonePrivilege is called.
