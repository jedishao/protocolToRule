<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-4762: Statelessness gas cost changes</title>
<meta property="og:title" content="EIP-4762: Statelessness gas cost changes" />
<meta name="description" content="Changes the gas schedule to reflect the costs of creating a witness by requiring clients update their database layout to match." />
<meta property="og:description" content="Changes the gas schedule to reflect the costs of creating a witness by requiring clients update their database layout to match." />
<meta name="twitter:description" content="Changes the gas schedule to reflect the costs of creating a witness by requiring clients update their database layout to match." />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-4762" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-4762" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="draft">
⚠️ This EIP is not recommended for general use or implementation as it is likely to change.
</div>
<div class="home">
<h1 class="page-heading">
EIP-4762: Statelessness gas cost changes
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4762.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Changes the gas schedule to reflect the costs of creating a witness by requiring clients update their database layout to match.</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/gballet">Guillaume Ballet</a>, <a href="https://github.com/vbuterin">Vitalik Buterin</a>, <a href="https://github.com/dankrad">Dankrad Feist</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-4762-statelessness-gas-cost-changes/8714">https://ethereum-magicians.org/t/eip-4762-statelessness-gas-cost-changes/8714</a></td></tr>
<tr><th>Status</th><td>Draft
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2022-02-03</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#access-events">Access events</a></li>
<li><a href="#write-events">Write Events</a></li>
<li><a href="#transactions">Transactions</a></li>
<li><a href="#witness-gas-costs">Witness gas costs</a></li>
<li><a href="#replacement-for-access-lists">Replacement for access lists</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#gas-reform">Gas reform</a></li>
</ul>
</li>
<li><a href="#backward-compatibility">Backward Compatibility</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>This EIP introduces changes in the gas schedule to reflect the costs of creating a witness. It requires clients to update their database layout to match this, so as to avoid potential DoS attacks.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>The introduction of Verkle trees into Ethereum requires fundamental changes and as a preparation, this EIP is targeting the fork coming right before the verkle tree fork, in order to incentivize Dapp developers to adopt the new storage model, and ample time to adjust to it. It also incentivizes client developers to migrate their database format ahead of the verkle fork.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="access-events">
<a href="#access-events" class="anchor-link"></a> Access events
</h3>
<p>We define access events as follows. When an access event takes place, the accessed data is saved to the Verkle tree (even if it was not modified). An access event is of the form<code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code>, determining what data is being accessed.</p>
<h4 id="access-events-for-account-headers">
<a href="#access-events-for-account-headers" class="anchor-link"></a> Access events for account headers
</h4>
<p>When a non-precompile address is the target of a <code class="language-plaintext highlighter-rouge">CALL</code>, <code class="language-plaintext highlighter-rouge">CALLCODE</code>, <code class="language-plaintext highlighter-rouge">DELEGATECALL</code>, <code class="language-plaintext highlighter-rouge">SELFDESTRUCT</code>, <code class="language-plaintext highlighter-rouge">EXTCODESIZE</code>, or <code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> opcode, or is the target address of a contract creation whose initcode starts execution, process these access events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(address, 0, VERSION_LEAF_KEY)
(address, 0, CODE_SIZE_LEAF_KEY)
</code></pre></div></div>
<p>If a call is value-bearing (ie. it transfers nonzero wei), whether or not the callee is a precompile, process these two access events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(caller_address, 0, BALANCE_LEAF_KEY)
(callee_address, 0, BALANCE_LEAF_KEY)
</code></pre></div></div>
<p>When a contract is created, process these access events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(contract_address, 0, VERSION_LEAF_KEY)
(contract_address, 0, NONCE_LEAF_KEY)
(contract_address, 0, BALANCE_LEAF_KEY)
(contract_address, 0, CODE_KECCAK_LEAF_KEY)
(contract_address, 0, CODE_SIZE_LEAF_KEY)
</code></pre></div></div>
<p>If the <code class="language-plaintext highlighter-rouge">BALANCE</code> opcode is called targeting some address, process this access event:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(address, 0, BALANCE_LEAF_KEY)
</code></pre></div></div>
<p>If the <code class="language-plaintext highlighter-rouge">SELFDESTRUCT</code> opcode is called by some caller_address targeting some target_address (regardless of whether it’s value-bearing or not), process access events of the form:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(caller_address, 0, BALANCE_LEAF_KEY)
(target_address, 0, BALANCE_LEAF_KEY)
</code></pre></div></div>
<p>If the <code class="language-plaintext highlighter-rouge">EXTCODEHASH</code> opcode is called targeting some address, process an access event of the form:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(address, 0, CODEHASH_LEAF_KEY)
</code></pre></div></div>
<h4 id="access-events-for-storage">
<a href="#access-events-for-storage" class="anchor-link"></a> Access events for storage
</h4>
<p><code class="language-plaintext highlighter-rouge">SLOAD</code> and <code class="language-plaintext highlighter-rouge">SSTORE</code> opcodes with a given address and key process an access event of the form</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(address, tree_key, sub_key)
</code></pre></div></div>
<p>Where tree_key and sub_key are computed as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_storage_slot_tree_keys</span><span class="p">(</span><span class="n">storage_key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">storage_key</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">CODE_OFFSET</span> <span class="o">-</span> <span class="n">HEADER_STORAGE_OFFSET</span><span class="p">):</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="n">HEADER_STORAGE_OFFSET</span> <span class="o">+</span> <span class="n">storage_key</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="n">MAIN_STORAGE_OFFSET</span> <span class="o">+</span> <span class="n">storage_key</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="n">pos</span> <span class="o">//</span> <span class="mi">256</span><span class="p">,</span>
        <span class="n">pos</span> <span class="o">%</span> <span class="mi">256</span>
    <span class="p">)</span> 
</code></pre></div></div>
<h4 id="access-events-for-code">
<a href="#access-events-for-code" class="anchor-link"></a> Access events for code
</h4>
<p>In the conditions below, “chunk chunk_id is accessed” is understood to mean an access event of the form</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(address, (chunk_id + 128) // 256, (chunk_id + 128) % 256)
</code></pre></div></div>
<ul>
<li>At each step of EVM execution, if and only if PC &lt; len(code), chunk PC // CHUNK_SIZE (where PC is the current program counter) of the callee is accessed. In particular, note the following corner cases:
<ul>
<li>The destination of a <code class="language-plaintext highlighter-rouge">JUMP</code> (or positively evaluated JUMPI) is considered to be accessed, even if the destination is not a jumpdest or is inside pushdata</li>
<li>The destination of a <code class="language-plaintext highlighter-rouge">JUMPI</code> is not considered to be accessed if the jump conditional is false.</li>
<li>The destination of a jump is not considered to be accessed if the execution gets to the jump opcode but does not have enough gas to pay for the gas cost of executing the <code class="language-plaintext highlighter-rouge">JUMP</code> opcode (including chunk access cost if the <code class="language-plaintext highlighter-rouge">JUMP</code> is the first opcode in a not-yet-accessed chunk)</li>
<li>The destination of a jump is not considered to be accessed if it is beyond the code (<code class="language-plaintext highlighter-rouge">destination &gt;= len(code)</code>)</li>
<li>If code stops execution by walking past the end of the code, <code class="language-plaintext highlighter-rouge">PC = len(code)</code> is not considered to be accessed</li>
</ul>
</li>
<li>If the current step of EVM execution is a <code class="language-plaintext highlighter-rouge">PUSH{n}</code>, all chunks <code class="language-plaintext highlighter-rouge">(PC // CHUNK_SIZE) &lt;= chunk_index &lt;= ((PC + n) // CHUNK_SIZE)</code>` of the callee are accessed.</li>
<li>If a nonzero-read-size <code class="language-plaintext highlighter-rouge">CODECOPY</code> or <code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> read bytes <code class="language-plaintext highlighter-rouge">x...y</code> inclusive, all chunks <code class="language-plaintext highlighter-rouge">(x // CHUNK_SIZE) &lt;= chunk_index &lt;= (min(y, code_size - 1) // CHUNK_SIZE)</code> of the accessed contract are accessed.
<ul>
<li>Example 1: for a <code class="language-plaintext highlighter-rouge">CODECOPY</code> with start position 100, read size 50, <code class="language-plaintext highlighter-rouge">code_size = 200</code>, <code class="language-plaintext highlighter-rouge">x = 100</code> and <code class="language-plaintext highlighter-rouge">y = 149</code></li>
<li>Example 2: for a <code class="language-plaintext highlighter-rouge">CODECOPY</code> with start position 600, read size 0, no chunks are accessed</li>
<li>Example 3: for a <code class="language-plaintext highlighter-rouge">CODECOPY</code> with start position 1500, read size 2000, <code class="language-plaintext highlighter-rouge">code_size = 3100</code>, <code class="language-plaintext highlighter-rouge">x = 1500</code> and <code class="language-plaintext highlighter-rouge">y = 3099</code></li>
</ul>
</li>
<li><code class="language-plaintext highlighter-rouge">CODESIZE</code>, <code class="language-plaintext highlighter-rouge">EXTCODESIZE</code> and <code class="language-plaintext highlighter-rouge">EXTCODEHASH</code> do NOT access any chunks.
When a contract is created, access chunks <code class="language-plaintext highlighter-rouge">0 ... (len(code)+30)//31</code></li>
</ul>
<h3 id="write-events">
<a href="#write-events" class="anchor-link"></a> Write Events
</h3>
<p>We define <strong>write events</strong> as follows. Note that when a write takes place, an access event also takes place (so the definition below should be a subset of the definition of access lists) A write event is of the form <code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code>, determining what data is being written to.</p>
<h4 id="write-events-for-account-headers">
<a href="#write-events-for-account-headers" class="anchor-link"></a> Write events for account headers
</h4>
<p>When a nonzero-balance-sending CALL or SELFDESTRUCT with a given sender and recipient takes place, process these write events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(sender, 0, BALANCE_LEAF_KEY)
(recipient, 0, BALANCE_LEAF_KEY)
</code></pre></div></div>
<p>When a contract creation is initialized, process these write events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(contract_address, 0, VERSION_LEAF_KEY)
(contract_address, 0, NONCE_LEAF_KEY)
</code></pre></div></div>
<p>Only if the value sent with the creation is nonzero, also process:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(contract_address, 0, BALANCE_LEAF_KEY)
</code></pre></div></div>
<p>When a contract is created, process these write events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(contract_address, 0, VERSION_LEAF_KEY)
(contract_address, 0, NONCE_LEAF_KEY)
(contract_address, 0, BALANCE_LEAF_KEY)
(contract_address, 0, CODE_KECCAK_LEAF_KEY)
(contract_address, 0, CODE_SIZE_LEAF_KEY)
</code></pre></div></div>
<h4 id="write-events-for-storage">
<a href="#write-events-for-storage" class="anchor-link"></a> Write events for storage
</h4>
<p>SSTORE opcodes with a given <code class="language-plaintext highlighter-rouge">address</code> and <code class="language-plaintext highlighter-rouge">key</code> process a write event of the form</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(address, tree_key, sub_key)
</code></pre></div></div>
<p>Where <code class="language-plaintext highlighter-rouge">tree_key</code> and <code class="language-plaintext highlighter-rouge">sub_key</code> are computed as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_storage_slot_tree_keys</span><span class="p">(</span><span class="n">storage_key</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">storage_key</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">CODE_OFFSET</span> <span class="o">-</span> <span class="n">HEADER_STORAGE_OFFSET</span><span class="p">):</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="n">HEADER_STORAGE_OFFSET</span> <span class="o">+</span> <span class="n">storage_key</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="n">MAIN_STORAGE_OFFSET</span> <span class="o">+</span> <span class="n">storage_key</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="n">pos</span> <span class="o">//</span> <span class="mi">256</span><span class="p">,</span>
        <span class="n">pos</span> <span class="o">%</span> <span class="mi">256</span>
    <span class="p">)</span>
</code></pre></div></div>
<h4 id="write-events-for-code">
<a href="#write-events-for-code" class="anchor-link"></a> Write events for code
</h4>
<p>When a contract is created, make write events:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span>
    <span class="n">address</span><span class="p">,</span>
    <span class="p">(</span><span class="n">CODE_OFFSET</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">//</span> <span class="n">VERKLE_NODE_WIDTH</span><span class="p">,</span>
    <span class="p">(</span><span class="n">CODE_OFFSET</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">VERKLE_NODE_WIDTH</span>
<span class="p">)</span>
</code></pre></div></div>
<p>For <code class="language-plaintext highlighter-rouge">i</code> in <code class="language-plaintext highlighter-rouge">0 ... (len(code)+30)//31</code>.</p>
<h3 id="transactions">
<a href="#transactions" class="anchor-link"></a> Transactions
</h3>
<h4 id="access-events-1">
<a href="#access-events-1" class="anchor-link"></a> Access events
</h4>
<p>For a transaction, make these access events:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(tx.origin, 0, VERSION_LEAF_KEY)
(tx.origin, 0, BALANCE_LEAF_KEY)
(tx.origin, 0, NONCE_LEAF_KEY)
(tx.origin, 0, CODE_SIZE_LEAF_KEY)
(tx.origin, 0, CODE_KECCAK_LEAF_KEY)
(tx.target, 0, VERSION_LEAF_KEY)
(tx.target, 0, BALANCE_LEAF_KEY)
(tx.target, 0, NONCE_LEAF_KEY)
(tx.target, 0, CODE_SIZE_LEAF_KEY)
(tx.target, 0, CODE_KECCAK_LEAF_KEY)
</code></pre></div></div>
<h4 id="write-events-1">
<a href="#write-events-1" class="anchor-link"></a> Write events
</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(tx.origin, 0, NONCE_LEAF_KEY)
</code></pre></div></div>
<p>if <code class="language-plaintext highlighter-rouge">value</code> is non-zero:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(tx.origin, 0, BALANCE_LEAF_KEY)
(tx.target, 0, BALANCE_LEAF_KEY)
</code></pre></div></div>
<h3 id="witness-gas-costs">
<a href="#witness-gas-costs" class="anchor-link"></a> Witness gas costs
</h3>
<p>Remove the following gas costs:</p>
<ul>
<li>Increased gas cost of <code class="language-plaintext highlighter-rouge">CALL</code> if it is nonzero-value-sending</li>
<li>EIP-2200 <code class="language-plaintext highlighter-rouge">SSTORE</code> gas costs except for the <code class="language-plaintext highlighter-rouge">SLOAD_GAS</code></li>
<li>200 per byte contract code cost</li>
</ul>
<p>Reduce gas cost:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">CREATE</code> to 1000</li>
</ul>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>WITNESS_BRANCH_COST</td>
<td>1900</td>
</tr>
<tr>
<td>WITNESS_CHUNK_COST</td>
<td>200</td>
</tr>
<tr>
<td>SUBTREE_EDIT_COST</td>
<td>3000</td>
</tr>
<tr>
<td>CHUNK_EDIT_COST</td>
<td>500</td>
</tr>
<tr>
<td>CHUNK_FILL_COST</td>
<td>6200</td>
</tr>
</tbody>
</table>
<p>When executing a transaction, maintain four sets:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">accessed_subtrees: Set[Tuple[address, int]]</code></li>
<li><code class="language-plaintext highlighter-rouge">accessed_leaves: Set[Tuple[address, int, int]]</code></li>
<li><code class="language-plaintext highlighter-rouge">edited_subtrees</code>: <code class="language-plaintext highlighter-rouge">Set[Tuple[address, int]]</code></li>
<li><code class="language-plaintext highlighter-rouge">edited_leaves</code>: <code class="language-plaintext highlighter-rouge">Set[Tuple[address, int, int]]</code></li>
</ul>
<p>When an <strong>access</strong> event of <code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code> occurs, perform the following checks:</p>
<ul>
<li>If <code class="language-plaintext highlighter-rouge">(address, sub_key)</code> is not in accessed_subtrees, charge WITNESS_BRANCH_COST gas and add that tuple to accessed_subtrees.</li>
<li>If <code class="language-plaintext highlighter-rouge">leaf_key</code> is not <code class="language-plaintext highlighter-rouge">None</code> and <code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code> is not in <code class="language-plaintext highlighter-rouge">accessed_leaves</code>, charge <code class="language-plaintext highlighter-rouge">WITNESS_CHUNK_COST</code> gas and add it to <code class="language-plaintext highlighter-rouge">accessed_leaves</code></li>
</ul>
<p>When a <strong>write</strong> event of <code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code> occurs, perform the following checks:</p>
<ul>
<li>If (address, sub_key) is not in edited_subtrees, charge <code class="language-plaintext highlighter-rouge">SUBTREE_EDIT_COST</code> gas and add that tuple to edited_subtrees.</li>
<li>If leaf_key is not None and <code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code> is not in <code class="language-plaintext highlighter-rouge">edited_leaves</code>, charge <code class="language-plaintext highlighter-rouge">CHUNK_EDIT_COST</code> gas and add it to <code class="language-plaintext highlighter-rouge">edited_leaves</code>
<ul>
<li>Additionally, if there was no value stored at <code class="language-plaintext highlighter-rouge">(address, sub_key, leaf_key)</code> (ie. the state held None at that position), charge <code class="language-plaintext highlighter-rouge">CHUNK_FILL_COST</code></li>
</ul>
</li>
</ul>
<p>Note that tree keys can no longer be emptied: only the values <code class="language-plaintext highlighter-rouge">0...2**256-1</code> can be written to a tree key, and 0 is distinct from None. Once a tree key is changed from <code class="language-plaintext highlighter-rouge">None</code> to not-<code class="language-plaintext highlighter-rouge">None</code>, it can never go back to <code class="language-plaintext highlighter-rouge">None</code>.</p>
<h3 id="replacement-for-access-lists">
<a href="#replacement-for-access-lists" class="anchor-link"></a> Replacement for access lists
</h3>
<p>We replace EIP 2930 access lists with an SSZ structure of the form:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AccessList</span><span class="p">(</span><span class="n">Container</span><span class="p">):</span>
    <span class="n">addresses</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">AccountAccessList</span><span class="p">,</span> <span class="n">ACCESS_LIST_MAX_ELEMENTS</span><span class="p">]</span>
    
<span class="k">class</span> <span class="nc">AccountAccessList</span><span class="p">(</span><span class="n">Container</span><span class="p">):</span>
    <span class="n">address</span><span class="p">:</span> <span class="n">Address32</span>
    <span class="n">subtrees</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">AccessSubtree</span><span class="p">,</span> <span class="n">ACCESS_LIST_MAX_ELEMENTS</span><span class="p">]</span>
    
<span class="k">class</span> <span class="nc">AccessSubtree</span><span class="p">(</span><span class="n">Container</span><span class="p">):</span>
    <span class="n">subtree_key</span><span class="p">:</span> <span class="n">uint256</span>
    <span class="n">elements</span><span class="p">:</span> <span class="n">BitVector</span><span class="p">[</span><span class="mi">256</span><span class="p">]</span>
</code></pre></div></div>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<h3 id="gas-reform">
<a href="#gas-reform" class="anchor-link"></a> Gas reform
</h3>
<p>Gas costs for reading storage and code are reformed to more closely reflect the gas costs under the new Verkle tree design. <code class="language-plaintext highlighter-rouge">WITNESS_CHUNK_COST</code> is set to charge 6.25 gas per byte for chunks, and <code class="language-plaintext highlighter-rouge">WITNESS_BRANCH_COST</code> is set to charge ~13,2 gas per byte for branches on average (assuming 144 byte branch length) and ~2.5 gas per byte in the worst case if an attacker fills the tree with keys deliberately computed to maximize proof length.</p>
<p>The main differences from gas costs in Berlin are:</p>
<ul>
<li>200 gas charged per 31 byte chunk of code. This has been estimated to increase average gas usage by ~6-12% suggesting 10-20% gas usage increases at a 350 gas per chunk level).</li>
<li>Cost for accessing adjacent storage slots (<code class="language-plaintext highlighter-rouge">key1 // 256 == key2 // 256</code>) decreases from 2100 to 200 for all slots after the first in the group,</li>
<li>Cost for accessing storage slots 0…63 decreases from 2100 to 200, including the first storage slot. This is likely to significantly improve performance of many existing contracts, which use those storage slots for single persistent variables.</li>
</ul>
<p>Gains from the latter two properties have not yet been analyzed, but are likely to significantly offset the losses from the first property. It’s likely that once compilers adapt to these rules, efficiency will increase further.</p>
<p>The precise specification of when access events take place, which makes up most of the complexity of the gas repricing, is necessary to clearly specify when data needs to be saved to the period 1 tree.</p>
<h2 id="backward-compatibility">
<a href="#backward-compatibility" class="anchor-link"></a> Backward Compatibility
</h2>
<p>This EIP requires a hard fork, since it modifies consensus rules.</p>
<p>The main backwards-compatibility-breaking changes is the gas costs for code chunk access making some applications less economically viable. It can be mitigated by increasing the gas limit at the same time as implementing this EIP, reducing the risk that applications will no longer work at all due to transaction gas usage rising above the block gas limit.</p>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>This EIP will mean that certain operations, mostly reading and writing several elements in the same suffix tree, become cheaper. If clients retain the same database structure as they have now, this would result in a DOS vector.</p>
<p>So some adaptation of the database is required in order to make this work.</p>
<ul>
<li>In all possible futures, it is important to logically separate the commitment scheme from data storage. In particular, no traversal of the commitment scheme tree should be necessary to find any given state element</li>
<li>In order to make accesses to the same stem cheap as required for this EIP, the best way is probably to store each stem in the same location in the database. Basically the 256 leaves of 32 bytes each would be stored in an 8kB BLOB. The overhead of reading/writing this BLOB is small because most of the cost of disk access is seeking and not the amount transferred.</li>
</ul>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/gballet">Guillaume Ballet</a>, <a href="https://github.com/vbuterin">Vitalik Buterin</a>, <a href="https://github.com/dankrad">Dankrad Feist</a>, "EIP-4762: Statelessness gas cost changes [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 4762, February 2022. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-4762.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-4762: Statelessness gas cost changes [DRAFT]",
    "author": "Guillaume Ballet (@gballet), Vitalik Buterin (@vbuterin), Dankrad Feist (@dankrad)",
    "name": "EIP-4762: Statelessness gas cost changes [DRAFT]",
    "dateCreated": "2022-02-03",
    "datePublished": "2022-02-03",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-4762-statelessness-gas-cost-changes/8714",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2022"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
