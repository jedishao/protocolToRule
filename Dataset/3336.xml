<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-3336: Paged memory allocation for the EVM</title>
<meta property="og:title" content="EIP-3336: Paged memory allocation for the EVM" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-3336" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-3336" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
üöß This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-3336: Paged memory allocation for the EVM
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3336.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/arachnid">Nick Johnson</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eips-3336-and-3337-improving-the-evms-memory-model/5482">https://ethereum-magicians.org/t/eips-3336-and-3337-improving-the-evms-memory-model/5482</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2021-03-06</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#parameters">Parameters</a></li>
<li><a href="#changes-to-memory-allocation-in-evm-implementations">Changes to memory allocation in EVM implementations</a></li>
<li><a href="#changes-to-memory-expansion-gas-cost">Changes to memory expansion gas cost</a></li>
<li><a href="#changes-to-mload-and-mstore">Changes to MLOAD and MSTORE</a></li>
<li><a href="#changes-to-other-memory-touching-opcodes">Changes to other memory-touching opcodes</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#memory-expansion-gas-cost">Memory expansion gas cost</a></li>
<li><a href="#additional-cost-for-mloads-and-mstores-spanning-two-pages">Additional cost for MLOADs and MSTOREs spanning two pages</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>Changes the memory model for the EVM to use pagination.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>Presently, the EVM charges for memory as a linear array starting at address 0 and extending to the highest address that has been read from or written to. This suffices for simple uses, but means that compilers have to generate programs that use memory compactly, which leads to wasted gas with reallocation of memory elements, and makes some memory models such as separate heap and stack areas impractical. This EIP proposes changing to a page-based billing model, which adds minimal complexity to implementations, while providing for much more versatility in EVM programs.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Most modern computers implement ‚Äúvirtual memory‚Äù for userspace programs, where programs have access to a large address space, with pages of RAM that are allocated as needed by the OS. This allows them to distribute data throughout memory in ways that minimises the amount of reallocation and copying that needs to go on, and permits flexible use of memory for data with different lifetimes. Implementing a simple version of paged memory inside the EVM will provide the same flexibility to compilers targeting the EVM.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="parameters">
<a href="#parameters" class="anchor-link"></a> Parameters
</h3>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code class="language-plaintext highlighter-rouge">FORK_BLOCK</code></td>
<td>TBD</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">PAGE_BITS</code></td>
<td>10</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">PAGE_BASE_COST</code></td>
<td>96</td>
</tr>
</tbody>
</table>
<p>For blocks where <code class="language-plaintext highlighter-rouge">block.number &gt;= FORK_BLOCK</code>, the following changes apply.</p>
<h3 id="changes-to-memory-allocation-in-evm-implementations">
<a href="#changes-to-memory-allocation-in-evm-implementations" class="anchor-link"></a> Changes to memory allocation in EVM implementations
</h3>
<p>Memory is now allocated in pages of <code class="language-plaintext highlighter-rouge">2**PAGE_BITS</code> bytes each. The most significant <code class="language-plaintext highlighter-rouge">256 - PAGE_BITS</code> bits of each memory address denote the page number, while the least significant <code class="language-plaintext highlighter-rouge">PAGE_BITS</code> bits of the memory address denote the location in the page. Pages are initialized to contain all zero bytes and allocated when the first byte from a page is read or written.</p>
<p>EVM implementations are encouraged to store the pagetable as an associative array (eg, hashtable or dict) mapping from page number to an array of bytes for the page.</p>
<h3 id="changes-to-memory-expansion-gas-cost">
<a href="#changes-to-memory-expansion-gas-cost" class="anchor-link"></a> Changes to memory expansion gas cost
</h3>
<p>Presently, the total cost to extend the memory to <code class="language-plaintext highlighter-rouge">a</code> words long is <code class="language-plaintext highlighter-rouge">Cmem(a) = 3 * a + floor(a ** 2 / 512)</code>. If the memory is already <code class="language-plaintext highlighter-rouge">b</code> words long, the incremental cost is <code class="language-plaintext highlighter-rouge">Cmem(a) - Cmem(b)</code>. <code class="language-plaintext highlighter-rouge">a</code> is the number of words required to cover the range from memory address 0 to the last word that has been read or written by the EVM.</p>
<p>Under this EIP, we define a new memory cost function, based on the number of allocated pages. This function is <code class="language-plaintext highlighter-rouge">Cmem'(p) = max(PAGE_BASE_COST * (p - 1) + floor(2 * (p - 1) ** 2), 0)</code>. As above, if the memory already contains <code class="language-plaintext highlighter-rouge">q</code> pages, the incremental cost is <code class="language-plaintext highlighter-rouge">Cmem'(p) - Cmem'(q)</code>.</p>
<h3 id="changes-to-mload-and-mstore">
<a href="#changes-to-mload-and-mstore" class="anchor-link"></a> Changes to <code class="language-plaintext highlighter-rouge">MLOAD</code> and <code class="language-plaintext highlighter-rouge">MSTORE</code>
</h3>
<p>Loading a word from memory or storing a word to memory requires instantiating any pages that it touches that do not already exist, with the resulting gas cost as described above. If the word being loaded or stored resides in a single page, the gas cost remains unchanged at 3 gas. If the word being loaded spans two pages, the cost is 6 gas.</p>
<h3 id="changes-to-other-memory-touching-opcodes">
<a href="#changes-to-other-memory-touching-opcodes" class="anchor-link"></a> Changes to other memory-touching opcodes
</h3>
<p><code class="language-plaintext highlighter-rouge">CALLDATACOPY</code>, <code class="language-plaintext highlighter-rouge">CODECOPY</code>, <code class="language-plaintext highlighter-rouge">EXTCODECOPY</code>, <code class="language-plaintext highlighter-rouge">CALL</code>, <code class="language-plaintext highlighter-rouge">CALLCODE</code>, <code class="language-plaintext highlighter-rouge">DELEGATECALL</code>, <code class="language-plaintext highlighter-rouge">STATICCALL</code>, <code class="language-plaintext highlighter-rouge">CREATE</code>, <code class="language-plaintext highlighter-rouge">MSTORE8</code> and any other opcodes that read or write memory are modified as follows:</p>
<ul>
<li>Any page they touch for reading or writing is instantiated if it is not already.</li>
<li>Memory expansion gas is charged as described above.</li>
</ul>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<h3 id="memory-expansion-gas-cost">
<a href="#memory-expansion-gas-cost" class="anchor-link"></a> Memory expansion gas cost
</h3>
<p>The new gas cost follows the same curve as the previous one, while ensuring that the new gas cost is always less than or equal to the previous cost. This prevents existing programs that make assumptions about memory allocation gas costs from resulting in errors, without unduly discounting memory below what it costs today. Intuitively, a program that uses up to a page boundary pays for one page less than they would under the old model, while a program that uses one word more than a page boundary pays for one word less than they would under the old model.</p>
<p>We believe that this incremental reduction will not have a significant impact on the effective gas limit, as it gets proportionally smaller as programs use more RAM.</p>
<h3 id="additional-cost-for-mloads-and-mstores-spanning-two-pages">
<a href="#additional-cost-for-mloads-and-mstores-spanning-two-pages" class="anchor-link"></a> Additional cost for MLOADs and MSTOREs spanning two pages
</h3>
<p>Loading or storing data spanning two memory pages requires more work from the EVM implementation, which must split the word at the page boundary and update the two (possibly disjoint) pages. Since we cannot guarantee loads and stores in existing EVM programs are page-aligned, we cannot prohibit this behaviour for efficiency. Instead, we propose treating each as two loads or stores for gas accounting purposes. This discourages the use of this functionality, and accounts for the additional execution cost, without prohibiting it outright.</p>
<p>This will result in additional gas costs for any programs that perform these operations. We believe this to be minimal, and hope to do future analysis to confirm this.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>The new function for memory expansion gas cost is designed specifically to avoid backwards compatibility issues by always charging less than or equal to the amount the current EVM would charge. Under some circumstances existing programs will be charged more for MLOADs and MSTOREs that span page boundaries as described above; we believe these changes will affect a minimum of programs and have only a small impact on their gas consumption.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<p>TBD</p>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>Potential CPU DoS issues arising from additional work done under the new model are alleviated by charging more for non-page-aligned reads and writes. Charges for memory expansion asymptotically approach those currently in force, so this change will not permit programs to allocate substantially more memory than they can today.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/arachnid">Nick Johnson</a>, "EIP-3336: Paged memory allocation for the EVM [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 3336, March 2021. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-3336.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-3336: Paged memory allocation for the EVM [DRAFT]",
    "author": "Nick Johnson (@arachnid)",
    "name": "EIP-3336: Paged memory allocation for the EVM [DRAFT]",
    "dateCreated": "2021-03-06",
    "datePublished": "2021-03-06",

    "discussionUrl": "https://ethereum-magicians.org/t/eips-3336-and-3337-improving-the-evms-memory-model/5482",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2021"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
