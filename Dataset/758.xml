<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-758: Subscriptions and filters for completed transactions</title>
<meta property="og:title" content="EIP-758: Subscriptions and filters for completed transactions" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-758" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-758" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
ðŸš§ This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-758: Subscriptions and filters for completed transactions
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-758.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="/cdn-cgi/l/email-protection#e18b80828aa195888f9883888a84cf8f8495">Jack Peterson</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Interface</td></tr>
<tr><th>Created</th><td>2017-11-09</td></tr>
<tr><th>Requires</th><td>
<a href="eip-1474">1474</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#subscription">Subscription</a></li>
<li><a href="#polling">Polling</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>Provide a way for external callers to be notified of completed transactions, and access the return data of functions executed when a transaction is mined.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>When a new transaction is submitted successfully to an Ethereum node, the node responds with the transactionâ€™s hash. If the transaction involved the execution of a contract function that returns data, the data is discarded. If the return data is state-dependent, which is common, there is no straightforward way for the caller to access or compute the return data. This EIP proposes that callers should be able to subscribe to (or poll for) completed transactions. The Ethereum node sends the return data to the caller when the transactions are sealed.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>External callers presently have no way of accessing return data from Ethereum, if the function was executed via <code class="language-plaintext highlighter-rouge">eth_sendTransaction</code> or <code class="language-plaintext highlighter-rouge">eth_sendRawTransaction</code> RPC request. Access to function return data is in many cases a desirable feature. Making return data available to external callers also addresses the inconsistency between internal callers, which have access to return data within the context of the transaction, and external callers, which do not. Presently, a common workaround is to log the return data, which is bad for several reasons: it contributes to chain bloat, imposes additional gas costs on the caller, and can result in unused logs being written if the externally called function involves other (internal) function calls that log their return data. While implementing the original version of this EIP, it was decided to expand this functionality slightly to allow for external callers to be notified of their completed transactions even in the case where there is <em>no</em> return data. This could be either because the method called doesnâ€™t return a value, or because the transaction is a simple transfer of value.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="subscription">
<a href="#subscription" class="anchor-link"></a> Subscription
</h3>
<p>A caller who wants to be notified when transactions of theirs complete sends an <code class="language-plaintext highlighter-rouge">eth_subscribe</code> RPC request with the first parameter <code class="language-plaintext highlighter-rouge">"completedTransaction"</code>:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eth_subscribe"</span><span class="p">,</span><span class="w"> </span><span class="nl">"params"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"completedTransaction"</span><span class="p">,</span><span class="w"> </span><span class="err">filter</span><span class="p">]}</span><span class="w">
</span></code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">filter</code> parameter is a dictionary containing 3 optional named arguments: <code class="language-plaintext highlighter-rouge">from</code>, <code class="language-plaintext highlighter-rouge">to</code>, and <code class="language-plaintext highlighter-rouge">hasReturnData</code>. <code class="language-plaintext highlighter-rouge">from</code> and <code class="language-plaintext highlighter-rouge">to</code> can each either be single addresses, or a list of addresses. They are used to filter out any transactions not sent from an address in the <code class="language-plaintext highlighter-rouge">from</code> list and sent to an address in the to list. <code class="language-plaintext highlighter-rouge">hasReturnData</code> is a booleanâ€“if it is specified and <code class="language-plaintext highlighter-rouge">true</code>, then notifications will be received only for completed transactions containing returnData.</p>
<p>For example, to restrict results to contract creations originating from either of two addresses (0x3f7d39bDBf1f5cE649c194571aEd3D2BbB2F85ce or 0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58):</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">filter</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"0x3f7d39bDBf1f5cE649c194571aEd3D2BbB2F85ce"</span><span class="p">,</span><span class="w">
                      </span><span class="s2">"0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58"</span><span class="p">],</span><span class="w">
           </span><span class="nl">"to"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"0x0"</span><span class="w"> 
         </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>To restrict results to method calls on contract address 0xD9Cb531aB97A652c8fC60dcF6D263fcA2F5764e9:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">filter</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"to"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"0xD9Cb531aB97A652c8fC60dcF6D263fcA2F5764e9"</span><span class="p">,</span><span class="w"> </span><span class="nl">"hasReturnData"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Or to be notified of any transactions submitted by this rpc client when they complete, with no further restrictions:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">filter</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div></div>
<p>After the request is received, the Ethereum node responds with a subscription ID:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x00000000000000000000000000000b0b"</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Suppose the caller then submits a transaction via <code class="language-plaintext highlighter-rouge">eth_sendTransaction</code> or <code class="language-plaintext highlighter-rouge">eth_sendRawTransaction</code> RPC request which has the transaction hash <code class="language-plaintext highlighter-rouge">"0x00000000000000000000000000000000000000000000000000000000deadbeef"</code>. When the transaction is sealed (mined), the Ethereum node pushes a notification to the caller. If the transaction is a method call on a contract, this will include the return value (eg. <code class="language-plaintext highlighter-rouge">"0x000000000000000000000000000000000000000000000000000000000000002a"</code>) of the called function:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eth_subscription"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"params"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"transactionHash"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x00000000000000000000000000000000000000000000000000000000deadbeef"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"returnData"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x000000000000000000000000000000000000000000000000000000000000002a"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"subscription"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x00000000000000000000000000000b0b"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>The caller receives notifications about their transactions in two cases: first when a transaction is sealed, and again (with an extra <code class="language-plaintext highlighter-rouge">"removed": true</code> field) if a transaction is affected by a chain reorganization. Notifications are sent to the client for all transactions submitted from the client that are sealed <em>after</em> subscribing. If <code class="language-plaintext highlighter-rouge">from</code>, <code class="language-plaintext highlighter-rouge">to</code>, or <code class="language-plaintext highlighter-rouge">hasReturnData</code> is specified, then only those matching the filter criteria will generate notifications. As with other subscriptions, the caller can send an <code class="language-plaintext highlighter-rouge">eth_unsubscribe</code> RPC request to stop receiving push notifications:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eth_unsubscribe"</span><span class="p">,</span><span class="w"> </span><span class="nl">"params"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"0x00000000000000000000000000000b0b"</span><span class="p">]}</span><span class="w">
</span></code></pre></div></div>
<h3 id="polling">
<a href="#polling" class="anchor-link"></a> Polling
</h3>
<p>Push notifications require full duplex connections (i.e., websocket or IPC). Instead of subscribing, callers using HTTP send an <code class="language-plaintext highlighter-rouge">eth_newCompletedTransactionFilter</code> request:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eth_newCompletedTransactionFilter"</span><span class="p">,</span><span class="w"> </span><span class="nl">"params"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="err">filter</span><span class="p">]</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>The Ethereum node responds with a filter ID:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x1"</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>When a transaction is submitted, the Ethereum node pushes the transaction notification, including return value, into a queue which is emptied when the caller polls using <code class="language-plaintext highlighter-rouge">eth_getFilterChanges</code>:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eth_getFilterChanges"</span><span class="p">,</span><span class="w"> </span><span class="nl">"params"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"0x1"</span><span class="p">]}</span><span class="w">
</span></code></pre></div></div>
<p>The node responds with an array of transaction hashes and their corresponding return data, in the order they were computed:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w">
    </span><span class="nl">"transactionHash"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x00000000000000000000000000000000000000000000000000000000deadbeef"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"returnData"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x000000000000000000000000000000000000000000000000000000000000002a"</span><span class="w">
  </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>All transactions that were sealed <em>after</em> the initial <code class="language-plaintext highlighter-rouge">eth_newCompletedTransactionFilter</code> request are included in this array. Again, if the <code class="language-plaintext highlighter-rouge">filter</code> param is a non-empty dictionary (contains either <code class="language-plaintext highlighter-rouge">from</code>, <code class="language-plaintext highlighter-rouge">to</code>, or <code class="language-plaintext highlighter-rouge">hasReturnData</code>) then only transactions matching the filter criteria generate notifications. Note that in the polling case, there is no way for the Ethereum node to be sure that an RPC client which submits a transaction was the same as the one who created the filter, so there is no restriction based on where the transaction was submitted.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p><a href="/EIPS/eip-658">EIP-658</a> originally proposed adding return data to transaction receipts. However, return data is not charged for (as it is not stored on the blockchain), so adding it to transaction receipts could result in DoS and spam opportunities. Instead, a simple Boolean <code class="language-plaintext highlighter-rouge">status</code> field was added to transaction receipts. This modified version of EIP 658 was included in the Byzantium hard fork. While the <code class="language-plaintext highlighter-rouge">status</code> field is useful, applications often need the return data as well.</p>
<p>The primary advantage of using the strategy outlined here is efficiency: no extra data needs to be stored on the blockchain, and minimal extra computational load is imposed on nodes. Although after-the-fact lookups of the return value would not be supported, this is consistent with the conventional use of return data, which are only accessible to the caller when the function returns, and are not stored for later use.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="/cdn-cgi/l/email-protection#127873717952667b7c6b707b79773c7c7766">Jack Peterson</a>, "EIP-758: Subscriptions and filters for completed transactions [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 758, November 2017. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-758.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-758: Subscriptions and filters for completed transactions [DRAFT]",
    "author": "Jack Peterson <jack@tinybike.net>",
    "name": "EIP-758: Subscriptions and filters for completed transactions [DRAFT]",
    "dateCreated": "2017-11-09",
    "datePublished": "2017-11-09",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2017"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
