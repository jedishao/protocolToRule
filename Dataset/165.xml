<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-165: Standard Interface Detection</title>
<meta property="og:title" content="EIP-165: Standard Interface Detection" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-165" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-165" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-165: Standard Interface Detection
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="/cdn-cgi/l/email-protection#c0a3a8b2a9b380a5b4a8a5b2a5b5adeeafb2a7">Christian Reitwießner</a>, <a href="/cdn-cgi/l/email-protection#8ae4e3e9e1caeffee2eff8efffe7a4e5f8ed">Nick Johnson</a>, <a href="/cdn-cgi/l/email-protection#355354575c545b7559405e465a1b5b5041425a475e">Fabian Vogelsteller</a>, <a href="/cdn-cgi/l/email-protection#375d5845535e7755564e5b5e595619545643">Jordi Baylina</a>, <a href="/cdn-cgi/l/email-protection#03686c6d7162672d65666f676e666a6671436171626a6d616c772d606c6e">Konrad Feldmeier</a>, <a href="/cdn-cgi/l/email-protection#214648554954430f424e4c6151494e530f4f4455">William Entriken</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2018-01-23</td></tr>
<tr><th>Requires</th><td>
<a href="eip-214">214</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#how-interfaces-are-identified">How Interfaces are Identified</a></li>
<li><a href="#how-a-contract-will-publish-the-interfaces-it-implements">How a Contract will Publish the Interfaces it Implements</a></li>
<li><a href="#how-to-detect-if-a-contract-implements-erc-165">How to Detect if a Contract Implements ERC-165</a></li>
<li><a href="#how-to-detect-if-a-contract-implements-any-given-interface">How to Detect if a Contract Implements any Given Interface</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#implementation">Implementation</a></li>
<li><a href="#version-history">Version history</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>Creates a standard method to publish and detect what interfaces a smart contract implements.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>Herein, we standardize the following:</p>
<ol>
<li>How interfaces are identified</li>
<li>How a contract will publish the interfaces it implements</li>
<li>How to detect if a contract implements ERC-165</li>
<li>How to detect if a contract implements any given interface</li>
</ol>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>For some “standard interfaces” like <a href="/EIPS/eip-20">the ERC-20 token interface</a>, it is sometimes useful to query whether a contract supports the interface and if yes, which version of the interface, in order to adapt the way in which the contract is to be interacted with. Specifically for ERC-20, a version identifier has already been proposed. This proposal standardizes the concept of interfaces and standardizes the identification (naming) of interfaces.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="how-interfaces-are-identified">
<a href="#how-interfaces-are-identified" class="anchor-link"></a> How Interfaces are Identified
</h3>
<p>For this standard, an <em>interface</em> is a set of <a href="https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector">function selectors as defined by the Ethereum ABI</a>. This a subset of <a href="https://solidity.readthedocs.io/en/develop/abi-spec.html">Solidity’s concept of interfaces</a> and the <code class="language-plaintext highlighter-rouge">interface</code> keyword definition which also defines return types, mutability and events.</p>
<p>We define the interface identifier as the XOR of all function selectors in the interface. This code example shows how to calculate an interface identifier:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">interface</span> <span class="n">Solidity101</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">hello</span><span class="p">()</span> <span class="k">external</span> <span class="k">pure</span><span class="p">;</span>
    <span class="k">function</span> <span class="n">world</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">external</span> <span class="k">pure</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">Selector</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">calculateSelector</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bytes4</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Solidity101</span> <span class="n">i</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">i</span><span class="p">.</span><span class="n">hello</span><span class="p">.</span><span class="nb">selector</span> <span class="o">^</span> <span class="n">i</span><span class="p">.</span><span class="n">world</span><span class="p">.</span><span class="nb">selector</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note: interfaces do not permit optional functions, therefore, the interface identity will not include them.</p>
<h3 id="how-a-contract-will-publish-the-interfaces-it-implements">
<a href="#how-a-contract-will-publish-the-interfaces-it-implements" class="anchor-link"></a> How a Contract will Publish the Interfaces it Implements
</h3>
<p>A contract that is compliant with ERC-165 shall implement the following interface (referred as <code class="language-plaintext highlighter-rouge">ERC165.sol</code>):</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">interface</span> <span class="n">ERC165</span> <span class="p">{</span>
    <span class="c1">/// @notice Query if a contract implements an interface
</span>    <span class="c1">/// @param interfaceID The interface identifier, as specified in ERC-165
</span>    <span class="c1">/// @dev Interface identification is specified in ERC-165. This function
</span>    <span class="c1">///  uses less than 30,000 gas.
</span>    <span class="c1">/// @return `true` if the contract implements `interfaceID` and
</span>    <span class="c1">///  `interfaceID` is not 0xffffffff, `false` otherwise
</span>    <span class="k">function</span> <span class="n">supportsInterface</span><span class="p">(</span><span class="kt">bytes4</span> <span class="n">interfaceID</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The interface identifier for this interface is <code class="language-plaintext highlighter-rouge">0x01ffc9a7</code>. You can calculate this by running <code class="language-plaintext highlighter-rouge">bytes4(keccak256('supportsInterface(bytes4)'));</code> or using the <code class="language-plaintext highlighter-rouge">Selector</code> contract above.</p>
<p>Therefore the implementing contract will have a <code class="language-plaintext highlighter-rouge">supportsInterface</code> function that returns:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">true</code> when <code class="language-plaintext highlighter-rouge">interfaceID</code> is <code class="language-plaintext highlighter-rouge">0x01ffc9a7</code> (EIP165 interface)</li>
<li><code class="language-plaintext highlighter-rouge">false</code> when <code class="language-plaintext highlighter-rouge">interfaceID</code> is <code class="language-plaintext highlighter-rouge">0xffffffff</code></li>
<li><code class="language-plaintext highlighter-rouge">true</code> for any other <code class="language-plaintext highlighter-rouge">interfaceID</code> this contract implements</li>
<li><code class="language-plaintext highlighter-rouge">false</code> for any other <code class="language-plaintext highlighter-rouge">interfaceID</code></li>
</ul>
<p>This function must return a bool and use at most 30,000 gas.</p>
<p>Implementation note, there are several logical ways to implement this function. Please see the example implementations and the discussion on gas usage.</p>
<h3 id="how-to-detect-if-a-contract-implements-erc-165">
<a href="#how-to-detect-if-a-contract-implements-erc-165" class="anchor-link"></a> How to Detect if a Contract Implements ERC-165
</h3>
<ol>
<li>The source contract makes a <code class="language-plaintext highlighter-rouge">STATICCALL</code> to the destination address with input data: <code class="language-plaintext highlighter-rouge">0x01ffc9a701ffc9a700000000000000000000000000000000000000000000000000000000</code> and gas 30,000. This corresponds to <code class="language-plaintext highlighter-rouge">contract.supportsInterface(0x01ffc9a7)</code>.</li>
<li>If the call fails or return false, the destination contract does not implement ERC-165.</li>
<li>If the call returns true, a second call is made with input data <code class="language-plaintext highlighter-rouge">0x01ffc9a7ffffffff00000000000000000000000000000000000000000000000000000000</code>.</li>
<li>If the second call fails or returns true, the destination contract does not implement ERC-165.</li>
<li>Otherwise it implements ERC-165.</li>
</ol>
<h3 id="how-to-detect-if-a-contract-implements-any-given-interface">
<a href="#how-to-detect-if-a-contract-implements-any-given-interface" class="anchor-link"></a> How to Detect if a Contract Implements any Given Interface
</h3>
<ol>
<li>If you are not sure if the contract implements ERC-165, use the above procedure to confirm.</li>
<li>If it does not implement ERC-165, then you will have to see what methods it uses the old-fashioned way.</li>
<li>If it implements ERC-165 then just call <code class="language-plaintext highlighter-rouge">supportsInterface(interfaceID)</code> to determine if it implements an interface you can use.</li>
</ol>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>We tried to keep this specification as simple as possible. This implementation is also compatible with the current Solidity version.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>The mechanism described above (with <code class="language-plaintext highlighter-rouge">0xffffffff</code>) should work with most of the contracts previous to this standard to determine that they do not implement ERC-165.</p>
<p>Also <a href="/EIPS/eip-137">the ENS</a> already implements this EIP.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<p>Following is a contract that detects which interfaces other contracts implement. From @fulldecent and @jbaylina.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">ERC165Query</span> <span class="p">{</span>
    <span class="kt">bytes4</span> <span class="k">constant</span> <span class="n">InvalidID</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
    <span class="kt">bytes4</span> <span class="k">constant</span> <span class="n">ERC165ID</span> <span class="o">=</span> <span class="mh">0x01ffc9a7</span><span class="p">;</span>

    <span class="k">function</span> <span class="n">doesContractImplementInterface</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">uint256</span> <span class="n">success</span><span class="p">;</span>
        <span class="kt">uint256</span> <span class="n">result</span><span class="p">;</span>

        <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">=</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">ERC165ID</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">success</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="n">result</span><span class="o">==</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">=</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">InvalidID</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">success</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="n">result</span><span class="o">!=</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">=</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">_interfaceId</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">success</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">result</span><span class="o">==</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">constant</span> <span class="k">internal</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">success</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">bytes4</span> <span class="n">erc165ID</span> <span class="o">=</span> <span class="n">ERC165ID</span><span class="p">;</span>

        <span class="k">assembly</span> <span class="p">{</span>
                <span class="kr">let</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">mload</span><span class="p">(</span><span class="mh">0x40</span><span class="p">)</span>               <span class="c1">// Find empty storage location using "free memory pointer"
</span>                <span class="n">mstore</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">erc165ID</span><span class="p">)</span>                <span class="c1">// Place signature at beginning of empty storage
</span>                <span class="n">mstore</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">),</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="c1">// Place first argument directly next to signature
</span>
                <span class="n">success</span> <span class="o">:=</span> <span class="n">staticcall</span><span class="p">(</span>
                                    <span class="mi">30000</span><span class="p">,</span>         <span class="c1">// 30k gas
</span>                                    <span class="n">_contract</span><span class="p">,</span>     <span class="c1">// To addr
</span>                                    <span class="n">x</span><span class="p">,</span>             <span class="c1">// Inputs are stored at location x
</span>                                    <span class="mh">0x24</span><span class="p">,</span>          <span class="c1">// Inputs are 36 bytes long
</span>                                    <span class="n">x</span><span class="p">,</span>             <span class="c1">// Store output over input (saves space)
</span>                                    <span class="mh">0x20</span><span class="p">)</span>          <span class="c1">// Outputs are 32 bytes long
</span>
                <span class="n">result</span> <span class="o">:=</span> <span class="n">mload</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>                 <span class="c1">// Load the result
</span>        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="implementation">
<a href="#implementation" class="anchor-link"></a> Implementation
</h2>
<p>This approach uses a <code class="language-plaintext highlighter-rouge">view</code> function implementation of <code class="language-plaintext highlighter-rouge">supportsInterface</code>. The execution cost is 586 gas for any input. But contract initialization requires storing each interface (<code class="language-plaintext highlighter-rouge">SSTORE</code> is 20,000 gas). The <code class="language-plaintext highlighter-rouge">ERC165MappingImplementation</code> contract is generic and reusable.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"./ERC165.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">ERC165MappingImplementation</span> <span class="k">is</span> <span class="n">ERC165</span> <span class="p">{</span>
    <span class="c1">/// @dev You must not set element 0xffffffff to true
</span>    <span class="k">mapping</span><span class="p">(</span><span class="kt">bytes4</span> <span class="o">=&gt;</span> <span class="kt">bool</span><span class="p">)</span> <span class="k">internal</span> <span class="n">supportedInterfaces</span><span class="p">;</span>

    <span class="k">function</span> <span class="n">ERC165MappingImplementation</span><span class="p">()</span> <span class="k">internal</span> <span class="p">{</span>
        <span class="n">supportedInterfaces</span><span class="p">[</span><span class="nb">this</span><span class="p">.</span><span class="n">supportsInterface</span><span class="p">.</span><span class="nb">selector</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">supportsInterface</span><span class="p">(</span><span class="kt">bytes4</span> <span class="n">interfaceID</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">supportedInterfaces</span><span class="p">[</span><span class="n">interfaceID</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">interface</span> <span class="n">Simpson</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">is2D</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
    <span class="k">function</span> <span class="n">skinColor</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">Lisa</span> <span class="k">is</span> <span class="n">ERC165MappingImplementation</span><span class="p">,</span> <span class="n">Simpson</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">Lisa</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">supportedInterfaces</span><span class="p">[</span><span class="nb">this</span><span class="p">.</span><span class="n">is2D</span><span class="p">.</span><span class="nb">selector</span> <span class="o">^</span> <span class="nb">this</span><span class="p">.</span><span class="n">skinColor</span><span class="p">.</span><span class="nb">selector</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">is2D</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">){}</span>
    <span class="k">function</span> <span class="n">skinColor</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">){}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Following is a <code class="language-plaintext highlighter-rouge">pure</code> function implementation of <code class="language-plaintext highlighter-rouge">supportsInterface</code>. The worst-case execution cost is 236 gas, but increases linearly with a higher number of supported interfaces.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"./ERC165.sol"</span><span class="p">;</span>

<span class="k">interface</span> <span class="n">Simpson</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">is2D</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
    <span class="k">function</span> <span class="n">skinColor</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">Homer</span> <span class="k">is</span> <span class="n">ERC165</span><span class="p">,</span> <span class="n">Simpson</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">supportsInterface</span><span class="p">(</span><span class="kt">bytes4</span> <span class="n">interfaceID</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span>
          <span class="n">interfaceID</span> <span class="o">==</span> <span class="nb">this</span><span class="p">.</span><span class="n">supportsInterface</span><span class="p">.</span><span class="nb">selector</span> <span class="o">||</span> <span class="c1">// ERC165
</span>          <span class="n">interfaceID</span> <span class="o">==</span> <span class="nb">this</span><span class="p">.</span><span class="n">is2D</span><span class="p">.</span><span class="nb">selector</span>
                         <span class="o">^</span> <span class="nb">this</span><span class="p">.</span><span class="n">skinColor</span><span class="p">.</span><span class="nb">selector</span><span class="p">;</span> <span class="c1">// Simpson
</span>    <span class="p">}</span>

    <span class="k">function</span> <span class="n">is2D</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">){}</span>
    <span class="k">function</span> <span class="n">skinColor</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">){}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>With three or more supported interfaces (including ERC165 itself as a required supported interface), the mapping approach (in every case) costs less gas than the pure approach (at worst case).</p>
<h2 id="version-history">
<a href="#version-history" class="anchor-link"></a> Version history
</h2>
<ul>
<li>
<p>PR 1640, finalized 2019-01-23 – This corrects the noThrowCall test case to use 36 bytes rather than the previous 32 bytes. The previous code was an error that still silently worked in Solidity 0.4.x but which was broken by new behavior introduced in Solidity 0.5.0. This change was discussed at <a href="https://github.com/ethereum/EIPs/pull/1640">#1640</a>.</p>
</li>
<li>
<p>EIP 165, finalized 2018-04-20 – Original published version.</p>
</li>
</ul>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="/cdn-cgi/l/email-protection#f3909b819a80b396879b968196869edd9c8194">Christian Reitwießner</a>, <a href="/cdn-cgi/l/email-protection#dfb1b6bcb49fbaabb7baadbaaab2f1b0adb8">Nick Johnson</a>, <a href="/cdn-cgi/l/email-protection#a0c6c1c2c9c1cee0ccd5cbd3cf8ecec5d4d7cfd2cb">Fabian Vogelsteller</a>, <a href="/cdn-cgi/l/email-protection#92f8fde0f6fbd2f0f3ebfefbfcf3bcf1f3e6">Jordi Baylina</a>, <a href="/cdn-cgi/l/email-protection#c8a3a7a6baa9ace6aeada4aca5ada1adba88aabaa9a1a6aaa7bce6aba7a5">Konrad Feldmeier</a>, <a href="/cdn-cgi/l/email-protection#1d7a746975687f337e72705d6d75726f33737869">William Entriken</a>, "EIP-165: Standard Interface Detection," <em>Ethereum Improvement Proposals</em>, no. 165, January 2018. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-165.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-165: Standard Interface Detection",
    "author": "Christian Reitwießner <chris@ethereum.org>, Nick Johnson <nick@ethereum.org>, Fabian Vogelsteller <fabian@lukso.network>, Jordi Baylina <jordi@baylina.cat>, Konrad Feldmeier <konrad.feldmeier@brainbot.com>, William Entriken <github.com@phor.net>",
    "name": "EIP-165: Standard Interface Detection",
    "dateCreated": "2018-01-23",
    "datePublished": "2018-01-23",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2018"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
