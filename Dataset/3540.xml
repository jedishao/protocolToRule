<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-3540: EVM Object Format (EOF) v1</title>
<meta property="og:title" content="EIP-3540: EVM Object Format (EOF) v1" />
<meta name="description" content="EOF is an extensible and versioned container format for EVM bytecode with a once-off validation at deploy time." />
<meta property="og:description" content="EOF is an extensible and versioned container format for EVM bytecode with a once-off validation at deploy time." />
<meta name="twitter:description" content="EOF is an extensible and versioned container format for EVM bytecode with a once-off validation at deploy time." />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-3540" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-3540" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="review">
📖 This EIP is in the review stage. It is subject to changes and feedback is appreciated.
</div>
<div class="home">
<h1 class="page-heading">
EIP-3540: EVM Object Format (EOF) v1
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3540.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>EOF is an extensible and versioned container format for EVM bytecode with a once-off validation at deploy time.</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/axic">Alex Beregszaszi</a>, <a href="https://github.com/chfast">Paweł Bylica</a>, <a href="https://github.com/gumb0">Andrei Maiboroda</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/evm-object-format-eof/5727">https://ethereum-magicians.org/t/evm-object-format-eof/5727</a></td></tr>
<tr><th>Status</th><td>Review
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2021-03-16</td></tr>
<tr><th>Requires</th><td>
<a href="eip-3541">3541</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#remarks">Remarks</a></li>
<li><a href="#code-validation">Code validation</a></li>
<li><a href="#container-specification">Container specification</a></li>
<li><a href="#eof-version-1">EOF version 1</a></li>
<li><a href="#changes-to-execution-semantics">Changes to execution semantics</a></li>
<li><a href="#changes-to-contract-creation-semantics">Changes to contract creation semantics</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#execution-vs-creation-time-validation">Execution vs. creation time validation</a></li>
<li><a href="#contract-creation-restrictions">Contract creation restrictions</a></li>
<li><a href="#the-magic">The MAGIC</a></li>
<li><a href="#eof-version-range-start-with-1">EOF version range start with 1</a></li>
<li><a href="#section-structure">Section structure</a></li>
<li><a href="#data-only-contracts">Data-only contracts</a></li>
<li><a href="#pc-starts-with-0-at-the-code-section">PC starts with 0 at the code section</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a>
<ul>
<li><a href="#eof-validation">EOF validation</a></li>
<li><a href="#contract-creation">Contract creation</a></li>
<li><a href="#contract-execution">Contract execution</a></li>
</ul>
</li>
<li><a href="#reference-implementation">Reference Implementation</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>We introduce an extensible and versioned container format for the EVM with a once-off validation at deploy time. The version described here brings the tangible benefit of code and data separation, and allows for easy introduction of a variety of changes in the future. This change relies on the reserved byte introduced by <a href="/EIPS/eip-3541">EIP-3541</a>.</p>
<p>To summarise, EOF bytecode has the following layout:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>magic, version, (section_kind, section_size)+, 0, &lt;section contents&gt;
</code></pre></div></div>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>On-chain deployed EVM bytecode contains no pre-defined structure today. Code is typically validated in clients to the extent of <code class="language-plaintext highlighter-rouge">JUMPDEST</code> analysis at runtime, every single time prior to execution. This poses not only an overhead, but also a challenge for introducing new or deprecating existing features.</p>
<p>Validating code during the contract creation process allows code versioning without an additional version field in the account. Versioning is a useful tool for introducing or deprecating features, especially for larger changes (such as significant changes to control flow, or features like account abstraction).</p>
<p>The format described in this EIP introduces a simple and extensible container with a minimal set of changes required to both clients and languages, and introduces validation.</p>
<p>The first tangible feature it provides is separation of code and data. This separation is especially beneficial for on-chain code validators (like those utilised by layer-2 scaling tools, such as Optimism), because they can distinguish code and data (this includes deployment code and constructor arguments too). Currently they a) require changes prior to contract deployment; b) implement a fragile method; or c) implement an expensive and restrictive jump analysis. Code and data separation can result in ease of use and significant gas savings for such use cases. Additionally, various (static) analysis tools can also benefit, though off-chain tools can already deal with existing code, so the impact is smaller.</p>
<p>A non-exhaustive list of proposed changes which could benefit from this format:</p>
<ul>
<li>Including a <code class="language-plaintext highlighter-rouge">JUMPDEST</code>-table (to avoid analysis at execution time) and/or removing <code class="language-plaintext highlighter-rouge">JUMPDEST</code>s entirely.</li>
<li>Introducing static jumps (with relative addresses) and jump tables, and disallowing dynamic jumps at the same time.</li>
<li>Requiring code section(s) to be terminated by <code class="language-plaintext highlighter-rouge">STOP</code>. (Assumptions like this can provide significant speed improvements in interpreters, such as a speed up of ~7% seen in <a href="https://github.com/ethereum/evmone/pull/295">evmone</a>.)</li>
<li>Multi-byte opcodes without any workarounds.</li>
<li>Representing functions as individual code sections instead of subroutines.</li>
<li>Introducing special sections for different use cases, notably Account Abstraction.</li>
</ul>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p><em>We use <a href="https://tools.ietf.org/html/rfc2119">RFC2119</a> keywords in this section.</em></p>
<p>In order to guarantee that every EOF-formatted contract in the state is valid, we need to prevent already deployed (and not validated) contracts from being recognized as such format. This is achieved by choosing a byte sequence for the <em>magic</em> that doesn’t exist in any of the already deployed contracts.</p>
<h3 id="remarks">
<a href="#remarks" class="anchor-link"></a> Remarks
</h3>
<p>The <em>initcode</em> is the code executed in the context of the <em>create</em> transaction, <code class="language-plaintext highlighter-rouge">CREATE</code>, or <code class="language-plaintext highlighter-rouge">CREATE2</code> instructions. The <em>initcode</em> returns <em>code</em> (via the <code class="language-plaintext highlighter-rouge">RETURN</code> instruction), which is inserted into the account. See section 7 (“Contract Creation”) in the Yellow Paper for more information.</p>
<p>The opcode <code class="language-plaintext highlighter-rouge">0xEF</code> is currently an undefined instruction, therefore: <em>It pops no stack items and pushes no stack items, and it causes an exceptional abort when executed.</em> This means <em>initcode</em> or already deployed <em>code</em> starting with this instruction will continue to abort execution.</p>
<h3 id="code-validation">
<a href="#code-validation" class="anchor-link"></a> Code validation
</h3>
<p>We introduce <em>code validation</em> for new contract creation. To achieve this, we define a format called EVM Object Format (EOF), containing a version indicator, and a ruleset of validity tied to a given version.</p>
<p>At <code class="language-plaintext highlighter-rouge">block.number == HF_BLOCK</code> new contract creation is modified:</p>
<ul>
<li>if <em>initcode</em> or <em>code</em> starts with the <code class="language-plaintext highlighter-rouge">MAGIC</code>, it is considered to be EOF formatted and will undergo validation specified in the following sections,</li>
<li>else if <em>code</em> starts with <code class="language-plaintext highlighter-rouge">0xEF</code>, creation continues to result in an exceptional abort (the rule introduced in EIP-3541),</li>
<li>otherwise code is considered <em>legacy code</em> and the following rules do not apply to it.</li>
</ul>
<h3 id="container-specification">
<a href="#container-specification" class="anchor-link"></a> Container specification
</h3>
<p>EOF container is a binary format with the capability of providing the EOF version number and a list of EOF sections.</p>
<p>The container starts with the EOF header:</p>
<table>
<thead>
<tr>
<th>description</th>
<th>length</th>
<th>value</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>magic</td>
<td>2-bytes</td>
<td>0xEF00</td>
<td> </td>
</tr>
<tr>
<td>version</td>
<td>1-byte</td>
<td>0x01–0xFF</td>
<td>EOF version number</td>
</tr>
</tbody>
</table>
<p>The EOF header is followed by at least one section header. Each section header contains two fields, <code class="language-plaintext highlighter-rouge">section_kind</code> and <code class="language-plaintext highlighter-rouge">section_size</code>.</p>
<table>
<thead>
<tr>
<th>description</th>
<th>length</th>
<th>value</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>section_kind</td>
<td>1-byte</td>
<td>0x01–0xFF</td>
<td>Encoded as a 8-bit unsigned number.</td>
</tr>
<tr>
<td>section_size</td>
<td>2-bytes</td>
<td>0x0001–0xFFFF</td>
<td>Encoded as a 16-bit unsigned big-endian number.</td>
</tr>
</tbody>
</table>
<p>The list of section headers is terminated with the <em>section headers terminator byte</em> <code class="language-plaintext highlighter-rouge">0x00</code>.</p>
<h4 id="container-validation-rules">
<a href="#container-validation-rules" class="anchor-link"></a> Container validation rules
</h4>
<ol>
<li><code class="language-plaintext highlighter-rouge">version</code> MUST NOT be <code class="language-plaintext highlighter-rouge">0</code>.[^1](#EOF-version-range-start-with-1)</li>
<li><code class="language-plaintext highlighter-rouge">section_kind</code> MUST NOT be <code class="language-plaintext highlighter-rouge">0</code>. The value <code class="language-plaintext highlighter-rouge">0</code> is reserved for <em>section headers terminator byte</em>.</li>
<li><code class="language-plaintext highlighter-rouge">section_size</code> MUST NOT be <code class="language-plaintext highlighter-rouge">0</code>. If a section is empty its section header MUST be omitted.</li>
<li>There MUST be at least one section (and therefore section header).</li>
<li>Section data size MUST be equal to <code class="language-plaintext highlighter-rouge">section_size</code> declared in its header.</li>
<li>Stray bytes outside of sections MUST NOT be present. This includes trailing bytes after the last section.</li>
</ol>
<h3 id="eof-version-1">
<a href="#eof-version-1" class="anchor-link"></a> EOF version 1
</h3>
<h4 id="section-kinds">
<a href="#section-kinds" class="anchor-link"></a> Section kinds
</h4>
<p>The section kinds for EOF version 1 are defined as follows. The list may be extended in future versions.</p>
<table>
<thead>
<tr>
<th>section_kind</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td><em>reserved for section headers terminator byte</em></td>
</tr>
<tr>
<td>1</td>
<td>code</td>
</tr>
<tr>
<td>2</td>
<td>data</td>
</tr>
</tbody>
</table>
<h4 id="eof-version-1-validation-rules">
<a href="#eof-version-1-validation-rules" class="anchor-link"></a> EOF version 1 validation rules
</h4>
<ol>
<li>In addition to general validation rules above, EOF version 1 bytecode conforms to the rules specified below:
<ul>
<li>Exactly one code section MUST be present.</li>
<li>The code section MUST be the first section.</li>
<li>A single data section MAY follow the code section.</li>
</ul>
</li>
<li>Any other version is invalid.</li>
</ol>
<p>(<em>Remark:</em> Contract creation code SHOULD set the section size of the data section so that the constructor arguments fit it.)</p>
<h3 id="changes-to-execution-semantics">
<a href="#changes-to-execution-semantics" class="anchor-link"></a> Changes to execution semantics
</h3>
<p>For clarity, the <em>container</em> refers to the complete account code, while <em>code</em> refers to the contents of the code section only.</p>
<ol>
<li><code class="language-plaintext highlighter-rouge">JUMPDEST</code>-analysis is only run on the <em>code</em>.</li>
<li>Execution starts at the first byte of the <em>code</em>, and <code class="language-plaintext highlighter-rouge">PC</code> is set to 0.</li>
<li>If <code class="language-plaintext highlighter-rouge">PC</code> goes outside of the code section bounds, execution aborts with failure.</li>
<li><code class="language-plaintext highlighter-rouge">PC</code> returns the current position within the <em>code</em>.</li>
<li><code class="language-plaintext highlighter-rouge">JUMP</code>/<code class="language-plaintext highlighter-rouge">JUMPI</code> uses an absolute offset within the <em>code</em>.</li>
<li><code class="language-plaintext highlighter-rouge">CODECOPY</code>/<code class="language-plaintext highlighter-rouge">CODESIZE</code>/<code class="language-plaintext highlighter-rouge">EXTCODECOPY</code>/<code class="language-plaintext highlighter-rouge">EXTCODESIZE</code>/<code class="language-plaintext highlighter-rouge">EXTCODEHASH</code> keeps operating on the entire <em>container</em>.</li>
<li>The input to <code class="language-plaintext highlighter-rouge">CREATE</code>/<code class="language-plaintext highlighter-rouge">CREATE2</code> is still the entire <em>container</em>.</li>
</ol>
<h3 id="changes-to-contract-creation-semantics">
<a href="#changes-to-contract-creation-semantics" class="anchor-link"></a> Changes to contract creation semantics
</h3>
<p>For clarity, the <em>EOF prefix</em> together with a version number <em>n</em> is denoted as the <em>EOFn prefix</em>, e.g. <em>EOF1 prefix</em>.</p>
<ol>
<li>If <em>initcode’s container</em> has EOF1 prefix it must be valid EOF1 code.</li>
<li>If <em>code’s container</em> has EOF1 prefix it must be valid EOF1 code.</li>
</ol>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>EVM and/or account versioning has been discussed numerous times over the past years. This proposal aims to learn from them. See <a href="https://ethereum-magicians.org/t/ethereum-account-versioning/3508">this collection of previous proposals</a> for a good starting point.</p>
<h3 id="execution-vs-creation-time-validation">
<a href="#execution-vs-creation-time-validation" class="anchor-link"></a> Execution vs. creation time validation
</h3>
<p>This specification introduces creation time validation, which means:</p>
<ul>
<li>All created contracts with <em>EOFn</em> prefix are valid according to version <em>n</em> rules. This is very strong and useful property. The client can trust that the deployed code is well-formed.</li>
<li>In future, this allows to serialize <code class="language-plaintext highlighter-rouge">JUMPDEST</code> map in the EOF container and eliminate the need of implicit <code class="language-plaintext highlighter-rouge">JUMPDEST</code> analysis required before execution.</li>
<li>Or to completely remove the need for <code class="language-plaintext highlighter-rouge">JUMPDEST</code> instructions.</li>
<li>This helps with deprecating EVM instructions and/or features.</li>
<li>The biggest disadvantage is that deploy-time validation of EOF code must be enabled in two hard-forks. However, the first step (<a href="/EIPS/eip-3541">EIP-3541</a>) is already deployed in London.</li>
</ul>
<p>The alternative is to have execution time validation for EOF. This is performed every single time a contract is executed, however clients may be able to cache validation results. This <em>alternative</em> approach has the following properties:</p>
<ul>
<li>Because the validation is consensus-level execution step, it means the execution always requires the entire code. This makes <em>code merkleization impractical</em>.</li>
<li>Can be enabled via a single hard-fork.</li>
<li>Better backwards compatibility: data contracts starting with the <code class="language-plaintext highlighter-rouge">0xEF</code> byte or the <em>EOF prefix</em> can be deployed. This is a dubious benefit however.</li>
</ul>
<h3 id="contract-creation-restrictions">
<a href="#contract-creation-restrictions" class="anchor-link"></a> Contract creation restrictions
</h3>
<p>The <a href="#changes-to-contract-creation-semantics">Changes to contact creation semantics</a> section defines minimal set of restrictions related to the contract creation: if <em>initcode</em> or <em>code</em> has the EOF1 container prefix it must be validated. This adds two validation steps in the contract creation, any of it failing will result in contract creation failure.</p>
<p>Since <em>initcode</em> and <em>code</em> are evaluated for EOF1 independently, number of interesting combinations are allowed:</p>
<ul>
<li>Create transaction with EOF1 <em>initcode</em> can deploy legacy contract,</li>
<li>EOF1 contract can execute <code class="language-plaintext highlighter-rouge">CREATE</code> instruction with legacy <em>initcode</em> to create new legacy contract,</li>
<li>Legacy contract can execute <code class="language-plaintext highlighter-rouge">CREATE</code> instruction with EOF1 <em>initcode</em> to create new EOF1 contract,</li>
<li>Legacy contract can execute <code class="language-plaintext highlighter-rouge">CREATE</code> instruction with EOF1 <em>initcode</em> to create new legacy contract,</li>
<li>etc.</li>
</ul>
<p>To limit the number of exotic bytecode version combinations, additional restrictions are considered, but currently are not part of the specification:</p>
<ol>
<li>The EOF version of <em>initcode</em> must much the version of <em>code</em>.</li>
<li>An EOF1 contract must not create legacy contracts.</li>
</ol>
<p>Finally, create transaction must be allowed to contain legacy <em>initcode</em> and deploy legacy <em>code</em> because otherwise there is no transition period allowing upgrading transaction signing tools. Deprecating such transactions may be considered in future.</p>
<h3 id="the-magic">
<a href="#the-magic" class="anchor-link"></a> The MAGIC
</h3>
<ol>
<li>
<p>The first byte <code class="language-plaintext highlighter-rouge">0xEF</code> was chosen because it is reserved for this purpose by <a href="/EIPS/eip-3541">EIP-3541</a>.</p>
</li>
<li>The second byte <code class="language-plaintext highlighter-rouge">0x00</code> was chosen to avoid clashes with three contracts which were deployed on <strong>Mainnet</strong>:
<ul>
<li><code class="language-plaintext highlighter-rouge">EFF09f918bf09f9fa9</code> <a href="https://etherscan.io/address/0xca7bf67ab492b49806e24b6e2e4ec105183caa01">0xca7bf67ab492b49806e24b6e2e4ec105183caa01</a></li>
<li><code class="language-plaintext highlighter-rouge">EF</code> <a href="https://etherscan.io/address/0x897da0f23ccc5e939ec7a53032c5e80fd1a947ec">0x897da0f23ccc5e939ec7a53032c5e80fd1a947ec</a></li>
 <li><code class="language-plaintext highlighter-rouge">EF</code> <a href="https://etherscan.io/address/0x6e51d4d9be52b623a3d3a2fa8d3c5e3e01175cd0">0x6e51d4d9be52b623a3d3a2fa8d3c5e3e01175cd0</a></li>
</ul>
</li>
<li>No contracts starting with <code class="language-plaintext highlighter-rouge">0xEF</code> bytes exist on public testnets: Goerli, Ropsten, Rinkeby, Kovan and Sepolia at their London fork block.</li>
</ol>
<h3 id="eof-version-range-start-with-1">
<a href="#eof-version-range-start-with-1" class="anchor-link"></a> EOF version range start with 1
</h3>
<p>The version number 0 will never be used in EOF so we can call legacy code <em>EOF0</em>. Also implementations may use APIs where 0 version number denotes legacy code.</p>
<h3 id="section-structure">
<a href="#section-structure" class="anchor-link"></a> Section structure
</h3>
<p>We have considered different questions for the sections:</p>
<ul>
<li>Streaming headers (i.e. <code class="language-plaintext highlighter-rouge">section_header, section_data, section_header, section_data, ...</code>) are used in some other formats (such as WebAssembly). They are handy for formats which are subject to editing (adding/removing sections). That is not a useful feature for EVM. One minor benefit applicable to our case is that they do not require a specific “header terminator”. On the other hand they seem to play worse with code chunking / merkleization, as it is better to have all section headers in a single chunk.</li>
<li>Whether to have a header terminator or to encode <code class="language-plaintext highlighter-rouge">number_of_sections</code> or <code class="language-plaintext highlighter-rouge">total_size_of_headers</code>. Both raise the question how large of a value these fields should be able to hold. While today there will be only two sections, in case each “EVM function” would become a separate code section, a fixed 8-bit field may not be big enough. A terminator byte seems to avoid these problems.</li>
<li>Whether to encode <code class="language-plaintext highlighter-rouge">section_size</code> as a fixed 16-bit value or some kind of variable length field (e.g. <a href="https://en.wikipedia.org/wiki/LEB128">LEB128</a>). We have opted for fixed size, because it simplifies client implementations, and 16-bit seems enough, because of the currently exposed code size limit of 24576 bytes (see <a href="/EIPS/eip-170">EIP-170</a> and <a href="/EIPS/eip-2677">EIP-2677</a>). Should this be limiting in the future, a new EOF version could change the format. Besides simplifying client implementations, not using LEB128 also greatly simplifies on-chain parsing.</li>
</ul>
<h3 id="data-only-contracts">
<a href="#data-only-contracts" class="anchor-link"></a> Data-only contracts
</h3>
<p>The EOF prevents deploying contracts with arbitrary bytes (data-only contracts: their purpose is to store data not execution). <strong>EOF1 requires</strong> presence of a <strong>code section</strong> therefore the minimal overhead EOF data contract consist of a data section and one code section with single instruction. We recommend to use <code class="language-plaintext highlighter-rouge">INVALID</code> instruction in this case. In total there are 11 additional bytes required.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>EF0001 000001 01&lt;data-size&gt; 00 FE &lt;data&gt;
</code></pre></div></div>
<h3 id="pc-starts-with-0-at-the-code-section">
<a href="#pc-starts-with-0-at-the-code-section" class="anchor-link"></a> PC starts with 0 at the code section
</h3>
<p>The values for <code class="language-plaintext highlighter-rouge">PC</code> and <code class="language-plaintext highlighter-rouge">JUMP</code>/<code class="language-plaintext highlighter-rouge">JUMPI</code> start with 0 and are within the <em>code</em> section. We considered keeping <code class="language-plaintext highlighter-rouge">PC</code>/<code class="language-plaintext highlighter-rouge">JUMP</code>/<code class="language-plaintext highlighter-rouge">JUMPI</code> values to operate on the whole <em>container</em> and be consistent with <code class="language-plaintext highlighter-rouge">CODECOPY</code>/<code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> but in the end decided otherwise. It looks to be much easier to propose EOF extensions that affect jumps and jumpdests when <code class="language-plaintext highlighter-rouge">JUMP</code>/<code class="language-plaintext highlighter-rouge">JUMPI</code> already operates on indexes within <em>code</em> section only. This also feels more natural and easier to implement in EVM: the new EOF EVM should only care about traversing <em>code</em> and accessing other parts of the <em>container</em> only on special occasions (e.g. in <code class="language-plaintext highlighter-rouge">CODECOPY</code> instruction).</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>This is a breaking change given that any code starting with <code class="language-plaintext highlighter-rouge">0xEF</code> was not deployable before (and resulted in exceptional abort if executed), but now some subset of such codes can be deployed and executed successfully.</p>
<p>The choice of <code class="language-plaintext highlighter-rouge">MAGIC</code> guarantees that none of the contracts existing on the chain are affected by the new rules.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<h3 id="eof-validation">
<a href="#eof-validation" class="anchor-link"></a> EOF validation
</h3>
<h4 id="valid-cases">
<a href="#valid-cases" class="anchor-link"></a> Valid cases
</h4>
<ul>
<li>Code section without data section</li>
<li>Code section with data section</li>
</ul>
<h4 id="invalid-cases">
<a href="#invalid-cases" class="anchor-link"></a> Invalid cases
</h4>
<table>
<thead>
<tr>
<th>Bytecode</th>
<th>Validation error</th>
</tr>
</thead>
<tbody>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF</code></td>
<td>Incomplete magic</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EFFF0101000302000400600000AABBCCDD</code></td>
<td>Invalid magic</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF00</code></td>
<td>No version</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000001000302000400600000AABBCCDD</code></td>
<td>Invalid version</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000201000302000400600000AABBCCDD</code></td>
<td>Invalid version</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF00FF01000302000400600000AABBCCDD</code></td>
<td>Invalid version</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF0001</code></td>
<td>No header</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000100</code></td>
<td>No code section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101</code></td>
<td>No code section size</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF00010100</code></td>
<td>Code section size incomplete</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF0001010003</code></td>
<td>No section terminator</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF0001010003600000</code></td>
<td>No section terminator</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000200</code></td>
<td>No code section contents</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF00010100020060</code></td>
<td>Code section contents incomplete</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000300600000DEADBEEF</code></td>
<td>Trailing bytes after code section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000301000300600000600000</code></td>
<td>Multiple code sections</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000000</code></td>
<td>Empty code section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000002000200AABB</code></td>
<td>Empty code section (with non-empty data section)</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000102000401000300AABBCCDD600000</code></td>
<td>Data section preceding code section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000102000400AABBCCDD</code></td>
<td>Data section without code section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000202</code></td>
<td>No data section size</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF00010100020200</code></td>
<td>Data section size incomplete</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF0001010003020004</code></td>
<td>No section terminator</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF0001010003020004600000AABBCCDD</code></td>
<td>No section terminator</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000302000400600000</code></td>
<td>No data section contents</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000302000400600000AABBCC</code></td>
<td>Data section contents incomplete</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000302000400600000AABBCCDDEE</code></td>
<td>Trailing bytes after data section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000302000402000400600000AABBCCDDAABBCCDD</code></td>
<td>Multiple data sections</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000101000102000102000100FEFEAABB</code></td>
<td>Multiple code and data sections</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF000101000302000000600000</code></td>
<td>Empty data section</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">EF0001010002030004006000AABBCCDD</code></td>
<td>Unknown section (id = 3)</td>
</tr>
</tbody>
</table>
<h3 id="contract-creation">
<a href="#contract-creation" class="anchor-link"></a> Contract creation
</h3>
<p>All cases should be checked for creation transaction, <code class="language-plaintext highlighter-rouge">CREATE</code> and <code class="language-plaintext highlighter-rouge">CREATE2</code>.</p>
<ul>
<li>Legacy init code
<ul>
<li>Returns legacy code</li>
<li>Returns valid EOF1 code</li>
<li>Returns invalid EOF1 code</li>
<li>Returns 0xEF not followed by EOF1 code</li>
</ul>
</li>
<li>Valid EOF1 init code
<ul>
<li>Returns legacy code</li>
<li>Returns valid EOF1 code</li>
<li>Returns invalid EOF1 code</li>
<li>Returns 0xEF not followed by EOF1 code</li>
</ul>
</li>
<li>Invalid EOF1 init code</li>
</ul>
<h3 id="contract-execution">
<a href="#contract-execution" class="anchor-link"></a> Contract execution
</h3>
<ul>
<li>Valid EOF code containing <code class="language-plaintext highlighter-rouge">JUMP</code>/<code class="language-plaintext highlighter-rouge">JUMPI</code> - offsets relative to code section start are used</li>
<li><code class="language-plaintext highlighter-rouge">JUMP</code>/<code class="language-plaintext highlighter-rouge">JUMPI</code> to <code class="language-plaintext highlighter-rouge">5B</code> (<code class="language-plaintext highlighter-rouge">JUMPDEST</code>) byte outside of code section - exceptional abort</li>
<li>EOF code containing <code class="language-plaintext highlighter-rouge">PC</code> opcode - offset inside code section is returned</li>
<li>EOF code containing <code class="language-plaintext highlighter-rouge">CODECOPY/CODESIZE</code> - works as in legacy code
<ul>
<li><code class="language-plaintext highlighter-rouge">CODESIZE</code> returns the size of entire container</li>
<li><code class="language-plaintext highlighter-rouge">CODECOPY</code> can copy from code section</li>
<li><code class="language-plaintext highlighter-rouge">CODECOPY</code> can copy from data section</li>
<li><code class="language-plaintext highlighter-rouge">CODECOPY</code> can copy from the EOF header</li>
<li><code class="language-plaintext highlighter-rouge">CODECOPY</code> can copy entire container</li>
</ul>
</li>
<li><code class="language-plaintext highlighter-rouge">EXTCODECOPY/EXTCODESIZE/EXTCODEHASH</code> with the EOF <em>target</em> contract - works as with legacy target contract
<ul>
<li><code class="language-plaintext highlighter-rouge">EXTCODESIZE</code> returns the size of entire target container</li>
<li><code class="language-plaintext highlighter-rouge">EXTCODEHASH</code> returns the hash of entire target container</li>
<li><code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> can copy from target’s code section</li>
<li><code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> can copy from target’s data section</li>
<li><code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> can copy from target’s EOF header</li>
<li><code class="language-plaintext highlighter-rouge">EXTCODECOPY</code> can copy entire target container</li>
<li>Results don’t differ when executed inside legacy or EOF contract</li>
</ul>
</li>
</ul>
<h2 id="reference-implementation">
<a href="#reference-implementation" class="anchor-link"></a> Reference Implementation
</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MAGIC</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xEF\x00</span><span class="s">'</span>
<span class="n">VERSION</span> <span class="o">=</span> <span class="mh">0x01</span>
<span class="n">S_TERMINATOR</span> <span class="o">=</span> <span class="mh">0x00</span>
<span class="n">S_CODE</span> <span class="o">=</span> <span class="mh">0x01</span>
<span class="n">S_DATA</span> <span class="o">=</span> <span class="mh">0x02</span>


<span class="c1"># Determines if code is in EOF format of any version.
</span><span class="k">def</span> <span class="nf">is_eof</span><span class="p">(</span><span class="n">code</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">code</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">MAGIC</span><span class="p">)</span>


<span class="c1"># Validate EOF code.
</span><span class="k">def</span> <span class="nf">validate_eof</span><span class="p">(</span><span class="n">code</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="c1"># Check version
</span>    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">code</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">VERSION</span>

    <span class="c1"># Process section headers
</span>    <span class="n">section_sizes</span> <span class="o">=</span> <span class="p">{</span><span class="n">S_CODE</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">S_DATA</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># Terminator not found
</span>        <span class="k">assert</span> <span class="n">pos</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
        <span class="n">section_id</span> <span class="o">=</span> <span class="n">code</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span>
        <span class="n">pos</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">section_id</span> <span class="o">==</span> <span class="n">S_TERMINATOR</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="c1"># Disallow unknown sections
</span>        <span class="k">assert</span> <span class="n">section_id</span> <span class="ow">in</span> <span class="n">section_sizes</span>

        <span class="c1"># Data section preceding code section
</span>        <span class="k">assert</span> <span class="n">section_id</span> <span class="o">!=</span> <span class="n">S_DATA</span> <span class="ow">or</span> <span class="n">section_sizes</span><span class="p">[</span><span class="n">S_CODE</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span>

        <span class="c1"># Multiple sections with the same id
</span>        <span class="k">assert</span> <span class="n">section_sizes</span><span class="p">[</span><span class="n">section_id</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span>

        <span class="c1"># Truncated section size
</span>        <span class="k">assert</span> <span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
        <span class="n">section_sizes</span><span class="p">[</span><span class="n">section_id</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="n">code</span><span class="p">[</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
        <span class="n">pos</span> <span class="o">+=</span> <span class="mi">2</span>

        <span class="c1"># Empty section
</span>        <span class="k">assert</span> <span class="n">section_sizes</span><span class="p">[</span><span class="n">section_id</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span>

    <span class="c1"># Code section cannot be absent
</span>    <span class="k">assert</span> <span class="n">section_sizes</span><span class="p">[</span><span class="n">S_CODE</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span>

    <span class="c1"># The entire container must be scanned
</span>    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="n">section_sizes</span><span class="p">[</span><span class="n">S_CODE</span><span class="p">]</span> <span class="o">+</span> <span class="n">section_sizes</span><span class="p">[</span><span class="n">S_DATA</span><span class="p">])</span>
</code></pre></div></div>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>Proposed validation rules can be checked at constant time, therefore it should not be easily attackable. This is subject to change with future extensions.</p>
<p>Currently <em>initcode</em> validation has no extra cost and the currently charged creation costs should be sufficient, however we consider adding an additional gas cost for contract creation.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/axic">Alex Beregszaszi</a>, <a href="https://github.com/chfast">Paweł Bylica</a>, <a href="https://github.com/gumb0">Andrei Maiboroda</a>, "EIP-3540: EVM Object Format (EOF) v1 [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 3540, March 2021. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-3540.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-3540: EVM Object Format (EOF) v1 [DRAFT]",
    "author": "Alex Beregszaszi (@axic), Paweł Bylica (@chfast), Andrei Maiboroda (@gumb0)",
    "name": "EIP-3540: EVM Object Format (EOF) v1 [DRAFT]",
    "dateCreated": "2021-03-16",
    "datePublished": "2021-03-16",

    "discussionUrl": "https://ethereum-magicians.org/t/evm-object-format-eof/5727",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2021"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
