<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-2718: Typed Transaction Envelope</title>
<meta property="og:title" content="EIP-2718: Typed Transaction Envelope" />
<meta name="description" content="Defines a new transaction type that is an envelope for future transaction types." />
<meta property="og:description" content="Defines a new transaction type that is an envelope for future transaction types." />
<meta name="twitter:description" content="Defines a new transaction type that is an envelope for future transaction types." />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-2718" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-2718" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-2718: Typed Transaction Envelope
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Defines a new transaction type that is an envelope for future transaction types.</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/MicahZoltu">Micah Zoltu</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-2718-typed-transaction-envelope/4355">https://ethereum-magicians.org/t/eip-2718-typed-transaction-envelope/4355</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2020-06-13</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#definitions">Definitions</a></li>
<li><a href="#transactions">Transactions</a></li>
<li><a href="#receipts">Receipts</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#transactiontype-only-goes-up-to-0x7f">TransactionType only goes up to 0x7f</a></li>
<li><a href="#should-instead-of-must-for-the-transactiontype-being-first-byte-of-signed-data">SHOULD instead of MUST for the TransactionType being first byte of signed data</a></li>
<li><a href="#transactiontype-selection-algorithm">TransactionType selection algorithm</a></li>
<li><a href="#opaque-byte-array-rather-than-an-rlp-array">Opaque byte array rather than an RLP array</a></li>
<li><a href="#origin-and-caller">ORIGIN and CALLER</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p><code class="language-plaintext highlighter-rouge">TransactionType || TransactionPayload</code> is a valid transaction and <code class="language-plaintext highlighter-rouge">TransactionType || ReceiptPayload</code> is a valid transaction receipt where <code class="language-plaintext highlighter-rouge">TransactionType</code> identifies the format of the transaction and <code class="language-plaintext highlighter-rouge">*Payload</code> is the transaction/receipt contents, which are defined in future EIPs.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>In the past, when we have wanted to add new transaction types we have had to ensure they were backward compatible with all other transactions, meaning that you could differentiate them based only on the encoded payload, and it was not possible to have a transaction that matched both types.
This was seen in <a href="/EIPS/eip-155">EIP-155</a> where the new value was bit-packed into one of the encoded fields.
There are multiple proposals in discussion that define new transaction types such as one that allows EOA accounts to execute code directly within their context, one that enables someone besides <code class="language-plaintext highlighter-rouge">msg.sender</code> to pay for gas, and proposals related to layer 1 multi-sig transactions.
These all need to be defined in a way that is mutually compatible, which quickly becomes burdensome to EIP authors and to clients who now have to follow complex rules for differentiating transaction type.</p>
<p>By introducing an envelope transaction type, we only need to ensure backward compatibility with existing transactions and from then on we just need to solve the much simpler problem of ensuring there is no numbering conflict between <code class="language-plaintext highlighter-rouge">TransactionType</code>s.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="definitions">
<a href="#definitions" class="anchor-link"></a> Definitions
</h3>
<ul>
<li><code class="language-plaintext highlighter-rouge">||</code> is the byte/byte-array concatenation operator.</li>
</ul>
<h3 id="transactions">
<a href="#transactions" class="anchor-link"></a> Transactions
</h3>
<p>As of <code class="language-plaintext highlighter-rouge">FORK_BLOCK_NUMBER</code>, the transaction root in the block header <strong>MUST</strong> be the root hash of <code class="language-plaintext highlighter-rouge">patriciaTrie(rlp(Index) =&gt; Transaction)</code> where:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">Index</code> is the index in the block of this transaction</li>
<li><code class="language-plaintext highlighter-rouge">Transaction</code> is either <code class="language-plaintext highlighter-rouge">TransactionType || TransactionPayload</code> or <code class="language-plaintext highlighter-rouge">LegacyTransaction</code></li>
<li><code class="language-plaintext highlighter-rouge">TransactionType</code> is a positive unsigned 8-bit number between <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">0x7f</code> that represents the type of the transcation</li>
<li><code class="language-plaintext highlighter-rouge">TransactionPayload</code> is an opaque byte array whose interpretation is dependent on the <code class="language-plaintext highlighter-rouge">TransactionType</code> and defined in future EIPs</li>
<li><code class="language-plaintext highlighter-rouge">LegacyTransaction</code> is <code class="language-plaintext highlighter-rouge">rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])</code></li>
</ul>
<p>All signatures for future transaction types <strong>SHOULD</strong> include the <code class="language-plaintext highlighter-rouge">TransactionType</code> as the first byte of the signed data.
This makes it so we do not have to worry about signatures for one transaction type being used as signatures for a different transaction type.</p>
<h3 id="receipts">
<a href="#receipts" class="anchor-link"></a> Receipts
</h3>
<p>As of <code class="language-plaintext highlighter-rouge">FORK_BLOCK_NUMBER</code>, the receipt root in the block header <strong>MUST</strong> be the root hash of <code class="language-plaintext highlighter-rouge">patriciaTrie(rlp(Index) =&gt; Receipt)</code> where:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">Index</code> is the index in the block of the transaction this receipt is for</li>
<li><code class="language-plaintext highlighter-rouge">Receipt</code> is either <code class="language-plaintext highlighter-rouge">TransactionType || ReceiptPayload</code> or <code class="language-plaintext highlighter-rouge">LegacyReceipt</code></li>
<li><code class="language-plaintext highlighter-rouge">TransactionType</code> is a positive unsigned 8-bit number between <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">0x7f</code> that represents the type of the transcation</li>
<li><code class="language-plaintext highlighter-rouge">ReceiptPayload</code> is an opaque byte array whose interpretation is dependent on the <code class="language-plaintext highlighter-rouge">TransactionType</code> and defined in future EIPs</li>
<li><code class="language-plaintext highlighter-rouge">LegacyReceipt</code> is <code class="language-plaintext highlighter-rouge">rlp([status, cumulativeGasUsed, logsBloom, logs])</code></li>
</ul>
<p>The <code class="language-plaintext highlighter-rouge">TransactionType</code> of the receipt <strong>MUST</strong> match the <code class="language-plaintext highlighter-rouge">TransactionType</code> of the transaction with a matching <code class="language-plaintext highlighter-rouge">Index</code>.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<h3 id="transactiontype-only-goes-up-to-0x7f">
<a href="#transactiontype-only-goes-up-to-0x7f" class="anchor-link"></a> TransactionType only goes up to 0x7f
</h3>
<p>For the forseable future, 0x7f is plenty and it leaves open a number of options for extending the range such as using the high bit as a continuation bit.
This also prevents us from colliding with legacy transaction types, which always start with a byte <code class="language-plaintext highlighter-rouge">&gt;= 0xc0</code>.</p>
<h3 id="should-instead-of-must-for-the-transactiontype-being-first-byte-of-signed-data">
<a href="#should-instead-of-must-for-the-transactiontype-being-first-byte-of-signed-data" class="anchor-link"></a> <strong>SHOULD</strong> instead of <strong>MUST</strong> for the TransactionType being first byte of signed data
</h3>
<p>While it is strongly recommended that all future transactions sign the first byte to ensure that there is no problem with signature reuse, the authors acknowledge that this may not always make sense or be possible.
One example where this isn’t possible is wrapped legacy transactions that are signature compatible with the legacy signing scheme.
Another potential situation is one where transactions don’t have a signature in the traditional sense and instead have some other mechanism for determining validity.</p>
<h3 id="transactiontype-selection-algorithm">
<a href="#transactiontype-selection-algorithm" class="anchor-link"></a> TransactionType selection algorithm
</h3>
<p>There was discussion about defining the <code class="language-plaintext highlighter-rouge">TransactionType</code> identifier assignment/selection algorithm in this standard.
While it would be nice to have a standardized mechanism for assignment, at the time of writing of this standard there is not a strong need for it so it was deemed out of scope.
A future EIP may introduce a standard for TransactionType identifier assignment if it is deemed necessary.</p>
<h3 id="opaque-byte-array-rather-than-an-rlp-array">
<a href="#opaque-byte-array-rather-than-an-rlp-array" class="anchor-link"></a> Opaque byte array rather than an RLP array
</h3>
<p>By having the second byte on be opaque bytes, rather than an RLP (or other encoding) list, we can support different encoding formats for the transaction payload in the future such as SSZ, LEB128, or a fixed width format.</p>
<h3 id="origin-and-caller">
<a href="#origin-and-caller" class="anchor-link"></a> ORIGIN and CALLER
</h3>
<p>There was discussion about having ORIGIN and CALLER opcodes become dependent on the transaction type, so that each transaction type could define what those opcodes returned.
However, there is a desire to make transaction type opaque to the contracts to discourage contracts treating different types of transactions differently.
There also were concerns over backward compatibility with existing contracts which make assumptions about ORIGIN and CALLER opcodes.
Going forward, we will assume that all transaction types will have an address that reasonably represents a <code class="language-plaintext highlighter-rouge">CALLER</code> of the first EVM frame and <code class="language-plaintext highlighter-rouge">ORIGIN</code> will be the same address in all cases.
If a transaction type needs to supply additional information to contracts, they will need a new opcode.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>Clients can differentiate between the legacy transactions and typed transactions by looking at the first byte.
If it starts with a value in the range <code class="language-plaintext highlighter-rouge">[0, 0x7f]</code> then it is a new transaction type, if it starts with a value in the range <code class="language-plaintext highlighter-rouge">[0xc0, 0xfe]</code> then it is a legacy transaction type.
<code class="language-plaintext highlighter-rouge">0xff</code> is not realistic for an RLP encoded transaction, so it is reserved for future use as an extension sentinel value.</p>
 <h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>When designing a new 2718 transaction type, it is <strong>STRONGLY</strong> recommended to include the transaction type as the first byte of the signed payload. If you fail to do this, it is possible that your transaction may be signature compatible with transactions of another type which can introduce security vulnerabilities for users.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/MicahZoltu">Micah Zoltu</a>, "EIP-2718: Typed Transaction Envelope," <em>Ethereum Improvement Proposals</em>, no. 2718, June 2020. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-2718.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-2718: Typed Transaction Envelope",
    "author": "Micah Zoltu (@MicahZoltu)",
    "name": "EIP-2718: Typed Transaction Envelope",
    "dateCreated": "2020-06-13",
    "datePublished": "2020-06-13",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-2718-typed-transaction-envelope/4355",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2020"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
