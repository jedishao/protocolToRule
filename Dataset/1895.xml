<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-1895: Support for an Elliptic Curve Cycle</title>
<meta property="og:title" content="EIP-1895: Support for an Elliptic Curve Cycle" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-1895" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-1895" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
ðŸš§ This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-1895: Support for an Elliptic Curve Cycle
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1895.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="/cdn-cgi/l/email-protection#d1b0bdb4a9b0bfb5a3b4b3b4bdbdb8bfb6e991b6bcb0b8bdffb2bebc">Alexandre Belling</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethresear.ch/t/reducing-the-verification-cost-of-a-snark-through-hierarchical-aggregation/5128">https://ethresear.ch/t/reducing-the-verification-cost-of-a-snark-through-hierarchical-aggregation/5128</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2018-03-31</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#the-curve">The curve</a></li>
<li><a href="#mnt4-definition">MNT4 definition</a></li>
<li><a href="#the-operations-and-gas-cost">The operations and gas cost</a></li>
<li><a href="#encoding">Encoding</a></li>
<li><a href="#edge-cases">Edge cases</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#references">References</a></li>
<li><a href="#implementation">Implementation</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>The EVM currently supports elliptic curves operations for curve <em>alt-bn128</em> thanks to precompiles <code class="language-plaintext highlighter-rouge">ecadd</code> and <code class="language-plaintext highlighter-rouge">ecmul</code> and <code class="language-plaintext highlighter-rouge">ecpairing</code>. The classes MNT4 and 6 contain cycles of curves. Those cycles enable doing operations on one curve inside a SNARK on the other curve (and reversely). This EIP suggests adding support for those curves.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>Adds supports for the following operations through precompiles:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">ecadd</code> on MNT4</li>
<li><code class="language-plaintext highlighter-rouge">ecmul</code> on MNT4</li>
<li><code class="language-plaintext highlighter-rouge">ecpairing</code> on MNT4</li>
</ul>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Elliptic curve is the basic block of recursive SNARKs (ie: verifying a SNARK inside a SNARK) and this addresses the issue of scalable zero-knowledge. More generally this addresses partly the scalability issue as SNARKs verification are constant time in the size of the circuit being verified.</p>
<p>More concretely, today if the EVM has to deal with 1000s of SNARK verification it would take around 1.5 billion gas and would be impractical for Ethereum. Recursive SNARKs for instance make it possible to aggregate multiple proofs into a single one that can be verified like any other SNARK. It results in a massive cost reduction for the verification.</p>
<p>However, this is impossible using <em>alt-bn128</em> and in my knowledge, the only family of pairing-friendly curves known to produce cycles are MNT4 and MNT6. A complete characterization of the cycles existing between those two families is proposed in <a href="https://arxiv.org/pdf/1803.02067.pdf">On cycles of pairing-friendly elliptic curves
</a></p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="the-curve">
<a href="#the-curve" class="anchor-link"></a> The curve
</h3>
<p>The proposed cycle has been introduced in <a href="https://eprint.iacr.org/2014/595.pdf">Scalable Zero Knowledge via Cycles of Elliptic Curves</a>.</p>
<h3 id="mnt4-definition">
<a href="#mnt4-definition" class="anchor-link"></a> MNT4 definition
</h3>
<p>The groups <code class="language-plaintext highlighter-rouge">G_1</code> and <code class="language-plaintext highlighter-rouge">G_2</code> are cyclic groups of prime order :</p>
<pre><code class="language-.">q = 475922286169261325753349249653048451545124878552823515553267735739164647307408490559963137
</code></pre>
<p><code class="language-plaintext highlighter-rouge">G_1</code> is defined over the field <code class="language-plaintext highlighter-rouge">F_p</code> of prime order :</p>
<pre><code class="language-.">p = 475922286169261325753349249653048451545124879242694725395555128576210262817955800483758081
</code></pre>
<p>with generator P:</p>
<pre><code class="language-.">P = (
    60760244141852568949126569781626075788424196370144486719385562369396875346601926534016838,
    363732850702582978263902770815145784459747722357071843971107674179038674942891694705904306
)
</code></pre>
<p>Both p and q can be written in 298 bits.</p>
<p>The group G_1 is defined on the curve defined by the equation <code class="language-plaintext highlighter-rouge">YÂ² = XÂ³ + aX + b</code> where:</p>
<pre><code class="language-.">    a = 2
    b = 423894536526684178289416011533888240029318103673896002803341544124054745019340795360841685
</code></pre>
<p>The twisted group G_2 is defined over the field <code class="language-plaintext highlighter-rouge">F_p^2 = F_p / &lt;&lt;To be completed&gt;&gt;</code></p>
<p>The twisted group G_2 is defined on the curve defined by the equation <code class="language-plaintext highlighter-rouge">YÂ² = XÂ² + aX + b</code> where :</p>
<pre><code class="language-.">    a = 34 + i * 0
    b = 0 + i * 67372828414711144619833451280373307321534573815811166723479321465776723059456513877937430
</code></pre>
<p>G_2 generator is generated by :</p>
<pre><code class="language-.">    P2 = (
        438374926219350099854919100077809681842783509163790991847867546339851681564223481322252708 +
        i * 37620953615500480110935514360923278605464476459712393277679280819942849043649216370485641,
        37437409008528968268352521034936931842973546441370663118543015118291998305624025037512482 +
        i * 424621479598893882672393190337420680597584695892317197646113820787463109735345923009077489
    )
</code></pre>
<h3 id="the-operations-and-gas-cost">
<a href="#the-operations-and-gas-cost" class="anchor-link"></a> The operations and gas cost
</h3>
<p>The following operations and their gas cost would be implemented</p>
<pre><code class="language-.">MNT_X_ADD = &lt;&lt;To be estimated&gt;&gt;
MNT_X_MUL = &lt;&lt;To be estimated&gt;&gt;
MNT_X_PAIRING = &lt;&lt;To be estimated&gt;&gt;
</code></pre>
<p>Where <code class="language-plaintext highlighter-rouge">X</code> is either 4.</p>
<h3 id="encoding">
<a href="#encoding" class="anchor-link"></a> Encoding
</h3>
<p>The curves points P(X, Y) over F_p are represented in their compressed form C(X, Y):</p>
<pre><code class="language-.">    C = X | s
</code></pre>
<p>where <code class="language-plaintext highlighter-rouge">s</code> represents <code class="language-plaintext highlighter-rouge">Y</code> as follow:</p>
<pre><code class="language-.">    |  `s'`  | `Y`                      |
    |--------|--------------------------|
    | `0x00` | Point at infinity        |
    | `0x02` | Solution with `y` even   |
    | `0x03` | Solution with `y` odd    |
</code></pre>
<p>Compression operation from affine coordinate is trivial:</p>
<pre><code class="language-.">    s = 0x02 | (s &amp; 0x01)
</code></pre>
<p>In the EVM the compressed form allows us to represents curve points with 2 uint256 instead of 3.</p>
<h3 id="edge-cases">
<a href="#edge-cases" class="anchor-link"></a> Edge cases
</h3>
<ul>
<li>Several acceptable representations for the point at infinity</li>
</ul>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>The curve has 80 bits of security (whereas MNT6 has 120 bits) which might not be considered enough for critical security level, (for instance transferring several billions), but enough for others. If it turns out this is not enough security for adoption, there is another option : another cycle is being used by Coda but is defined over a 753 bits sized field which might also be prohibitively low (no reference to this curve from Codaâ€™s publications found).</p>
<p>Independently of the cycle chosen, the groups and field elements are represented with integers larger than 256 bits (even for the 80 bits of security), therefore it might be necessary to also add support for larger field size operations.</p>
<p>We currently donâ€™t know more efficient pairing-friendly cycles and donâ€™t know if there are. It might be possible to circumvent this problem though by relaxing the constraint that all the curves of the cycle must be pairing friendly). If we had a cycle with only one pairing friendly curve we would still be able to compose proofs by alternating between SNARKs and any other general purpose zero-knowledge cryptosystems.</p>
<p>Assuming we find a convenient cycle, we donâ€™t need to implement support for all the curves it contains, only one. The best choice would be the fastest one as the overall security of the recursive snark do not depends on which curve the verification is made.</p>
<p>Proper benchmarks will be done in order to make this choice and to price the operations in gas.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<h2 id="references">
<a href="#references" class="anchor-link"></a> References
</h2>
<ul>
<li><em>Eli-Ben-Sasson, Alessandro Chiesa, Eran Tromer, Madars Virza, [BCTV14], April 28, 2015, Scalable Zero Knowledge via Cycles of Elliptic Curves : https://eprint.iacr.org/2014/595.pdf</em></li>
<li><em>Alessandro Chiesa, Lynn Chua, Matthew Weidner, [CCW18], November 5, 2018, On cycles of pairing-friendly elliptic curves : https://arxiv.org/pdf/1803.02067.pdf</em></li>
</ul>
<h2 id="implementation">
<a href="#implementation" class="anchor-link"></a> Implementation
</h2>
<ul>
<li><a href="https://github.com/AlexandreBelling/go-boojum">go-boojum</a> : A PoC demo of an application of recursive SNARKs</li>
<li><a href="https://github.com/scipr-lab/libff">libff</a> : a C++ library for finite fields and elliptic curves</li>
<li><a href="https://github.com/CodaProtocol/coda">coda</a> : a new cryptocurrency protocol with a lightweight, constant sized blockchain.</li>
</ul>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="/cdn-cgi/l/email-protection#ec8d8089948d82889e898e89808085828bd4ac8b818d8580c28f8381">Alexandre Belling</a>, "EIP-1895: Support for an Elliptic Curve Cycle [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 1895, March 2018. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1895.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-1895: Support for an Elliptic Curve Cycle [DRAFT]",
    "author": "Alexandre Belling <alexandrebelling8@gmail.com>",
    "name": "EIP-1895: Support for an Elliptic Curve Cycle [DRAFT]",
    "dateCreated": "2018-03-31",
    "datePublished": "2018-03-31",

    "discussionUrl": "https://ethresear.ch/t/reducing-the-verification-cost-of-a-snark-through-hierarchical-aggregation/5128",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2018"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
