<em>Note</em> Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
<em>Note</em> Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
Changes to an address MUST trigger the following event:
The token contract MUST emit an AuthorizedOperator event with the correct values
The token contract MUST emit a RevokedOperator event with the correct values
The token contract MUST emit a Sent event with the correct values as defined in the <a href="#sent">Sent Event.
the same data and operatorData MUST be used to call both hooks and emit the Sent event.
The token contract MUST emit a Minted event with the correct values as defined in the <a href="#minted">Minted Event.
the same data and operatorData MUST be used to call the tokensReceived hook and emit the Minted event.
The token contract MUST emit a Burned event with the correct values as defined in the <a href="#burned">Burned Event.
the same operatorData MUST be used to call the tokensToSend hook and emit the Burned event.
and MUST emit a Transfer event for sending (as specified in the <a href="/EIPS/eip-20">ERC-20 standard).
This function transfers an amount of tokens from a user address to an ERC721 token. This function MUST ensure that the recipient contract implements ERC721 using the ERC165 supportsInterface function. This function SHOULD ensure that the recipient token actually exists, by calling ownerOf on the recipient token’s contract, and ensuring it neither throws nor returns the zero address. This function MUST emit the TransferToParent event upon a successful transfer (in addition to the standard ERC20 Transfer event!). This function MUST throw if the _from account balance does not have enough tokens to spend.
This function transfers an amount of tokens from an ERC721 token to an address. This function MUST emit the TransferFromParent event upon a successful transfer (in addition to the standard ERC20 Transfer event!). This function MUST throw if the balance of the sender ERC721 token is less than the _amount specified. This function MUST verify that the msg.sender owns the sender ERC721 token, and MUST throw otherwise.
For backwards-compatibility, implementations MUST emit the standard ERC20 Transfer event when a transfer occurs, regardless of whether the sender and recipient are addresses or ERC721 tokens. In the case that either sender or recipient are tokens, the corresponding parameter in the Transfer event SHOULD be the contract address of the token.
Reports the lostAccount address as being lost. MUST trigger the AccountClaimedLost event.
Reports the msg.sender’s account as being not being lost. MUST trigger the AccountClaimedLostCanceled event.
Reports the current address as being stolen. MUST trigger the AccountFrozen event.
MUST emit the TransferSingle event to reflect the balance change (see "Safe Transfer Rules" section of the standard).
MUST emit the ApprovalForAll event on success.
MUST emit the TransferSingle event to reflect the balance change (see “TransferSingle and TransferBatch event rules” section).
<em>Changes</em> to the URI MUST emit the URI event if the change can be expressed with an event (i.e. it isn’t dynamic/programmatic).
Successful completion of this method MUST emit an Approval event (defined below) unless the caller is attempting to clear approval when there is no pending approval. In particular, an Approval event MUST be fired if the _to address is zero and there is some outstanding approval. Additionally, an Approval event MUST be fired if _to is already the currently approved address and this call otherwise has no effect. (i.e. An approve() call that “reaffirms” an existing approval MUST fire an event.)
Assigns the ownership of quantity MCFT’s with ID _classId to _to if and only if quantity == balanceOf(msg.sender, _classId). A successful transfer MUST fire the Transfer event (defined below).
A conforming contract MUST allow the current owner to “transfer” a token to themselves, as a way of affirming ownership in the event stream. (i.e. it is valid for _to == msg.sender if balanceOf(msg.sender, _classId) &gt;= balance.) This “no-op transfer” MUST be considered a successful transfer, and therefore MUST fire a Transfer event (with the same address for _from and _to).
Additionally, the creation of new MCFTs MUST trigger a Transfer event for each newly created MCFTs, with a _from address of 0 and a _to address matching the owner of the new MCFT (possibly the smart contract itself). The deletion (or burn) of any MCFT MUST trigger a Transfer event with a _to address of 0 and a _from address of the owner of the MCFT (now former owner!).
When emitting the ConsecutiveTransfer event the Transfer event MUST NOT be emitted
Contracts that implement the ConsecutiveTransfer event MAY still use the original Transfer event, however when emitting the ConsecutiveTransfer event the Transfer event MUST NOT be emitted.
In ALL cases any function or code that adds or replaces or removes one or more functions MUST emit the standard DiamondCut event specified below.
Any time one or more functions are added, replaced or removed the DiamondCut event MUST be emitted to record changes.
Transfer event with the _from 0x0 MUST not create this event(use event Issued instead).
MUST emit the ApprovalForNFT event to reflect approval or not approval
MUST emit the Tip event to reflect the amounts that msg.sender tipped
MUST emit the Deposit event that shows the user, deposited token details
MUST emit the WithdrawReward event to show the holder who withdrew, the reward
For all addresses spender, uint256s tokenId, deadline, and nonce, and bytes sig, a call to permit(spender, tokenId, deadline, sig) MUST set spender as approved on tokenId as long as the owner of tokenId remains in possession of it, and MUST emit a corresponding Approval event, if and only if the following conditions are met:
The interface for ERC-4521 transfer() MUST conform to ERC-20 and resulting transfers MUST fire the Transfer event as described in ERC-721.
Upgrades the amount of source token to the destination token in the specified ratio. The destination tokens will be sent to the _to address. The function MUST lock the source tokens in the upgrade contract or burn them. If the downgrade Optional Ext. is implemented, the source tokens MUST be locked instead of burning. The function MUST throw if the caller’s address does not have enough source token to upgrade or if isUpgradeActive is returning false. The function MUST also fire the Upgrade event. approve MUST be called first on the source contract.
Downgrades the amount of destination token to the source token in the specified ratio. The source tokens will be sent to the _to address. The function MUST unwrap the destination tokens back to the source tokens. The function MUST throw if the caller’s address does not have enough destination token to downgrade or if isDowngradeActive is returning false. The function MUST also fire the Downgrade event. approve MUST be called first on the destination contract.