<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-5000: MULDIV instruction</title>
<meta property="og:title" content="EIP-5000: MULDIV instruction" />
<meta name="description" content="Introduce a new instruction to perform x * y / z in 512-bit precision" />
<meta property="og:description" content="Introduce a new instruction to perform x * y / z in 512-bit precision" />
<meta name="twitter:description" content="Introduce a new instruction to perform x * y / z in 512-bit precision" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-5000" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-5000" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="draft">
⚠️ This EIP is not recommended for general use or implementation as it is likely to change.
</div>
<div class="home">
<h1 class="page-heading">
EIP-5000: MULDIV instruction
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5000.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Introduce a new instruction to perform x * y / z in 512-bit precision</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/hrkrshnn">Harikrishnan Mulackal</a>, <a href="https://github.com/axic">Alex Beregszaszi</a>, <a href="https://github.com/chfast">Paweł Bylica</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/muldiv-instruction/9930">https://ethereum-magicians.org/t/muldiv-instruction/9930</a></td></tr>
<tr><th>Status</th><td>Draft
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2022-03-14</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a></li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#the-special-0-case">The special 0 case</a></li>
<li><a href="#argument-ordering">Argument ordering</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>Introduce a new instruction, <code class="language-plaintext highlighter-rouge">MULDIV(x, y, z)</code>, to perform <code class="language-plaintext highlighter-rouge">((x * y) / z) % 2**256</code> in 512-bit precision. <code class="language-plaintext highlighter-rouge">z = 0</code> is a special case for <code class="language-plaintext highlighter-rouge">(x * y) % 2**256</code>.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Fixed point operations in high level languages are very commonly used on Ethereum, especially in the domain of financial applications.</p>
<p>While fixed point addition and subtraction can be done with merely <code class="language-plaintext highlighter-rouge">add</code> and <code class="language-plaintext highlighter-rouge">sub</code> respectively, being able to efficiently do fixedpoint multiplication and division is a very sought after feature. A commonly used workaround relies on a <code class="language-plaintext highlighter-rouge">mulmod</code>-based, rather complex implementation (taking around 50 instructions, excluding stack manipulation). This instruction reduces that to a single opcode.</p>
<p>A secondary use case is likely in cryptographic applications, where the <code class="language-plaintext highlighter-rouge">muldiv</code> instruction allows full precision 256x256-&gt;512 multiplication. <code class="language-plaintext highlighter-rouge">mul(x y)</code> (or <code class="language-plaintext highlighter-rouge">muldiv(x, y, 1)</code>) computes the lower order 256 bits and <code class="language-plaintext highlighter-rouge">muldiv(x, y, 0)</code> computes the higher order 256 bits.</p>
<p>Finally we aimed to provide an instruction which can be efficiently used both in <em>checked</em> and <em>unchecked arithmetic</em> use cases. By <em>checked</em> we mean to abort on conditions including division-by-zero and wrapping behaviour.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>A new instruction is introduced: <code class="language-plaintext highlighter-rouge">MULDIV</code> (<code class="language-plaintext highlighter-rouge">0x1e</code>).</p>
<ul>
<li>Pops 3 values from the stack, first <code class="language-plaintext highlighter-rouge">x</code>, then <code class="language-plaintext highlighter-rouge">y</code> and <code class="language-plaintext highlighter-rouge">z</code>.</li>
<li>If <code class="language-plaintext highlighter-rouge">z == 0</code>, <code class="language-plaintext highlighter-rouge">r = (uint512(x) * y) / 2**256</code>.</li>
<li>Otherwise <code class="language-plaintext highlighter-rouge">r = (uint512(x) * y / z) % 2**256</code>, where the intermediate calculation is performed with 512-bit precision.</li>
<li>Pushes <code class="language-plaintext highlighter-rouge">r</code> on the stack.</li>
</ul>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># operations `*` and `//` are done in 512 bit precision
</span><span class="k">def</span> <span class="nf">muldiv</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">z</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">//</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">256</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">((</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">//</span> <span class="n">z</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">256</span><span class="p">)</span>
</code></pre></div></div>
<p>The cost of the instruction is 8 gas (aka <code class="language-plaintext highlighter-rouge">mid</code>), the same as for <code class="language-plaintext highlighter-rouge">addmod</code> and <code class="language-plaintext highlighter-rouge">mulmod</code>.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<h3 id="the-special-0-case">
<a href="#the-special-0-case" class="anchor-link"></a> The special 0 case
</h3>
<p>All the arithmetic instructions in EVM handle division or modulo 0 specially: the instructions return 0. We have decided to break consistency in order to provide a flexible opcode, which can be used to detect wrapping behaviour.</p>
<p>Alternate options include:</p>
<ul>
<li>Returning a flag for wrapping</li>
<li>Returning two stack items, higher and lower order bits</li>
<li>Compute the higher order 256 bits in EVM:
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// Returns `hi` such that `x × y = hi × 2**256 + mul(x, y)`
</span><span class="k">function</span> <span class="n">hob</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">,</span> <span class="kt">uint</span> <span class="n">y</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span> <span class="n">hi</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">uint</span> <span class="n">uint_max</span> <span class="o">=</span> <span class="k">type</span><span class="p">(</span><span class="kt">uint</span><span class="p">).</span><span class="n">max</span><span class="p">;</span>
  <span class="k">assembly</span> <span class="p">{</span>
      <span class="kr">let</span> <span class="n">lo</span> <span class="o">:=</span> <span class="n">mul</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
      <span class="kr">let</span> <span class="n">mm</span> <span class="o">:=</span> <span class="nb">mulmod</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">uint_max</span><span class="p">)</span>
      <span class="n">hi</span> <span class="o">:=</span> <span class="n">sub</span><span class="p">(</span><span class="n">sub</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">lo</span><span class="p">),</span> <span class="n">lt</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">lo</span><span class="p">))</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div>
</li>
</ul>
<p>While this feature is clever and useful, callers must be aware that unlike other EVM instructions, passing 0 will have a vastly different behaviour.</p>
<h3 id="argument-ordering">
<a href="#argument-ordering" class="anchor-link"></a> Argument ordering
</h3>
<p>The order of arguments matches <code class="language-plaintext highlighter-rouge">addmod</code> and <code class="language-plaintext highlighter-rouge">mulmod</code>.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>This is a new instruction not present pior.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUSH 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PUSH 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PUSH 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
MULDIV
---
0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUSH 0x0000000000000000000000000000000000000000000000000000000000000000
PUSH 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PUSH 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
MULDIV
---
0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUSH 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000
PUSH 0x000000000000000000000000000000000000000000000000016345785d8a0000
PUSH 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000
MULDIV
---
0x00000000000000000000000000000000000000000000152d02c7e14af6800000
</code></pre></div></div>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>TBA</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/hrkrshnn">Harikrishnan Mulackal</a>, <a href="https://github.com/axic">Alex Beregszaszi</a>, <a href="https://github.com/chfast">Paweł Bylica</a>, "EIP-5000: MULDIV instruction [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 5000, March 2022. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-5000.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-5000: MULDIV instruction [DRAFT]",
    "author": "Harikrishnan Mulackal (@hrkrshnn), Alex Beregszaszi (@axic), Paweł Bylica (@chfast)",
    "name": "EIP-5000: MULDIV instruction [DRAFT]",
    "dateCreated": "2022-03-14",
    "datePublished": "2022-03-14",

    "discussionUrl": "https://ethereum-magicians.org/t/muldiv-instruction/9930",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2022"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
