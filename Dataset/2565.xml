<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-2565: ModExp Gas Cost</title>
<meta property="og:title" content="EIP-2565: ModExp Gas Cost" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-2565" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-2565" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-2565: ModExp Gas Cost
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2565.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/ineffectualproperty">Kelly Olson</a>, <a href="https://github.com/sean-sn">Sean Gulley</a>, <a href="https://github.com/simonatsn">Simon Peffers</a>, <a href="https://github.com/justindrake">Justin Drake</a>, <a href="https://github.com/dankrad">Dankrad Feist</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/big-integer-modular-exponentiation-eip-198-gas-cost/4150">https://ethereum-magicians.org/t/big-integer-modular-exponentiation-eip-198-gas-cost/4150</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2020-03-20</td></tr>
<tr><th>Requires</th><td>
<a href="eip-198">198</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a></li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#1-modify-computational-complexity-formula-to-better-reflect-the-computational-complexity">1. Modify ‘computational complexity’ formula to better reflect the computational complexity</a></li>
<li><a href="#2-change-the-value-of-gquaddivisor">2. Change the value of GQUADDIVISOR</a></li>
<li><a href="#3-set-a-minimum-gas-cost-to-prevent-abuse">3. Set a minimum gas cost to prevent abuse</a></li>
</ul>
</li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#implementations">Implementations</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#references">References</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>Defines the gas cost of the <code class="language-plaintext highlighter-rouge">ModExp</code> (<code class="language-plaintext highlighter-rouge">0x00..05</code>) precompile.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>To accurately reflect the real world operational cost of the <code class="language-plaintext highlighter-rouge">ModExp</code> precompile, this EIP specifies an algorithm for calculating the gas cost. This algorithm approximates the multiplication complexity cost and multiplies that by an approximation of the iterations required to execute the exponentiation.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Modular exponentiation is a foundational arithmetic operation for many cryptographic functions including signatures, VDFs, SNARKs, accumulators, and more. Unfortunately, the ModExp precompile is currently over-priced, making these operations inefficient and expensive. By reducing the cost of this precompile, these cryptographic functions become more practical, enabling improved security, stronger randomness (VDFs), and more.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>As of <code class="language-plaintext highlighter-rouge">FORK_BLOCK_NUMBER</code>, the gas cost of calling the precompile at address <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000005</code> will be calculated as follows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def calculate_multiplication_complexity(base_length, modulus_length):
    max_length = max(base_length, modulus_length)
    words = math.ceil(max_length / 8)
    return words**2

def calculate_iteration_count(exponent_length, exponent):
    iteration_count = 0
    if exponent_length &lt;= 32 and exponent == 0: iteration_count = 0
    elif exponent_length &lt;= 32: iteration_count = exponent.bit_length() - 1
    elif exponent_length &gt; 32: iteration_count = (8 * (exponent_length - 32)) + ((exponent &amp; (2**256 - 1)).bit_length() - 1)
    return max(iteration_count, 1)

def calculate_gas_cost(base_length, modulus_length, exponent_length, exponent):
    multiplication_complexity = calculate_multiplication_complexity(base_length, modulus_length)
    iteration_count = calculate_iteration_count(exponent_length, exponent)
    return max(200, math.floor(multiplication_complexity * iteration_count / 3))
</code></pre></div></div>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>After benchmarking the ModExp precompile, we discovered that it is ‘overpriced’ relative to other precompiles. We also discovered that the current gas pricing formula could be improved to better estimate the computational complexity of various ModExp input variables. The following changes improve the accuracy of the <code class="language-plaintext highlighter-rouge">ModExp</code> pricing:</p>
<h3 id="1-modify-computational-complexity-formula-to-better-reflect-the-computational-complexity">
<a href="#1-modify-computational-complexity-formula-to-better-reflect-the-computational-complexity" class="anchor-link"></a> 1. Modify ‘computational complexity’ formula to better reflect the computational complexity
</h3>
<p>The complexity function defined in <a href="/EIPS/eip-198">EIP-198</a> is as follow:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def mult_complexity(x):
    if x &lt;= 64: return x ** 2
    elif x &lt;= 1024: return x ** 2 // 4 + 96 * x - 3072
    else: return x ** 2 // 16 + 480 * x - 199680
</code></pre></div></div>
<p>where is <code class="language-plaintext highlighter-rouge">x</code> is <code class="language-plaintext highlighter-rouge">max(length_of_MODULUS, length_of_BASE)</code></p>
<p>The complexity formula in <a href="/EIPS/eip-198">EIP-198</a> was meant to approximate the difficulty of Karatsuba multiplication. However, we found a better approximation for modelling modular exponentiation. In the complexity formula defined in this EIP, <code class="language-plaintext highlighter-rouge">x</code> is divided by 8 to account for the number of limbs in multiprecision arithmetic. A comparison of the current ‘complexity’ function and the proposed function against the execution time can be seen below:</p>
<p><img src="/assets/eip-2565/Complexity_Regression.png" alt="Option 1 Graph" /></p>
<p>The complexity function defined here has a better fit vs. the execution time when compared to the <a href="/EIPS/eip-198">EIP-198</a> complexity function. This better fit is because this complexity formula accounts for the use of binary exponentiation algorithms that are used by ‘bigint’ libraries for large exponents. You may also notice the regression line of the proposed complexity function bisects the test vector data points. This is because the run time varies depending on if the modulus is even or odd.</p>
<h3 id="2-change-the-value-of-gquaddivisor">
<a href="#2-change-the-value-of-gquaddivisor" class="anchor-link"></a> 2. Change the value of GQUADDIVISOR
</h3>
<p>After changing the ‘computational complexity’ formula in <a href="/EIPS/eip-198">EIP-198</a> to the one defined here it is necessary to change <code class="language-plaintext highlighter-rouge">QGUADDIVSOR</code> to bring the gas costs inline with their runtime. By setting the <code class="language-plaintext highlighter-rouge">QGUADDIVISOR</code> to <code class="language-plaintext highlighter-rouge">3</code> the cost of the ModExp precompile will have a higher cost (gas/second) than other precompiles such as ECRecover.</p>
<p><img src="/assets/eip-2565/GQuad_Change.png" alt="Option 2 Graph" /></p>
<h3 id="3-set-a-minimum-gas-cost-to-prevent-abuse">
<a href="#3-set-a-minimum-gas-cost-to-prevent-abuse" class="anchor-link"></a> 3. Set a minimum gas cost to prevent abuse
</h3>
<p>This prevents the precompile from underpricing small input values.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<p>There are no changes to the underlying interface or arithmetic algorithms, so the existing test vectors can be reused. Below is a table with the updated test vectors:</p>
<table>
<thead>
<tr>
<th>Test Case</th>
<th>EIP-198 Pricing</th>
<th>EIP-2565 Pricing</th>
</tr>
</thead>
<tbody>
<tr>
<td>modexp_nagydani_1_square</td>
<td>204</td>
<td>200</td>
</tr>
<tr>
<td>modexp_nagydani_1_qube</td>
<td>204</td>
<td>200</td>
</tr>
<tr>
<td>modexp_nagydani_1_pow0x10001</td>
<td>3276</td>
<td>341</td>
</tr>
<tr>
<td>modexp_nagydani_2_square</td>
<td>665</td>
<td>200</td>
</tr>
<tr>
<td>modexp_nagydani_2_qube</td>
<td>665</td>
<td>200</td>
</tr>
<tr>
<td>modexp_nagydani_2_pow0x10001</td>
<td>10649</td>
<td>1365</td>
</tr>
<tr>
<td>modexp_nagydani_3_square</td>
<td>1894</td>
<td>341</td>
</tr>
<tr>
<td>modexp_nagydani_3_qube</td>
<td>1894</td>
<td>341</td>
</tr>
<tr>
<td>modexp_nagydani_3_pow0x10001</td>
<td>30310</td>
<td>5461</td>
</tr>
<tr>
<td>modexp_nagydani_4_square</td>
<td>5580</td>
<td>1365</td>
</tr>
<tr>
<td>modexp_nagydani_4_qube</td>
<td>5580</td>
<td>1365</td>
</tr>
<tr>
<td>modexp_nagydani_4_pow0x10001</td>
<td>89292</td>
<td>21845</td>
</tr>
<tr>
<td>modexp_nagydani_5_square</td>
<td>17868</td>
<td>5461</td>
</tr>
<tr>
<td>modexp_nagydani_5_qube</td>
<td>17868</td>
<td>5461</td>
</tr>
<tr>
<td>modexp_nagydani_5_pow0x10001</td>
<td>285900</td>
<td>87381</td>
</tr>
</tbody>
</table>
<h2 id="implementations">
<a href="#implementations" class="anchor-link"></a> Implementations
</h2>
<p><a href="https://github.com/ethereum/go-ethereum/pull/21607">Geth</a></p>
<p><a href="https://gist.github.com/ineffectualproperty/60e34f15c31850c5b60c8cf3a28cd423">Python</a></p>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>The biggest security consideration for this EIP is creating a potential DoS vector by making ModExp operations too inexpensive relative to their computation time.</p>
<h2 id="references">
<a href="#references" class="anchor-link"></a> References
</h2>
<p><a href="/EIPS/eip-198">EIP-198</a></p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/ineffectualproperty">Kelly Olson</a>, <a href="https://github.com/sean-sn">Sean Gulley</a>, <a href="https://github.com/simonatsn">Simon Peffers</a>, <a href="https://github.com/justindrake">Justin Drake</a>, <a href="https://github.com/dankrad">Dankrad Feist</a>, "EIP-2565: ModExp Gas Cost," <em>Ethereum Improvement Proposals</em>, no. 2565, March 2020. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-2565.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-2565: ModExp Gas Cost",
    "author": "Kelly Olson (@ineffectualproperty), Sean Gulley (@sean-sn), Simon Peffers (@simonatsn), Justin Drake (@justindrake), Dankrad Feist (@dankrad)",
    "name": "EIP-2565: ModExp Gas Cost",
    "dateCreated": "2020-03-20",
    "datePublished": "2020-03-20",

    "discussionUrl": "https://ethereum-magicians.org/t/big-integer-modular-exponentiation-eip-198-gas-cost/4150",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2020"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
