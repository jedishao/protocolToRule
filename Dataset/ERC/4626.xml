<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>All <a href="/EIPS/eip-4626">EIP-4626</a> tokenized Vaults MUST implement EIP-20 to represent shares.
If a Vault is to be non-transferrable, it MAY revert on calls to <code class="language-plaintext highlighter-rouge">transfer</code> or <code class="language-plaintext highlighter-rouge">transferFrom</code>.
The EIP-20 operations <code class="language-plaintext highlighter-rouge">balanceOf</code>, <code class="language-plaintext highlighter-rouge">transfer</code>, <code class="language-plaintext highlighter-rouge">totalSupply</code>, etc. operate on the Vault “shares”
which represent a claim to ownership on a fraction of the Vault’s underlying holdings.</p>
<p>All EIP-4626 tokenized Vaults MUST implement EIP-20’s optional metadata extensions.
The <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">symbol</code> functions SHOULD reflect the underlying token’s <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">symbol</code> in some way.</p>
<p>EIP-4626 tokenized Vaults MAY implement <a href="/EIPS/eip-2612">EIP-2612</a> to improve the UX of approving shares on various integrations.</p>
<h3 id="definitions">
<a href="#definitions" class="anchor-link"></a> Definitions:
</h3>
<ul>
<li>asset: The underlying token managed by the Vault.
Has units defined by the corresponding EIP-20 contract.</li>
 <li>share: The token of the Vault. Has a ratio of underlying assets
exchanged on mint/deposit/withdraw/redeem (as defined by the Vault).</li>
<li>fee: An amount of assets or shares charged to the user by the Vault. Fees can exists for
deposits, yield, AUM, withdrawals, or anything else prescribed by the Vault.</li>
<li>slippage: Any difference between advertised share price and economic realities of
deposit to or withdrawal from the Vault, which is not accounted by fees.</li>
</ul>
<h3 id="methods">
<a href="#methods" class="anchor-link"></a> Methods
</h3>
<h4 id="asset">
<a href="#asset" class="anchor-link"></a> asset
</h4>
<p>The address of the underlying token used for the Vault for accounting, depositing, and withdrawing.</p>
<p>MUST be an EIP-20 token contract.</p>
<p>MUST <em>NOT</em> revert.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">asset</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span> <span class="pi">[]</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assetTokenAddress</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
</code></pre></div></div>
<h4 id="totalassets">
<a href="#totalassets" class="anchor-link"></a> totalAssets
</h4>
<p>Total amount of the underlying asset that is “managed” by Vault.</p>
<p>SHOULD include any compounding that occurs from yield.</p>
<p>MUST be inclusive of any fees that are charged against assets in the Vault.</p>
<p>MUST <em>NOT</em> revert.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">totalAssets</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span> <span class="pi">[]</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">totalManagedAssets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="converttoshares">
<a href="#converttoshares" class="anchor-link"></a> convertToShares
</h4>
<p>The amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met.</p>
<p>MUST NOT be inclusive of any fees that are charged against assets in the Vault.</p>
<p>MUST NOT show any variations depending on the caller.</p>
<p>MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.</p>
<p>MUST NOT revert unless due to integer overflow caused by an unreasonably large input.</p>
<p>MUST round down towards 0.</p>
<p>This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">convertToShares</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="converttoassets">
<a href="#converttoassets" class="anchor-link"></a> convertToAssets
</h4>
<p>The amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met.</p>
<p>MUST NOT be inclusive of any fees that are charged against assets in the Vault.</p>
<p>MUST NOT show any variations depending on the caller.</p>
<p>MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.</p>
<p>MUST NOT revert unless due to integer overflow caused by an unreasonably large input.</p>
<p>MUST round down towards 0.</p>
<p>This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">convertToAssets</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="maxdeposit">
<a href="#maxdeposit" class="anchor-link"></a> maxDeposit
</h4>
<p>Maximum amount of the underlying asset that can be deposited into the Vault for the <code class="language-plaintext highlighter-rouge">receiver</code>, through a <code class="language-plaintext highlighter-rouge">deposit</code> call.</p>
<p>MUST return the maximum amount of assets <code class="language-plaintext highlighter-rouge">deposit</code> would allow to be deposited for <code class="language-plaintext highlighter-rouge">receiver</code> and not cause a revert, which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary). This assumes that the user has infinite assets, i.e. MUST NOT rely on <code class="language-plaintext highlighter-rouge">balanceOf</code> of <code class="language-plaintext highlighter-rouge">asset</code>.</p>
<p>MUST factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0.</p>
<p>MUST return <code class="language-plaintext highlighter-rouge">2 ** 256 - 1</code> if there is no limit on the maximum amount of assets that may be deposited.</p>
<p>MUST NOT revert.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxDeposit</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxAssets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="previewdeposit">
<a href="#previewdeposit" class="anchor-link"></a> previewDeposit
</h4>
<p>Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.</p>
<p>MUST return as close to and no more than the exact amount of Vault shares that would be minted in a <code class="language-plaintext highlighter-rouge">deposit</code> call in the same transaction. I.e. <code class="language-plaintext highlighter-rouge">deposit</code> should return the same or more <code class="language-plaintext highlighter-rouge">shares</code> as <code class="language-plaintext highlighter-rouge">previewDeposit</code> if called in the same transaction.</p>
<p>MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the deposit would be accepted, regardless if the user has enough tokens approved, etc.</p>
<p>MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.</p>
<p>MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause <code class="language-plaintext highlighter-rouge">deposit</code> to revert.</p>
<p>Note that any unfavorable discrepancy between <code class="language-plaintext highlighter-rouge">convertToShares</code> and <code class="language-plaintext highlighter-rouge">previewDeposit</code> SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">previewDeposit</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="deposit">
<a href="#deposit" class="anchor-link"></a> deposit
</h4>
<p>Mints <code class="language-plaintext highlighter-rouge">shares</code> Vault shares to <code class="language-plaintext highlighter-rouge">receiver</code> by depositing exactly <code class="language-plaintext highlighter-rouge">assets</code> of underlying tokens.</p>
<p>MUST emit the <code class="language-plaintext highlighter-rouge">Deposit</code> event.</p>
<p>MUST support EIP-20 <code class="language-plaintext highlighter-rouge">approve</code> / <code class="language-plaintext highlighter-rouge">transferFrom</code> on <code class="language-plaintext highlighter-rouge">asset</code> as a deposit flow.
MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the <code class="language-plaintext highlighter-rouge">deposit</code> execution, and are accounted for during <code class="language-plaintext highlighter-rouge">deposit</code>.</p>
<p>MUST revert if all of <code class="language-plaintext highlighter-rouge">assets</code> cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).</p>
<p>Note that most implementations will require pre-approval of the Vault with the Vault’s underlying <code class="language-plaintext highlighter-rouge">asset</code> token.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">deposit</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">nonpayable</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="maxmint">
<a href="#maxmint" class="anchor-link"></a> maxMint
</h4>
<p>Maximum amount of shares that can be minted from the Vault for the <code class="language-plaintext highlighter-rouge">receiver</code>, through a <code class="language-plaintext highlighter-rouge">mint</code> call.</p>
<p>MUST return the maximum amount of shares <code class="language-plaintext highlighter-rouge">mint</code> would allow to be deposited to <code class="language-plaintext highlighter-rouge">receiver</code> and not cause a revert, which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary). This assumes that the user has infinite assets, i.e. MUST NOT rely on <code class="language-plaintext highlighter-rouge">balanceOf</code> of <code class="language-plaintext highlighter-rouge">asset</code>.</p>
<p>MUST factor in both global and user-specific limits, like if mints are entirely disabled (even temporarily) it MUST return 0.</p>
<p>MUST return <code class="language-plaintext highlighter-rouge">2 ** 256 - 1</code> if there is no limit on the maximum amount of shares that may be minted.</p>
<p>MUST NOT revert.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxMint</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxShares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="previewmint">
<a href="#previewmint" class="anchor-link"></a> previewMint
</h4>
<p>Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.</p>
<p>MUST return as close to and no fewer than the exact amount of assets that would be deposited in a <code class="language-plaintext highlighter-rouge">mint</code> call in the same transaction. I.e. <code class="language-plaintext highlighter-rouge">mint</code> should return the same or fewer <code class="language-plaintext highlighter-rouge">assets</code> as <code class="language-plaintext highlighter-rouge">previewMint</code> if called in the same transaction.</p>
<p>MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint would be accepted, regardless if the user has enough tokens approved, etc.</p>
<p>MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.</p>
<p>MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause <code class="language-plaintext highlighter-rouge">mint</code> to revert.</p>
<p>Note that any unfavorable discrepancy between <code class="language-plaintext highlighter-rouge">convertToAssets</code> and <code class="language-plaintext highlighter-rouge">previewMint</code> SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">previewMint</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="mint">
<a href="#mint" class="anchor-link"></a> mint
</h4>
<p>Mints exactly <code class="language-plaintext highlighter-rouge">shares</code> Vault shares to <code class="language-plaintext highlighter-rouge">receiver</code> by depositing <code class="language-plaintext highlighter-rouge">assets</code> of underlying tokens.</p>
<p>MUST emit the <code class="language-plaintext highlighter-rouge">Deposit</code> event.</p>
<p>MUST support EIP-20 <code class="language-plaintext highlighter-rouge">approve</code> / <code class="language-plaintext highlighter-rouge">transferFrom</code> on <code class="language-plaintext highlighter-rouge">asset</code> as a mint flow.
MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the <code class="language-plaintext highlighter-rouge">mint</code> execution, and are accounted for during <code class="language-plaintext highlighter-rouge">mint</code>.</p>
<p>MUST revert if all of <code class="language-plaintext highlighter-rouge">shares</code> cannot be minted (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).</p>
<p>Note that most implementations will require pre-approval of the Vault with the Vault’s underlying <code class="language-plaintext highlighter-rouge">asset</code> token.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mint</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">nonpayable</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="maxwithdraw">
<a href="#maxwithdraw" class="anchor-link"></a> maxWithdraw
</h4>
<p>Maximum amount of the underlying asset that can be withdrawn from the <code class="language-plaintext highlighter-rouge">owner</code> balance in the Vault, through a <code class="language-plaintext highlighter-rouge">withdraw</code> call.</p>
<p>MUST return the maximum amount of assets that could be transferred from <code class="language-plaintext highlighter-rouge">owner</code> through <code class="language-plaintext highlighter-rouge">withdraw</code> and not cause a revert, which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary).</p>
<p>MUST factor in both global and user-specific limits, like if withdrawals are entirely disabled (even temporarily) it MUST return 0.</p>
<p>MUST NOT revert.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxWithdraw</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">owner</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxAssets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="previewwithdraw">
<a href="#previewwithdraw" class="anchor-link"></a> previewWithdraw
</h4>
<p>Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.</p>
<p>MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a <code class="language-plaintext highlighter-rouge">withdraw</code> call in the same transaction. I.e. <code class="language-plaintext highlighter-rouge">withdraw</code> should return the same or fewer <code class="language-plaintext highlighter-rouge">shares</code> as <code class="language-plaintext highlighter-rouge">previewWithdraw</code> if called in the same transaction.</p>
<p>MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though the withdrawal would be accepted, regardless if the user has enough shares, etc.</p>
<p>MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.</p>
<p>MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause <code class="language-plaintext highlighter-rouge">withdraw</code> to revert.</p>
<p>Note that any unfavorable discrepancy between <code class="language-plaintext highlighter-rouge">convertToShares</code> and <code class="language-plaintext highlighter-rouge">previewWithdraw</code> SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">previewWithdraw</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="withdraw">
<a href="#withdraw" class="anchor-link"></a> withdraw
</h4>
<p>Burns <code class="language-plaintext highlighter-rouge">shares</code> from <code class="language-plaintext highlighter-rouge">owner</code> and sends exactly <code class="language-plaintext highlighter-rouge">assets</code> of underlying tokens to <code class="language-plaintext highlighter-rouge">receiver</code>.</p>
<p>MUST emit the <code class="language-plaintext highlighter-rouge">Withdraw</code> event.</p>
<p>MUST support a withdraw flow where the shares are burned from <code class="language-plaintext highlighter-rouge">owner</code> directly where <code class="language-plaintext highlighter-rouge">owner</code> is <code class="language-plaintext highlighter-rouge">msg.sender</code>.</p>
<p>MUST support a withdraw flow where the shares are burned from <code class="language-plaintext highlighter-rouge">owner</code> directly where <code class="language-plaintext highlighter-rouge">msg.sender</code> has EIP-20 approval over the shares of <code class="language-plaintext highlighter-rouge">owner</code>.</p>
<p>MAY support an additional flow in which the shares are transferred to the Vault contract before the <code class="language-plaintext highlighter-rouge">withdraw</code> execution, and are accounted for during <code class="language-plaintext highlighter-rouge">withdraw</code>.</p>
<p>SHOULD check <code class="language-plaintext highlighter-rouge">msg.sender</code> can spend owner funds, assets needs to be converted to shares and shares should be checked for allowance.</p>
<p>MUST revert if all of <code class="language-plaintext highlighter-rouge">assets</code> cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner not having enough shares, etc).</p>
<p>Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">withdraw</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">nonpayable</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">owner</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="maxredeem">
<a href="#maxredeem" class="anchor-link"></a> maxRedeem
</h4>
<p>Maximum amount of Vault shares that can be redeemed from the <code class="language-plaintext highlighter-rouge">owner</code> balance in the Vault, through a <code class="language-plaintext highlighter-rouge">redeem</code> call.</p>
<p>MUST return the maximum amount of shares that could be transferred from <code class="language-plaintext highlighter-rouge">owner</code> through <code class="language-plaintext highlighter-rouge">redeem</code> and not cause a revert, which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary).</p>
<p>MUST factor in both global and user-specific limits, like if redemption is entirely disabled (even temporarily) it MUST return 0.</p>
<p>MUST NOT revert.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxRedeem</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">owner</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">maxShares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="previewredeem">
<a href="#previewredeem" class="anchor-link"></a> previewRedeem
</h4>
<p>Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions.</p>
<p>MUST return as close to and no more than the exact amount of assets that would be withdrawn in a <code class="language-plaintext highlighter-rouge">redeem</code> call in the same transaction. I.e. <code class="language-plaintext highlighter-rouge">redeem</code> should return the same or more <code class="language-plaintext highlighter-rouge">assets</code> as <code class="language-plaintext highlighter-rouge">previewRedeem</code> if called in the same transaction.</p>
<p>MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the redemption would be accepted, regardless if the user has enough shares, etc.</p>
<p>MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.</p>
<p>MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause <code class="language-plaintext highlighter-rouge">redeem</code> to revert.</p>
<p>Note that any unfavorable discrepancy between <code class="language-plaintext highlighter-rouge">convertToAssets</code> and <code class="language-plaintext highlighter-rouge">previewRedeem</code> SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">previewRedeem</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">view</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="redeem">
<a href="#redeem" class="anchor-link"></a> redeem
</h4>
<p>Burns exactly <code class="language-plaintext highlighter-rouge">shares</code> from <code class="language-plaintext highlighter-rouge">owner</code> and sends <code class="language-plaintext highlighter-rouge">assets</code> of underlying tokens to <code class="language-plaintext highlighter-rouge">receiver</code>.</p>
<p>MUST emit the <code class="language-plaintext highlighter-rouge">Withdraw</code> event.</p>
<p>MUST support a redeem flow where the shares are burned from <code class="language-plaintext highlighter-rouge">owner</code> directly where <code class="language-plaintext highlighter-rouge">owner</code> is <code class="language-plaintext highlighter-rouge">msg.sender</code>.</p>
<p>MUST support a redeem flow where the shares are burned from <code class="language-plaintext highlighter-rouge">owner</code> directly where <code class="language-plaintext highlighter-rouge">msg.sender</code> has EIP-20 approval over the shares of <code class="language-plaintext highlighter-rouge">owner</code>.</p>
<p>MAY support an additional flow in which the shares are transferred to the Vault contract before the <code class="language-plaintext highlighter-rouge">redeem</code> execution, and are accounted for during <code class="language-plaintext highlighter-rouge">redeem</code>.</p>
<p>SHOULD check <code class="language-plaintext highlighter-rouge">msg.sender</code> can spend owner funds using allowance.</p>
<p>MUST revert if all of <code class="language-plaintext highlighter-rouge">shares</code> cannot be redeemed (due to withdrawal limit being reached, slippage, the owner not having enough shares, etc).</p>
<p>Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">redeem</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">function</span>
  <span class="na">stateMutability</span><span class="pi">:</span> <span class="s">nonpayable</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">owner</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>

  <span class="na">outputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h3 id="events">
<a href="#events" class="anchor-link"></a> Events
</h3>
<h4 id="deposit-1">

<a href="#deposit-1" class="anchor-link"></a> Deposit
</h4>
<p><code class="language-plaintext highlighter-rouge">sender</code> has exchanged <code class="language-plaintext highlighter-rouge">assets</code> for <code class="language-plaintext highlighter-rouge">shares</code>, and transferred those <code class="language-plaintext highlighter-rouge">shares</code> to <code class="language-plaintext highlighter-rouge">owner</code>.</p>
<p>MUST be emitted when tokens are deposited into the Vault via the <code class="language-plaintext highlighter-rouge">mint</code> and <code class="language-plaintext highlighter-rouge">deposit</code> methods.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deposit</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">event</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">sender</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">owner</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
<h4 id="withdraw-1">
<a href="#withdraw-1" class="anchor-link"></a> Withdraw
</h4>
<p><code class="language-plaintext highlighter-rouge">sender</code> has exchanged <code class="language-plaintext highlighter-rouge">shares</code>, owned by <code class="language-plaintext highlighter-rouge">owner</code>, for <code class="language-plaintext highlighter-rouge">assets</code>, and transferred those <code class="language-plaintext highlighter-rouge">assets</code> to <code class="language-plaintext highlighter-rouge">receiver</code>.</p>
<p>MUST be emitted when shares are withdrawn from the Vault in <code class="language-plaintext highlighter-rouge">EIP-4626.redeem</code> or <code class="language-plaintext highlighter-rouge">EIP-4626.withdraw</code> methods.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Withdraw</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">event</span>

  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">sender</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">receiver</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">owner</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">address</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">assets</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">shares</span>
      <span class="na">indexed</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">uint256</span>
</code></pre></div></div>
