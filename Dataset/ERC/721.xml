<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.</p>
<p><strong>Every ERC-721 compliant contract must implement the <code class="language-plaintext highlighter-rouge">ERC721</code> and <code class="language-plaintext highlighter-rouge">ERC165</code> interfaces</strong> (subject to “caveats” below):</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="c1">/// @title ERC-721 Non-Fungible Token Standard
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.
</span><span class="k">interface</span> <span class="n">ERC721</span> <span class="cm">/* is ERC165 */</span> <span class="p">{</span>
    <span class="c1">/// @dev This emits when ownership of any NFT changes by any mechanism.
</span>    <span class="c1">///  This event emits when NFTs are created (`from` == 0) and destroyed
</span>    <span class="c1">///  (`to` == 0). Exception: during contract creation, any number of NFTs
</span>    <span class="c1">///  may be created and assigned without emitting Transfer. At the time of
</span>    <span class="c1">///  any transfer, the approved address for that NFT (if any) is reset to none.
</span>    <span class="k">event</span> <span class="n">Transfer</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">_from</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_tokenId</span><span class="p">);</span>

    <span class="c1">/// @dev This emits when the approved address for an NFT is changed or
</span>    <span class="c1">///  reaffirmed. The zero address indicates there is no approved address.
</span>    <span class="c1">///  When a Transfer event emits, this also indicates that the approved
</span>    <span class="c1">///  address for that NFT (if any) is reset to none.
</span>    <span class="k">event</span> <span class="n">Approval</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">_approved</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_tokenId</span><span class="p">);</span>

    <span class="c1">/// @dev This emits when an operator is enabled or disabled for an owner.
</span>    <span class="c1">///  The operator can manage all NFTs of the owner.
</span>    <span class="k">event</span> <span class="n">ApprovalForAll</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">_operator</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">_approved</span><span class="p">);</span>

    <span class="c1">/// @notice Count all NFTs assigned to an owner
</span>    <span class="c1">/// @dev NFTs assigned to the zero address are considered invalid, and this
</span>    <span class="c1">///  function throws for queries about the zero address.
</span>    <span class="c1">/// @param _owner An address for whom to query the balance
</span>    <span class="c1">/// @return The number of NFTs owned by `_owner`, possibly zero
</span>    <span class="k">function</span> <span class="n">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="c1">/// @notice Find the owner of an NFT
</span>    <span class="c1">/// @dev NFTs assigned to zero address are considered invalid, and queries
</span>    <span class="c1">///  about them do throw.
</span>    <span class="c1">/// @param _tokenId The identifier for an NFT
</span>    <span class="c1">/// @return The address of the owner of the NFT
</span>    <span class="k">function</span> <span class="n">ownerOf</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">);</span>

    <span class="c1">/// @notice Transfers the ownership of an NFT from one address to another address
</span>    <span class="c1">/// @dev Throws unless `msg.sender` is the current owner, an authorized
</span>    <span class="c1">///  operator, or the approved address for this NFT. Throws if `_from` is
</span>    <span class="c1">///  not the current owner. Throws if `_to` is the zero address. Throws if
</span>    <span class="c1">///  `_tokenId` is not a valid NFT. When transfer is complete, this function
</span>    <span class="c1">///  checks if `_to` is a smart contract (code size &gt; 0). If so, it calls
</span>    <span class="c1">///  `onERC721Received` on `_to` and throws if the return value is not
</span>    <span class="c1">///  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
</span>    <span class="c1">/// @param _from The current owner of the NFT
</span>    <span class="c1">/// @param _to The new owner
</span>    <span class="c1">/// @param _tokenId The NFT to transfer
</span>    <span class="c1">/// @param data Additional data with no specified format, sent in call to `_to`
</span>    <span class="k">function</span> <span class="n">safeTransferFrom</span><span class="p">(</span><span class="kt">address</span> <span class="n">_from</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">data</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>

    <span class="c1">/// @notice Transfers the ownership of an NFT from one address to another address
</span>    <span class="c1">/// @dev This works identically to the other function with an extra data parameter,
</span>    <span class="c1">///  except this function just sets data to "".
</span>    <span class="c1">/// @param _from The current owner of the NFT
</span>    <span class="c1">/// @param _to The new owner
</span>    <span class="c1">/// @param _tokenId The NFT to transfer
</span>    <span class="k">function</span> <span class="n">safeTransferFrom</span><span class="p">(</span><span class="kt">address</span> <span class="n">_from</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>

    <span class="c1">/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
</span>    <span class="c1">///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
</span>    <span class="c1">///  THEY MAY BE PERMANENTLY LOST
</span>    <span class="c1">/// @dev Throws unless `msg.sender` is the current owner, an authorized
</span>    <span class="c1">///  operator, or the approved address for this NFT. Throws if `_from` is
</span>    <span class="c1">///  not the current owner. Throws if `_to` is the zero address. Throws if
</span>    <span class="c1">///  `_tokenId` is not a valid NFT.
</span>    <span class="c1">/// @param _from The current owner of the NFT
</span>    <span class="c1">/// @param _to The new owner
</span>    <span class="c1">/// @param _tokenId The NFT to transfer
</span>    <span class="k">function</span> <span class="n">transferFrom</span><span class="p">(</span><span class="kt">address</span> <span class="n">_from</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>

    <span class="c1">/// @notice Change or reaffirm the approved address for an NFT
</span>    <span class="c1">/// @dev The zero address indicates there is no approved address.
</span>    <span class="c1">///  Throws unless `msg.sender` is the current NFT owner, or an authorized
</span>    <span class="c1">///  operator of the current owner.
</span>    <span class="c1">/// @param _approved The new approved NFT controller
</span>    <span class="c1">/// @param _tokenId The NFT to approve
</span>    <span class="k">function</span> <span class="n">approve</span><span class="p">(</span><span class="kt">address</span> <span class="n">_approved</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>

    <span class="c1">/// @notice Enable or disable approval for a third party ("operator") to manage
</span>    <span class="c1">///  all of `msg.sender`'s assets
</span>    <span class="c1">/// @dev Emits the ApprovalForAll event. The contract MUST allow
</span>    <span class="c1">///  multiple operators per owner.
</span>    <span class="c1">/// @param _operator Address to add to the set of authorized operators
</span>    <span class="c1">/// @param _approved True if the operator is approved, false to revoke approval
</span>    <span class="k">function</span> <span class="n">setApprovalForAll</span><span class="p">(</span><span class="kt">address</span> <span class="n">_operator</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">_approved</span><span class="p">)</span> <span class="k">external</span><span class="p">;</span>

    <span class="c1">/// @notice Get the approved address for a single NFT
</span>    <span class="c1">/// @dev Throws if `_tokenId` is not a valid NFT.
</span>    <span class="c1">/// @param _tokenId The NFT to find the approved address for
</span>    <span class="c1">/// @return The approved address for this NFT, or the zero address if there is none
</span>    <span class="k">function</span> <span class="n">getApproved</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">);</span>

    <span class="c1">/// @notice Query if an address is an authorized operator for another address
</span>    <span class="c1">/// @param _owner The address that owns the NFTs
</span>    <span class="c1">/// @param _operator The address that acts on behalf of the owner
</span>    <span class="c1">/// @return True if `_operator` is an approved operator for `_owner`, false otherwise
</span>    <span class="k">function</span> <span class="n">isApprovedForAll</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_operator</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">interface</span> <span class="n">ERC165</span> <span class="p">{</span>
    <span class="c1">/// @notice Query if a contract implements an interface
</span>    <span class="c1">/// @param interfaceID The interface identifier, as specified in ERC-165
</span>    <span class="c1">/// @dev Interface identification is specified in ERC-165. This function
</span>    <span class="c1">///  uses less than 30,000 gas.
</span>    <span class="c1">/// @return `true` if the contract implements `interfaceID` and
</span>    <span class="c1">///  `interfaceID` is not 0xffffffff, `false` otherwise
</span>    <span class="k">function</span> <span class="n">supportsInterface</span><span class="p">(</span><span class="kt">bytes4</span> <span class="n">interfaceID</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>A wallet/broker/auction application MUST implement the <strong>wallet interface</strong> if it will accept safe transfers.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.
</span><span class="k">interface</span> <span class="n">ERC721TokenReceiver</span> <span class="p">{</span>
    <span class="c1">/// @notice Handle the receipt of an NFT
</span>    <span class="c1">/// @dev The ERC721 smart contract calls this function on the recipient
</span>    <span class="c1">///  after a `transfer`. This function MAY throw to revert and reject the
</span>    <span class="c1">///  transfer. Return of other than the magic value MUST result in the
</span>    <span class="c1">///  transaction being reverted.
</span>    <span class="c1">///  Note: the contract address is always the message sender.
</span>    <span class="c1">/// @param _operator The address which called `safeTransferFrom` function
</span>    <span class="c1">/// @param _from The address which previously owned the token
</span>    <span class="c1">/// @param _tokenId The NFT identifier which is being transferred
</span>    <span class="c1">/// @param _data Additional data with no specified format
</span>    <span class="c1">/// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
</span>    <span class="c1">///  unless throwing
</span>    <span class="k">function</span> <span class="n">onERC721Received</span><span class="p">(</span><span class="kt">address</span> <span class="n">_operator</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_from</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">_data</span><span class="p">)</span> <span class="k">external</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes4</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The <strong>metadata extension</strong> is OPTIONAL for ERC-721 smart contracts (see “caveats”, below). This allows your smart contract to be interrogated for its name and for details about the assets which your NFTs represent.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.
</span><span class="k">interface</span> <span class="n">ERC721Metadata</span> <span class="cm">/* is ERC721 */</span> <span class="p">{</span>
    <span class="c1">/// @notice A descriptive name for a collection of NFTs in this contract
</span>    <span class="k">function</span> <span class="n">name</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="n">_name</span><span class="p">);</span>

    <span class="c1">/// @notice An abbreviated name for NFTs in this contract
</span>    <span class="k">function</span> <span class="n">symbol</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="n">_symbol</span><span class="p">);</span>

    <span class="c1">/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
</span>    <span class="c1">/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
</span>    <span class="c1">///  3986. The URI may point to a JSON file that conforms to the "ERC721
</span>    <span class="c1">///  Metadata JSON Schema".
</span>    <span class="k">function</span> <span class="n">tokenURI</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This is the “ERC721 Metadata JSON Schema” referenced above.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Asset Metadata"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Identifies the asset to which this NFT represents"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Describes the asset to which this NFT represents"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive."</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>The <strong>enumeration extension</strong> is OPTIONAL for ERC-721 smart contracts (see “caveats”, below). This allows your contract to publish its full list of NFTs and make them discoverable.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x780e9d63.
</span><span class="k">interface</span> <span class="n">ERC721Enumerable</span> <span class="cm">/* is ERC721 */</span> <span class="p">{</span>
    <span class="c1">/// @notice Count NFTs tracked by this contract
</span>    <span class="c1">/// @return A count of valid NFTs tracked by this contract, where each one of
</span>    <span class="c1">///  them has an assigned and queryable owner not equal to the zero address
</span>    <span class="k">function</span> <span class="n">totalSupply</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="c1">/// @notice Enumerate valid NFTs
</span>    <span class="c1">/// @dev Throws if `_index` &gt;= `totalSupply()`.
</span>    <span class="c1">/// @param _index A counter less than `totalSupply()`
</span>    <span class="c1">/// @return The token identifier for the `_index`th NFT,
</span>    <span class="c1">///  (sort order not specified)
</span>    <span class="k">function</span> <span class="n">tokenByIndex</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="c1">/// @notice Enumerate NFTs assigned to an owner
</span>    <span class="c1">/// @dev Throws if `_index` &gt;= `balanceOf(_owner)` or if
</span>    <span class="c1">///  `_owner` is the zero address, representing invalid NFTs.
</span>    <span class="c1">/// @param _owner An address where we are interested in NFTs owned by them
</span>    <span class="c1">/// @param _index A counter less than `balanceOf(_owner)`
</span>    <span class="c1">/// @return The token identifier for the `_index`th NFT assigned to `_owner`,
</span>    <span class="c1">///   (sort order not specified)
</span>    <span class="k">function</span> <span class="n">tokenOfOwnerByIndex</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="caveats">
<a href="#caveats" class="anchor-link"></a> Caveats
</h3>
<p>The 0.4.20 Solidity interface grammar is not expressive enough to document the ERC-721 standard. A contract which complies with ERC-721 MUST also abide by the following:</p>
<ul>
<li>Solidity issue #3412: The above interfaces include explicit mutability guarantees for each function. Mutability guarantees are, in order weak to strong: <code class="language-plaintext highlighter-rouge">payable</code>, implicit nonpayable, <code class="language-plaintext highlighter-rouge">view</code>, and <code class="language-plaintext highlighter-rouge">pure</code>. Your implementation MUST meet the mutability guarantee in this interface and you MAY meet a stronger guarantee. For example, a <code class="language-plaintext highlighter-rouge">payable</code> function in this interface may be implemented as nonpayable (no state mutability specified) in your contract. We expect a later Solidity release will allow your stricter contract to inherit from this interface, but a workaround for version 0.4.20 is that you can edit this interface to add stricter mutability before inheriting from your contract.</li>
<li>Solidity issue #3419: A contract that implements <code class="language-plaintext highlighter-rouge">ERC721Metadata</code> or <code class="language-plaintext highlighter-rouge">ERC721Enumerable</code> SHALL also implement <code class="language-plaintext highlighter-rouge">ERC721</code>. ERC-721 implements the requirements of interface ERC-165.</li>
<li>Solidity issue #2330: If a function is shown in this specification as <code class="language-plaintext highlighter-rouge">external</code> then a contract will be compliant if it uses <code class="language-plaintext highlighter-rouge">public</code> visibility. As a workaround for version 0.4.20, you can edit this interface to switch to <code class="language-plaintext highlighter-rouge">public</code> before inheriting from your contract.</li>
<li>Solidity issues #3494, #3544: Use of <code class="language-plaintext highlighter-rouge">this.*.selector</code> is marked as a warning by Solidity, a future version of Solidity will not mark this as an error.</li>
</ul>
<p><em>If a newer version of Solidity allows the caveats to be expressed in code, then this EIP MAY be updated and the caveats removed, such will be equivalent to the original specification.</em></p>
