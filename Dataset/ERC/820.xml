<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="erc-820-registry-smart-contract">
<a href="#erc-820-registry-smart-contract" class="anchor-link"></a> <a href="/EIPS/eip-820">ERC-820</a> Registry Smart Contract
</h3>
<blockquote>
<p>This is an exact copy of the code of the <a href="https://github.com/jbaylina/ERC820/blob/master/contracts/ERC820Registry.sol">ERC820 registry smart contract</a>.</p>
</blockquote>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* ERC820 Pseudo-introspection Registry Contract
 * This standard defines a universal registry smart contract where any address
 * (contract or regular account) can register which interface it supports and
 * which smart contract is responsible for its implementation.
 *
 * Written in 2018 by Jordi Baylina and Jacques Dafflon
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along
 * with this software. If not, see
 * &lt;https://creativecommons.org/publicdomain/zero/1.0/&gt;.
 *
 *    ███████╗██████╗  ██████╗ █████╗ ██████╗  ██████╗
 *    ██╔════╝██╔══██╗██╔════╝██╔══██╗╚════██╗██╔═████╗
 *    █████╗  ██████╔╝██║     ╚█████╔╝ █████╔╝██║██╔██║
 *    ██╔══╝  ██╔══██╗██║     ██╔══██╗██╔═══╝ ████╔╝██║
 *    ███████╗██║  ██║╚██████╗╚█████╔╝███████╗╚██████╔╝
 *    ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚════╝ ╚══════╝ ╚═════╝
 *
 *    ██████╗ ███████╗ ██████╗ ██╗███████╗████████╗██████╗ ██╗   ██╗
 *    ██╔══██╗██╔════╝██╔════╝ ██║██╔════╝╚══██╔══╝██╔══██╗╚██╗ ██╔╝
 *    ██████╔╝█████╗  ██║  ███╗██║███████╗   ██║   ██████╔╝ ╚████╔╝
 *    ██╔══██╗██╔══╝  ██║   ██║██║╚════██║   ██║   ██╔══██╗  ╚██╔╝
 *    ██║  ██║███████╗╚██████╔╝██║███████║   ██║   ██║  ██║   ██║
 *    ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝
 *
 */</span>
<span class="k">pragma</span> <span class="n">solidity</span> <span class="mf">0.4</span><span class="p">.</span><span class="mi">24</span><span class="p">;</span>
<span class="c1">// IV is value needed to have a vanity address starting with `0x820`.
// IV: 9513
</span>
<span class="c1">/// @dev The interface a contract MUST implement if it is the implementer of
/// some (other) interface for any address other than itself.
</span><span class="k">interface</span> <span class="n">ERC820ImplementerInterface</span> <span class="p">{</span>
    <span class="c1">/// @notice Indicates whether the contract implements the interface `interfaceHash` for the address `addr` or not.
</span>    <span class="c1">/// @param interfaceHash keccak256 hash of the name of the interface
</span>    <span class="c1">/// @param addr Address for which the contract will implement the interface
</span>    <span class="c1">/// @return ERC820_ACCEPT_MAGIC only if the contract implements `interfaceHash` for the address `addr`.
</span>    <span class="k">function</span> <span class="n">canImplementInterfaceForAddress</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">interfaceHash</span><span class="p">,</span> <span class="kt">address</span> <span class="n">addr</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes32</span><span class="p">);</span>
<span class="p">}</span>


<span class="c1">/// @title ERC820 Pseudo-introspection Registry Contract
/// @author Jordi Baylina and Jacques Dafflon
/// @notice This contract is the official implementation of the ERC820 Registry.
/// @notice For more details, see https://eips.ethereum.org/EIPS/eip-820
</span><span class="k">contract</span> <span class="n">ERC820Registry</span> <span class="p">{</span>
    <span class="c1">/// @notice ERC165 Invalid ID.
</span>    <span class="kt">bytes4</span> <span class="k">constant</span> <span class="n">INVALID_ID</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
    <span class="c1">/// @notice Method ID for the ERC165 supportsInterface method (= `bytes4(keccak256('supportsInterface(bytes4)'))`).
</span>    <span class="kt">bytes4</span> <span class="k">constant</span> <span class="n">ERC165ID</span> <span class="o">=</span> <span class="mh">0x01ffc9a7</span><span class="p">;</span>
    <span class="c1">/// @notice Magic value which is returned if a contract implements an interface on behalf of some other address.
</span>    <span class="kt">bytes32</span> <span class="k">constant</span> <span class="n">ERC820_ACCEPT_MAGIC</span> <span class="o">=</span> <span class="nb">keccak256</span><span class="p">(</span><span class="n">abi</span><span class="p">.</span><span class="n">encodePacked</span><span class="p">(</span><span class="s">"ERC820_ACCEPT_MAGIC"</span><span class="p">));</span>

    <span class="k">mapping</span> <span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="k">mapping</span><span class="p">(</span><span class="kt">bytes32</span> <span class="o">=&gt;</span> <span class="kt">address</span><span class="p">))</span> <span class="n">interfaces</span><span class="p">;</span>
    <span class="k">mapping</span> <span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">address</span><span class="p">)</span> <span class="n">managers</span><span class="p">;</span>
    <span class="k">mapping</span> <span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="k">mapping</span><span class="p">(</span><span class="kt">bytes4</span> <span class="o">=&gt;</span> <span class="kt">bool</span><span class="p">))</span> <span class="n">erc165Cached</span><span class="p">;</span>

    <span class="c1">/// @notice Indicates a contract is the `implementer` of `interfaceHash` for `addr`.
</span>    <span class="k">event</span> <span class="n">InterfaceImplementerSet</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="k">indexed</span> <span class="n">interfaceHash</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">implementer</span><span class="p">);</span>
    <span class="c1">/// @notice Indicates `newManager` is the address of the new manager for `addr`.
</span>    <span class="k">event</span> <span class="n">ManagerChanged</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">newManager</span><span class="p">);</span>

    <span class="c1">/// @notice Query if an address implements an interface and through which contract.
</span>    <span class="c1">/// @param _addr Address being queried for the implementer of an interface.
</span>    <span class="c1">/// (If `_addr == 0` then `msg.sender` is assumed.)
</span>    <span class="c1">/// @param _interfaceHash keccak256 hash of the name of the interface as a string.
</span>    <span class="c1">/// E.g., `web3.utils.keccak256('ERC777Token')`.
</span>    <span class="c1">/// @return The address of the contract which implements the interface `_interfaceHash` for `_addr`
</span>    <span class="c1">/// or `0x0` if `_addr` did not register an implementer for this interface.
</span>    <span class="k">function</span> <span class="n">getInterfaceImplementer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">_interfaceHash</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">address</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">_addr</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">:</span> <span class="n">_addr</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isERC165Interface</span><span class="p">(</span><span class="n">_interfaceHash</span><span class="p">))</span> <span class="p">{</span>
            <span class="kt">bytes4</span> <span class="n">erc165InterfaceHash</span> <span class="o">=</span> <span class="kt">bytes4</span><span class="p">(</span><span class="n">_interfaceHash</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">implementsERC165Interface</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">erc165InterfaceHash</span><span class="p">)</span> <span class="o">?</span> <span class="n">addr</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">interfaces</span><span class="p">[</span><span class="n">addr</span><span class="p">][</span><span class="n">_interfaceHash</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Sets the contract which implements a specific interface for an address.
</span>    <span class="c1">/// Only the manager defined for that address can set it.
</span>    <span class="c1">/// (Each address is the manager for itself until it sets a new manager.)
</span>    <span class="c1">/// @param _addr Address to define the interface for. (If `_addr == 0` then `msg.sender` is assumed.)
</span>    <span class="c1">/// @param _interfaceHash keccak256 hash of the name of the interface as a string.
</span>    <span class="c1">/// For example, `web3.utils.keccak256('ERC777TokensRecipient')` for the `ERC777TokensRecipient` interface.
</span>    <span class="c1">/// @param _implementer Contract address implementing _interfaceHash for _addr.
</span>    <span class="k">function</span> <span class="n">setInterfaceImplementer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">_interfaceHash</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_implementer</span><span class="p">)</span> <span class="k">external</span> <span class="p">{</span>
        <span class="kt">address</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">_addr</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">:</span> <span class="n">_addr</span><span class="p">;</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">getManager</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">==</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">,</span> <span class="s">"Not the manager"</span><span class="p">);</span>

        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">isERC165Interface</span><span class="p">(</span><span class="n">_interfaceHash</span><span class="p">),</span> <span class="s">"Must not be a ERC165 hash"</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_implementer</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">_implementer</span> <span class="o">!=</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">require</span><span class="p">(</span>
                <span class="n">ERC820ImplementerInterface</span><span class="p">(</span><span class="n">_implementer</span><span class="p">)</span>
                    <span class="p">.</span><span class="n">canImplementInterfaceForAddress</span><span class="p">(</span><span class="n">_interfaceHash</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span> <span class="o">==</span> <span class="n">ERC820_ACCEPT_MAGIC</span><span class="p">,</span>
                <span class="s">"Does not implement the interface"</span>
            <span class="p">);</span>
        <span class="p">}</span>
        <span class="n">interfaces</span><span class="p">[</span><span class="n">addr</span><span class="p">][</span><span class="n">_interfaceHash</span><span class="p">]</span> <span class="o">=</span> <span class="n">_implementer</span><span class="p">;</span>
        <span class="k">emit</span> <span class="n">InterfaceImplementerSet</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">_interfaceHash</span><span class="p">,</span> <span class="n">_implementer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Sets the `_newManager` as manager for the `_addr` address.
</span>    <span class="c1">/// The new manager will be able to call `setInterfaceImplementer` for `_addr`.
</span>    <span class="c1">/// @param _addr Address for which to set the new manager.
</span>    <span class="c1">/// @param _newManager Address of the new manager for `addr`.
</span>    <span class="k">function</span> <span class="n">setManager</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_newManager</span><span class="p">)</span> <span class="k">external</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">getManager</span><span class="p">(</span><span class="n">_addr</span><span class="p">)</span> <span class="o">==</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">,</span> <span class="s">"Not the manager"</span><span class="p">);</span>
        <span class="n">managers</span><span class="p">[</span><span class="n">_addr</span><span class="p">]</span> <span class="o">=</span> <span class="n">_newManager</span> <span class="o">==</span> <span class="n">_addr</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">_newManager</span><span class="p">;</span>
        <span class="k">emit</span> <span class="n">ManagerChanged</span><span class="p">(</span><span class="n">_addr</span><span class="p">,</span> <span class="n">_newManager</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Get the manager of an address.
</span>    <span class="c1">/// @param _addr Address for which to return the manager.
</span>    <span class="c1">/// @return Address of the manager for a given address.
</span>    <span class="k">function</span> <span class="n">getManager</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">address</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// By default the manager of an address is the same address
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">managers</span><span class="p">[</span><span class="n">_addr</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">_addr</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">managers</span><span class="p">[</span><span class="n">_addr</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Compute the keccak256 hash of an interface given its name.
</span>    <span class="c1">/// @param _interfaceName Name of the interface.
</span>    <span class="c1">/// @return The keccak256 hash of an interface name.
</span>    <span class="k">function</span> <span class="n">interfaceHash</span><span class="p">(</span><span class="kt">string</span> <span class="n">_interfaceName</span><span class="p">)</span> <span class="k">external</span> <span class="k">pure</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes32</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">keccak256</span><span class="p">(</span><span class="n">abi</span><span class="p">.</span><span class="n">encodePacked</span><span class="p">(</span><span class="n">_interfaceName</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="cm">/* --- ERC165 Related Functions --- */</span>
    <span class="cm">/* --- Developed in collaboration with William Entriken. --- */</span>

    <span class="c1">/// @notice Updates the cache with whether the contract implements an ERC165 interface or not.
</span>    <span class="c1">/// @param _contract Address of the contract for which to update the cache.
</span>    <span class="c1">/// @param _interfaceId ERC165 interface for which to update the cache.
</span>    <span class="k">function</span> <span class="n">updateERC165Cache</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">external</span> <span class="p">{</span>
        <span class="n">interfaces</span><span class="p">[</span><span class="n">_contract</span><span class="p">][</span><span class="n">_interfaceId</span><span class="p">]</span> <span class="o">=</span> <span class="n">implementsERC165InterfaceNoCache</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="o">?</span> <span class="n">_contract</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">erc165Cached</span><span class="p">[</span><span class="n">_contract</span><span class="p">][</span><span class="n">_interfaceId</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Checks whether a contract implements an ERC165 interface or not.
</span>    <span class="c1">/// The result may be cached, if not a direct lookup is performed.
</span>    <span class="c1">/// @param _contract Address of the contract to check.
</span>    <span class="c1">/// @param _interfaceId ERC165 interface to check.
</span>    <span class="c1">/// @return `true` if `_contract` implements `_interfaceId`, false otherwise.
</span>    <span class="k">function</span> <span class="n">implementsERC165Interface</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">erc165Cached</span><span class="p">[</span><span class="n">_contract</span><span class="p">][</span><span class="n">_interfaceId</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">implementsERC165InterfaceNoCache</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">_interfaceId</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">interfaces</span><span class="p">[</span><span class="n">_contract</span><span class="p">][</span><span class="n">_interfaceId</span><span class="p">]</span> <span class="o">==</span> <span class="n">_contract</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
</span>    <span class="c1">/// @param _contract Address of the contract to check.
</span>    <span class="c1">/// @param _interfaceId ERC165 interface to check.
</span>    <span class="c1">/// @return `true` if `_contract` implements `_interfaceId`, false otherwise.
</span>    <span class="k">function</span> <span class="n">implementsERC165InterfaceNoCache</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">uint256</span> <span class="n">success</span><span class="p">;</span>
        <span class="kt">uint256</span> <span class="n">result</span><span class="p">;</span>

        <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">=</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">ERC165ID</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">success</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">=</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">INVALID_ID</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">success</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">result</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">=</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="n">_contract</span><span class="p">,</span> <span class="n">_interfaceId</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">success</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">/// @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.
</span>    <span class="c1">/// @param _interfaceHash The hash to check.
</span>    <span class="c1">/// @return `true` if the hash is a ERC165 interface (ending with 28 zeroes), `false` otherwise.
</span>    <span class="k">function</span> <span class="n">isERC165Interface</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">_interfaceHash</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_interfaceHash</span> <span class="o">&amp;</span> <span class="mh">0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">/// @dev Make a call on a contract without throwing if the function does not exist.
</span>    <span class="k">function</span> <span class="n">noThrowCall</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span>
        <span class="k">internal</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">success</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">result</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">bytes4</span> <span class="n">erc165ID</span> <span class="o">=</span> <span class="n">ERC165ID</span><span class="p">;</span>

        <span class="k">assembly</span> <span class="p">{</span>
                <span class="kr">let</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">mload</span><span class="p">(</span><span class="mh">0x40</span><span class="p">)</span>               <span class="c1">// Find empty storage location using "free memory pointer"
</span>                <span class="n">mstore</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">erc165ID</span><span class="p">)</span>                <span class="c1">// Place signature at beginning of empty storage
</span>                <span class="n">mstore</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">),</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="c1">// Place first argument directly next to signature
</span>
                <span class="n">success</span> <span class="o">:=</span> <span class="n">staticcall</span><span class="p">(</span>
                    <span class="mi">30000</span><span class="p">,</span>                         <span class="c1">// 30k gas
</span>                    <span class="n">_contract</span><span class="p">,</span>                     <span class="c1">// To addr
</span>                    <span class="n">x</span><span class="p">,</span>                             <span class="c1">// Inputs are stored at location x
</span>                    <span class="mh">0x08</span><span class="p">,</span>                          <span class="c1">// Inputs are 8 bytes long
</span>                    <span class="n">x</span><span class="p">,</span>                             <span class="c1">// Store output over input (saves space)
</span>                    <span class="mh">0x20</span>                           <span class="c1">// Outputs are 32 bytes long
</span>                <span class="p">)</span>

                <span class="n">result</span> <span class="o">:=</span> <span class="n">mload</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>                 <span class="c1">// Load the result
</span>        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<h3 id="deployment-transaction">
<a href="#deployment-transaction" class="anchor-link"></a> Deployment Transaction
</h3>
<p>Below is the raw transaction which MUST be used to deploy the smart contract on any chain.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0xf90a2a8085174876e800830c35008080b909d7608060405234801561001057600080fd5b506109b7806100206000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166329965a1d81146100925780633d584063146100bf5780635df8122f146100fc57806365ba36c114610123578063a41e7d5114610155578063aabbb8ca14610183578063b7056765146101a7578063f712f3e8146101e9575b600080fd5b34801561009e57600080fd5b506100bd600160a060020a036004358116906024359060443516610217565b005b3480156100cb57600080fd5b506100e0600160a060020a0360043516610512565b60408051600160a060020a039092168252519081900360200190f35b34801561010857600080fd5b506100bd600160a060020a036004358116906024351661055e565b34801561012f57600080fd5b506101436004803560248101910135610655565b60408051918252519081900360200190f35b34801561016157600080fd5b506100bd600160a060020a0360043516600160e060020a0319602435166106e3565b34801561018f57600080fd5b506100e0600160a060020a036004351660243561076d565b3480156101b357600080fd5b506101d5600160a060020a0360043516600160e060020a0319602435166107e7565b604080519115158252519081900360200190f35b3480156101f557600080fd5b506101d5600160a060020a0360043516600160e060020a03196024351661089c565b6000600160a060020a0384161561022e5783610230565b335b90503361023c82610512565b600160a060020a03161461029a576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6102a38361091c565b156102f8576040805160e560020a62461bcd02815260206004820152601960248201527f4d757374206e6f74206265206120455243313635206861736800000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103195750600160a060020a0382163314155b156104a15760405160200180807f4552433832305f4143434550545f4d414749430000000000000000000000000081525060130190506040516020818303038152906040526040518082805190602001908083835b6020831061038d5780518252601f19909201916020918201910161036e565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f249cb3fa000000000000000000000000000000000000000000000000000000008352600483018a9052600160a060020a0388811660248501529451909650938816945063249cb3fa936044808401945091929091908290030181600087803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b505050506040513d602081101561044a57600080fd5b5051146104a1576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03808216600090815260016020526040812054909116151561053c575080610559565b50600160a060020a03808216600090815260016020526040902054165b919050565b3361056883610512565b600160a060020a0316146105c6576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146105e557806105e8565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b60008282604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b602083106106ad5780518252601f19909201916020918201910161068e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090505b92915050565b6106ed82826107e7565b6106f85760006106fa565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b60008080600160a060020a038516156107865784610788565b335b91506107938461091c565b156107b85750826107a4828261089c565b6107af5760006107b1565b815b92506107df565b600160a060020a038083166000908152602081815260408083208884529091529020541692505b505092915050565b60008080610815857f01ffc9a70000000000000000000000000000000000000000000000000000000061093e565b9092509050811580610825575080155b1561083357600092506107df565b61084585600160e060020a031961093e565b909250905081158061085657508015155b1561086457600092506107df565b61086e858561093e565b90925090506001821480156108835750806001145b1561089157600192506107df565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108e4576108dd83836107e7565b90506106dd565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160088189617530fa9051909690955093505050505600a165627a7a723058204fc4461c9d5a247b0eafe0f9c508057bc0ad72bc24668cb2a35ea65850e10d3100291ba08208208208208208208208208208208208208208208208208208208208208200a00820820820820820820820820820820820820820820820820820820820820820
</code></pre></div></div>
<p>The strings of <code class="language-plaintext highlighter-rouge">820</code>’s at the end of the transaction are the <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code> of the signature. From this deterministic pattern (generated by a human), anyone can deduce that no one knows the private key for the deployment account.</p>
<h3 id="deployment-method">
<a href="#deployment-method" class="anchor-link"></a> Deployment Method
</h3>
<p>This contract is going to be deployed using the keyless deployment method—also known as <a href="https://github.com/Arachnid/">Nick</a>’s method—which relies on a single-use address. (See <a href="https://medium.com/@weka/how-to-send-ether-to-11-440-people-187e332566b7">Nick’s article</a> for more details). This method works as follows:</p>
<ol>
<li>Generate a transaction which deploys the contract from a new random account.
<ul>
<li>This transaction MUST NOT use <a href="/EIPS/eip-155">EIP-155</a> in order to work on any chain.</li>
<li>This transaction MUST have a relatively high gas price to be deployed on any chain. In this case, it is going to be 100 Gwei.</li>
</ul>
</li>
<li>
<p>Set the <code class="language-plaintext highlighter-rouge">v</code>, <code class="language-plaintext highlighter-rouge">r</code>, <code class="language-plaintext highlighter-rouge">s</code> of the transaction signature to the following values:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>v: 27
r: 0x8208208208208208208208208208208208208208208208208208208208208200
s: 0x0820820820820820820820820820820820820820820820820820820820820820
</code></pre></div> </div>
<p>Those <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code> values—made of a repeating pattern of <code class="language-plaintext highlighter-rouge">820</code>’s—are predictable “random numbers” generated deterministically by a human.</p>
<blockquote>
<p>The values of <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code> must be 32 bytes long each—or 64 characters in hexadecimal. Since <code class="language-plaintext highlighter-rouge">820</code> is 3 characters long and 3 is not a divisor of 64, but it is a divisor of 63, the <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code> values are padded with one extra character.<br />
The <code class="language-plaintext highlighter-rouge">s</code> value is prefixed with a single zero (<code class="language-plaintext highlighter-rouge">0</code>). The <code class="language-plaintext highlighter-rouge">0</code> prefix also guarantees that <code class="language-plaintext highlighter-rouge">s &lt; secp256k1n ÷ 2 + 1</code>.<br />
The <code class="language-plaintext highlighter-rouge">r</code> value, cannot be prefixed with a zero, as the transaction becomes invalid. Instead it is suffixed with a zero (<code class="language-plaintext highlighter-rouge">0</code>) which still respects the condition <code class="language-plaintext highlighter-rouge">s &lt; secp256k1n</code>.</p>
</blockquote>
</li>
<li>
<p>We recover the sender of this transaction, i.e., the single-use deployment account.</p>
<blockquote>
<p>Thus we obtain an account that can broadcast that transaction, but we also have the warranty that nobody knows the private key of that account.</p>
</blockquote>
</li>
<li>
<p>Send exactly 0.08 ethers to this single-use deployment account.</p>
</li>
<li>Broadcast the deployment transaction.</li>
</ol>
<p>This operation can be done on any chain, guaranteeing that the contract address is always the same and nobody can use that address with a different contract.</p>
<h3 id="single-use-registry-deployment-account">
<a href="#single-use-registry-deployment-account" class="anchor-link"></a> Single-use Registry Deployment Account
</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0xE6C244a1C10Aa0085b0cf92f04cdaD947C2988b8
</code></pre></div></div>
<p>This account is generated by reverse engineering it from its signature for the transaction. This way no one knows the private key, but it is known that it is the valid signer of the deployment transaction.</p>
<blockquote>
<p>To deploy the registry, 0.08 ethers MUST be sent to this account <em>first</em>.</p>
</blockquote>
<h3 id="registry-contract-address">
<a href="#registry-contract-address" class="anchor-link"></a> Registry Contract Address
</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x820b586C8C28125366C998641B09DCbE7d4cBF06
</code></pre></div></div>
<p>The contract has the address above for every chain on which it is deployed.</p>
<details>
<summary>Raw metadata of <code>./contracts/ERC820Registry.sol</code></summary>
<pre><code>{
  "compiler": {
    "version": "0.4.24+commit.e67f0147"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_addr",
            "type": "address"
          },
          {
            "name": "_interfaceHash",
            "type": "bytes32"
          },
          {
            "name": "_implementer",
            "type": "address"
          }
        ],
        "name": "setInterfaceImplementer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_addr",
            "type": "address"
          }
        ],
        "name": "getManager",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_addr",
            "type": "address"
          },
          {
            "name": "_newManager",
            "type": "address"
          }
        ],
        "name": "setManager",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_interfaceName",
            "type": "string"
          }
        ],
        "name": "interfaceHash",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_contract",
            "type": "address"
          },
          {
            "name": "_interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "updateERC165Cache",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_addr",
            "type": "address"
          },
          {
            "name": "_interfaceHash",
            "type": "bytes32"
          }
        ],
        "name": "getInterfaceImplementer",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_contract",
            "type": "address"
          },
          {
            "name": "_interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "implementsERC165InterfaceNoCache",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_contract",
            "type": "address"
          },
          {
            "name": "_interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "implementsERC165Interface",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "addr",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "interfaceHash",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "name": "implementer",
            "type": "address"
          }
        ],
        "name": "InterfaceImplementerSet",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "addr",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "newManager",
            "type": "address"
          }
        ],
        "name": "ManagerChanged",
        "type": "event"
      }
    ],
    "devdoc": {
      "author": "Jordi Baylina and Jacques Dafflon",
      "methods": {
        "getInterfaceImplementer(address,bytes32)": {
          "params": {
            "_addr": "Address being queried for the implementer of an interface. (If `_addr == 0` then `msg.sender` is assumed.)",
            "_interfaceHash": "keccak256 hash of the name of the interface as a string. E.g., `web3.utils.keccak256('ERC777Token')`."
          },
          "return": "The address of the contract which implements the interface `_interfaceHash` for `_addr` or `0x0` if `_addr` did not register an implementer for this interface."
        },
        "getManager(address)": {
          "params": {
            "_addr": "Address for which to return the manager."
          },
          "return": "Address of the manager for a given address."
        },
        "implementsERC165Interface(address,bytes4)": {
          "params": {
            "_contract": "Address of the contract to check.",
            "_interfaceId": "ERC165 interface to check."
          },
          "return": "`true` if `_contract` implements `_interfaceId`, false otherwise."
        },
        "implementsERC165InterfaceNoCache(address,bytes4)": {
          "params": {
            "_contract": "Address of the contract to check.",
            "_interfaceId": "ERC165 interface to check."
          },
          "return": "`true` if `_contract` implements `_interfaceId`, false otherwise."
        },
        "interfaceHash(string)": {
          "params": {
            "_interfaceName": "Name of the interface."
          },
          "return": "The keccak256 hash of an interface name."
        },
        "setInterfaceImplementer(address,bytes32,address)": {
          "params": {
            "_addr": "Address to define the interface for. (If `_addr == 0` then `msg.sender` is assumed.)",
            "_implementer": "Contract address implementing _interfaceHash for _addr.",
            "_interfaceHash": "keccak256 hash of the name of the interface as a string. For example, `web3.utils.keccak256('ERC777TokensRecipient')` for the `ERC777TokensRecipient` interface."
          }
        },
        "setManager(address,address)": {
          "params": {
            "_addr": "Address for which to set the new manager.",
            "_newManager": "Address of the new manager for `addr`."
          }
        },
        "updateERC165Cache(address,bytes4)": {
          "params": {
            "_contract": "Address of the contract for which to update the cache.",
            "_interfaceId": "ERC165 interface for which to update the cache."
          }
        }
      },
      "title": "ERC820 Pseudo-introspection Registry Contract"
    },
    "userdoc": {
      "methods": {
        "getInterfaceImplementer(address,bytes32)": {
          "notice": "Query if an address implements an interface and through which contract."
        },
        "getManager(address)": {
          "notice": "Get the manager of an address."
        },
        "implementsERC165Interface(address,bytes4)": {
          "notice": "Checks whether a contract implements an ERC165 interface or not. The result may be cached, if not a direct lookup is performed."
        },
        "implementsERC165InterfaceNoCache(address,bytes4)": {
          "notice": "Checks whether a contract implements an ERC165 interface or not without using nor updating the cache."
        },
        "interfaceHash(string)": {
          "notice": "Compute the keccak256 hash of an interface given its name."
        },
        "setInterfaceImplementer(address,bytes32,address)": {
          "notice": "Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.)"
        },
        "setManager(address,address)": {
          "notice": "Sets the `_newManager` as manager for the `_addr` address. The new manager will be able to call `setInterfaceImplementer` for `_addr`."
        },
        "updateERC165Cache(address,bytes4)": {
          "notice": "Updates the cache with whether the contract implements an ERC165 interface or not."
        }
      }
    }
  },
  "settings": {
    "compilationTarget": {
      "./contracts/ERC820Registry.sol": "ERC820Registry"
    },
    "evmVersion": "byzantium",
    "libraries": {},
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": []
  },
  "sources": {
    "./contracts/ERC820Registry.sol": {
      "content": "/* ERC820 Pseudo-introspection Registry Contract\n * This standard defines a universal registry smart contract where any address\n * (contract or regular account) can register which interface it supports and\n * which smart contract is responsible for its implementation.\n *\n * Written in 2018 by Jordi Baylina and Jacques Dafflon\n *\n * To the extent possible under law, the author(s) have dedicated all copyright\n * and related and neighboring rights to this software to the public domain\n * worldwide. This software is distributed without any warranty.\n *\n * You should have received a copy of the CC0 Public Domain Dedication along\n * with this software. If not, see\n * &lt;https://creativecommons.org/publicdomain/zero/1.0/&gt;.\n *\n *    ███████╗██████╗  ██████╗ █████╗ ██████╗  ██████╗\n *    ██╔════╝██╔══██╗██╔════╝██╔══██╗╚════██╗██╔═████╗\n *    █████╗  ██████╔╝██║     ╚█████╔╝ █████╔╝██║██╔██║\n *    ██╔══╝  ██╔══██╗██║     ██╔══██╗██╔═══╝ ████╔╝██║\n *    ███████╗██║  ██║╚██████╗╚█████╔╝███████╗╚██████╔╝\n *    ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚════╝ ╚══════╝ ╚═════╝\n *\n *    ██████╗ ███████╗ ██████╗ ██╗███████╗████████╗██████╗ ██╗   ██╗\n *    ██╔══██╗██╔════╝██╔════╝ ██║██╔════╝╚══██╔══╝██╔══██╗╚██╗ ██╔╝\n *    ██████╔╝█████╗  ██║  ███╗██║███████╗   ██║   ██████╔╝ ╚████╔╝\n *    ██╔══██╗██╔══╝  ██║   ██║██║╚════██║   ██║   ██╔══██╗  ╚██╔╝\n *    ██║  ██║███████╗╚██████╔╝██║███████║   ██║   ██║  ██║   ██║\n *    ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝\n *\n */\npragma solidity 0.4.24;\n// IV is value needed to have a vanity address starting with `0x820`.\n// IV: 9513\n\n/// @dev The interface a contract MUST implement if it is the implementer of\n/// some (other) interface for any address other than itself.\ninterface ERC820ImplementerInterface {\n    /// @notice Indicates whether the contract implements the interface `interfaceHash` for the address `addr` or not.\n    /// @param interfaceHash keccak256 hash of the name of the interface\n    /// @param addr Address for which the contract will implement the interface\n    /// @return ERC820_ACCEPT_MAGIC only if the contract implements `interfaceHash` for the address `addr`.\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32);\n}\n\n\n/// @title ERC820 Pseudo-introspection Registry Contract\n/// @author Jordi Baylina and Jacques Dafflon\n/// @notice This contract is the official implementation of the ERC820 Registry.\n/// @notice For more details, see https://eips.ethereum.org/EIPS/eip-820\ncontract ERC820Registry {\n    /// @notice ERC165 Invalid ID.\n    bytes4 constant INVALID_ID = 0xffffffff;\n    /// @notice Method ID for the ERC165 supportsInterface method (= `bytes4(keccak256('supportsInterface(bytes4)'))`).\n    bytes4 constant ERC165ID = 0x01ffc9a7;\n    /// @notice Magic value which is returned if a contract implements an interface on behalf of some other address.\n    bytes32 constant ERC820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC820_ACCEPT_MAGIC\"));\n\n    mapping (address =&gt; mapping(bytes32 =&gt; address)) interfaces;\n    mapping (address =&gt; address) managers;\n    mapping (address =&gt; mapping(bytes4 =&gt; bool)) erc165Cached;\n\n    /// @notice Indicates a contract is the `implementer` of `interfaceHash` for `addr`.\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\n    /// @notice Indicates `newManager` is the address of the new manager for `addr`.\n    event ManagerChanged(address indexed addr, address indexed newManager);\n\n    /// @notice Query if an address implements an interface and through which contract.\n    /// @param _addr Address being queried for the implementer of an interface.\n    /// (If `_addr == 0` then `msg.sender` is assumed.)\n    /// @param _interfaceHash keccak256 hash of the name of the interface as a string.\n    /// E.g., `web3.utils.keccak256('ERC777Token')`.\n    /// @return The address of the contract which implements the interface `_interfaceHash` for `_addr`\n    /// or `0x0` if `_addr` did not register an implementer for this interface.\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address) {\n        address addr = _addr == 0 ? msg.sender : _addr;\n        if (isERC165Interface(_interfaceHash)) {\n            bytes4 erc165InterfaceHash = bytes4(_interfaceHash);\n            return implementsERC165Interface(addr, erc165InterfaceHash) ? addr : 0;\n        }\n        return interfaces[addr][_interfaceHash];\n    }\n\n    /// @notice Sets the contract which implements a specific interface for an address.\n    /// Only the manager defined for that address can set it.\n    /// (Each address is the manager for itself until it sets a new manager.)\n    /// @param _addr Address to define the interface for. (If `_addr == 0` then `msg.sender` is assumed.)\n    /// @param _interfaceHash keccak256 hash of the name of the interface as a string.\n    /// For example, `web3.utils.keccak256('ERC777TokensRecipient')` for the `ERC777TokensRecipient` interface.\n    /// @param _implementer Contract address implementing _interfaceHash for _addr.\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external {\n        address addr = _addr == 0 ? msg.sender : _addr;\n        require(getManager(addr) == msg.sender, \"Not the manager\");\n\n        require(!isERC165Interface(_interfaceHash), \"Must not be a ERC165 hash\");\n        if (_implementer != 0 &amp;&amp; _implementer != msg.sender) {\n            require(\n                ERC820ImplementerInterface(_implementer)\n                    .canImplementInterfaceForAddress(_interfaceHash, addr) == ERC820_ACCEPT_MAGIC,\n                \"Does not implement the interface\"\n            );\n        }\n        interfaces[addr][_interfaceHash] = _implementer;\n        emit InterfaceImplementerSet(addr, _interfaceHash, _implementer);\n    }\n\n    /// @notice Sets the `_newManager` as manager for the `_addr` address.\n    /// The new manager will be able to call `setInterfaceImplementer` for `_addr`.\n    /// @param _addr Address for which to set the new manager.\n    /// @param _newManager Address of the new manager for `addr`.\n    function setManager(address _addr, address _newManager) external {\n        require(getManager(_addr) == msg.sender, \"Not the manager\");\n        managers[_addr] = _newManager == _addr ? 0 : _newManager;\n        emit ManagerChanged(_addr, _newManager);\n    }\n\n    /// @notice Get the manager of an address.\n    /// @param _addr Address for which to return the manager.\n    /// @return Address of the manager for a given address.\n    function getManager(address _addr) public view returns(address) {\n        // By default the manager of an address is the same address\n        if (managers[_addr] == 0) {\n            return _addr;\n        } else {\n            return managers[_addr];\n        }\n    }\n\n    /// @notice Compute the keccak256 hash of an interface given its name.\n    /// @param _interfaceName Name of the interface.\n    /// @return The keccak256 hash of an interface name.\n    function interfaceHash(string _interfaceName) external pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_interfaceName));\n    }\n\n    /* --- ERC165 Related Functions --- */\n    /* --- Developed in collaboration with William Entriken. --- */\n\n    /// @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n    /// @param _contract Address of the contract for which to update the cache.\n    /// @param _interfaceId ERC165 interface for which to update the cache.\n    function updateERC165Cache(address _contract, bytes4 _interfaceId) external {\n        interfaces[_contract][_interfaceId] = implementsERC165InterfaceNoCache(_contract, _interfaceId) ? _contract : 0;\n        erc165Cached[_contract][_interfaceId] = true;\n    }\n\n    /// @notice Checks whether a contract implements an ERC165 interface or not.\n    /// The result may be cached, if not a direct lookup is performed.\n    /// @param _contract Address of the contract to check.\n    /// @param _interfaceId ERC165 interface to check.\n    /// @return `true` if `_contract` implements `_interfaceId`, false otherwise.\n    function implementsERC165Interface(address _contract, bytes4 _interfaceId) public view returns (bool) {\n        if (!erc165Cached[_contract][_interfaceId]) {\n            return implementsERC165InterfaceNoCache(_contract, _interfaceId);\n        }\n        return interfaces[_contract][_interfaceId] == _contract;\n    }\n\n    /// @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n    /// @param _contract Address of the contract to check.\n    /// @param _interfaceId ERC165 interface to check.\n    /// @return `true` if `_contract` implements `_interfaceId`, false otherwise.\n    function implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) public view returns (bool) {\n        uint256 success;\n        uint256 result;\n\n        (success, result) = noThrowCall(_contract, ERC165ID);\n        if (success == 0 || result == 0) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, INVALID_ID);\n        if (success == 0 || result != 0) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, _interfaceId);\n        if (success == 1 &amp;&amp; result == 1) {\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\n    /// @param _interfaceHash The hash to check.\n    /// @return `true` if the hash is a ERC165 interface (ending with 28 zeroes), `false` otherwise.\n    function isERC165Interface(bytes32 _interfaceHash) internal pure returns (bool) {\n        return _interfaceHash &amp; 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\n    }\n\n    /// @dev Make a call on a contract without throwing if the function does not exist.\n    function noThrowCall(address _contract, bytes4 _interfaceId)\n        internal view returns (uint256 success, uint256 result)\n    {\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n                let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n                mstore(x, erc165ID)                // Place signature at beginning of empty storage\n                mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n                success := staticcall(\n                    30000,                         // 30k gas\n                    _contract,                     // To addr\n                    x,                             // Inputs are stored at location x\n                    0x08,                          // Inputs are 8 bytes long\n                    x,                             // Store output over input (saves space)\n                    0x20                           // Outputs are 32 bytes long\n                )\n\n                result := mload(x)                 // Load the result\n        }\n    }\n}\n",
      "keccak256": "0x8eecce3912a15087b3f5845d5a74af7712c93d0a8fcd6f2d40f07ed5032022ab"
    }
  },
  "version": 1
}</code>
</pre>
</details>
<h3 id="interface-name">
<a href="#interface-name" class="anchor-link"></a> Interface Name
</h3>
<p>Any interface name is hashed using <code class="language-plaintext highlighter-rouge">keccak256</code> and sent to <code class="language-plaintext highlighter-rouge">getInterfaceImplementer()</code>.</p>
<p>If the interface is part of a standard, it is best practice to explicitly state the interface name and link to this published <a href="/EIPS/eip-820">ERC-820</a> such that other people don’t have to come here to look up these rules.</p>
<p>For convenience, the registry provides a function to compute the hash on-chain:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">interfaceHash</span><span class="p">(</span><span class="kt">string</span> <span class="n">_interfaceName</span><span class="p">)</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes32</span><span class="p">)</span>
</code></pre></div></div>
<p>Compute the keccak256 hash of an interface given its name.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">65ba36c1</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_interfaceName</code>: Name of the interface.</small><br />
<small><strong>returns:</strong> The <code class="language-plaintext highlighter-rouge">keccak256</code> hash of an interface name.</small></p>
</blockquote>
<h4 id="approved-ercs">
<a href="#approved-ercs" class="anchor-link"></a> <strong>Approved ERCs</strong>
</h4>
<p>If the interface is part of an approved ERC, it MUST be named <code class="language-plaintext highlighter-rouge">ERC###XXXXX</code> where <code class="language-plaintext highlighter-rouge">###</code> is the number of the ERC and XXXXX should be the name of the interface in CamelCase. The meaning of this interface SHOULD be defined in the specified ERC.</p>
<p>Examples:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">keccak256("ERC20Token")</code></li>
<li><code class="language-plaintext highlighter-rouge">keccak256("ERC777Token")</code></li>
<li><code class="language-plaintext highlighter-rouge">keccak256("ERC777TokensSender")</code></li>
<li><code class="language-plaintext highlighter-rouge">keccak256("ERC777TokensRecipient")</code></li>
</ul>
<h4 id="erc-165-compatible-interfaces">
<a href="#erc-165-compatible-interfaces" class="anchor-link"></a> <strong><a href="/EIPS/eip-165">ERC-165</a> Compatible Interfaces</strong>
</h4>
<blockquote>
<p>The compatibility with <a href="/EIPS/eip-165">ERC-165</a>, including the <a href="#erc165-cache">ERC165 Cache</a>, has been designed and developed with <a href="https://github.com/fulldecent">William Entriken</a>.</p>
</blockquote>
<p>Any interface where the last 28 bytes are zeroes (<code class="language-plaintext highlighter-rouge">0</code>) SHALL be considered an <a href="/EIPS/eip-165">ERC-165</a> interface.</p>
<p><strong><a href="/EIPS/eip-165">ERC-165</a> Lookup</strong></p>
<p>Anyone can explicitly check if a contract implements an <a href="/EIPS/eip-165">ERC-165</a> interface using the registry by calling one of the two functions below:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">implementsERC165Interface</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</code></pre></div></div>
<p>Checks whether a contract implements an <a href="/EIPS/eip-165">ERC-165</a> interface or not.</p>
<p><em>NOTE</em>: The result is cached. If the cache is out of date, it MUST be updated by calling <code class="language-plaintext highlighter-rouge">updateERC165Cache</code>. (See <a href="#erc165-cache">ERC165 Cache</a> for more details.)</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">f712f3e8</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_contract</code>: Address of the contract to check.</small><br />
<small><code class="language-plaintext highlighter-rouge">_interfaceId</code>: <a href="/EIPS/eip-165">ERC-165</a> interface to check.</small><br />
<small><strong>returns:</strong> <code class="language-plaintext highlighter-rouge">true</code> if <code class="language-plaintext highlighter-rouge">_contract</code> implements <code class="language-plaintext highlighter-rouge">_interfaceId</code>, false otherwise.</small></p>
</blockquote>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">implementsERC165InterfaceNoCache</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</code></pre></div></div>
<p>Checks whether a contract implements an <a href="/EIPS/eip-165">ERC-165</a> interface or not without using nor updating the cache.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">b7056765</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_contract</code>: Address of the contract to check.</small><br />
<small><code class="language-plaintext highlighter-rouge">_interfaceId</code>: <a href="/EIPS/eip-165">ERC-165</a> interface to check.</small><br />
<small><strong>returns:</strong> <code class="language-plaintext highlighter-rouge">true</code> if <code class="language-plaintext highlighter-rouge">_contract</code> implements <code class="language-plaintext highlighter-rouge">_interfaceId</code>, false otherwise.</small></p>
</blockquote>
<p><strong><a href="/EIPS/eip-165">ERC-165</a> Cache</strong> <a id="erc165-cache"></a></p>
<p>Whether a contract implements an <a href="/EIPS/eip-165">ERC-165</a> interface or not can be cached manually to save gas.</p>
<p>If a contract dynamically changes its interface and relies on the <a href="/EIPS/eip-165">ERC-165</a> cache of the <a href="/EIPS/eip-820">ERC-820</a> registry, the cache MUST be updated manually—there is no automatic cache invalidation or cache update. Ideally the contract SHOULD automatically update the cache when changing its interface. However anyone MAY update the cache on the contract’s behalf.</p>
<p>The cache update MUST be done using the <code class="language-plaintext highlighter-rouge">updateERC165Cache</code> function:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">updateERC165Cache</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">_interfaceId</span><span class="p">)</span> <span class="k">public</span>
</code></pre></div></div>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">a41e7d51</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_contract</code>: Address of the contract for which to update the cache.</small><br />
<small><code class="language-plaintext highlighter-rouge">_interfaceId</code>: <a href="/EIPS/eip-165">ERC-165</a> interface for which to update the cache.</small></p>
</blockquote>
<h4 id="private-user-defined-interfaces">
<a href="#private-user-defined-interfaces" class="anchor-link"></a> <strong>Private User-defined Interfaces</strong>
</h4>
<p>This scheme is extensible. You MAY make up your own interface name and raise awareness to get other people to implement it and then check for those implementations. Have fun but please, you MUST not conflict with the reserved designations above.</p>
<h3 id="set-an-interface-for-an-address">
<a href="#set-an-interface-for-an-address" class="anchor-link"></a> Set An Interface For An Address
</h3>
<p>For any address to set a contract as the interface implementation, it must call the following function of the <a href="/EIPS/eip-820">ERC-820</a> registry:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">setInterfaceImplementer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">_interfaceHash</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_implementer</span><span class="p">)</span> <span class="k">public</span>
</code></pre></div></div>
<p>Sets the contract which implements a specific interface for an address.</p>
<p>Only the <code class="language-plaintext highlighter-rouge">manager</code> defined for that address can set it. (Each address is the manager for itself, see the <a href="#manager">manager</a> section for more details.)</p>
<p><em>NOTE</em>: If <code class="language-plaintext highlighter-rouge">_addr</code> and <code class="language-plaintext highlighter-rouge">_implementer</code> are two different addresses, then:</p>
<ul>
<li>The <code class="language-plaintext highlighter-rouge">_implementer</code> MUST implement the <code class="language-plaintext highlighter-rouge">ERC820ImplementerInterface</code> (detailed below).</li>
<li>Calling <code class="language-plaintext highlighter-rouge">canImplementInterfaceForAddress</code> on <code class="language-plaintext highlighter-rouge">_implementer</code> with the given <code class="language-plaintext highlighter-rouge">_addr</code> and <code class="language-plaintext highlighter-rouge">_interfaceHash</code> MUST return the <code class="language-plaintext highlighter-rouge">ERC820_ACCEPT_MAGIC</code> value.</li>
</ul>
<p><em>NOTE</em>: The <code class="language-plaintext highlighter-rouge">_interfaceHash</code> MUST NOT be an <a href="/EIPS/eip-165">ERC-165</a> interface—it MUST NOT end with 28 zeroes (<code class="language-plaintext highlighter-rouge">0</code>).</p>
<p><em>NOTE</em>: The <code class="language-plaintext highlighter-rouge">_addr</code> MAY be <code class="language-plaintext highlighter-rouge">0</code>, then <code class="language-plaintext highlighter-rouge">msg.sender</code> is assumed. This default value simplifies interactions via multisigs where the data of the transaction to sign is constant regardless of the address of the multisig instance.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">29965a1d</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_addr</code>: Address to define the interface for (if <code class="language-plaintext highlighter-rouge">_addr == 0</code> them <code class="language-plaintext highlighter-rouge">msg.sender</code>: is assumed)</small><br />
<small><code class="language-plaintext highlighter-rouge">_interfaceHash</code>: <code class="language-plaintext highlighter-rouge">keccak256</code> hash of the name of the interface as a string, for example <code class="language-plaintext highlighter-rouge">web3.utils.keccak256('ERC777TokensRecipient')</code> for the ERC777TokensRecipient interface.</small><br />
<small><code class="language-plaintext highlighter-rouge">_implementer</code>: Contract implementing <code class="language-plaintext highlighter-rouge">_interfaceHash</code> for <code class="language-plaintext highlighter-rouge">_addr</code>.</small></p>
</blockquote>
<h3 id="get-an-implementation-of-an-interface-for-an-address">
<a href="#get-an-implementation-of-an-interface-for-an-address" class="anchor-link"></a> Get An Implementation Of An Interface For An Address
</h3>
<p>Anyone MAY query the <a href="/EIPS/eip-820">ERC-820</a> Registry to obtain the address of a contract implementing an interface on behalf of some address using the <code class="language-plaintext highlighter-rouge">getInterfaceImplementer</code> function.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">getInterfaceImplementer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">_interfaceHash</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">)</span>
</code></pre></div></div>
<p>Query if an address implements an interface and through which contract.</p>
<p><em>NOTE</em>: If the last 28 bytes of the <code class="language-plaintext highlighter-rouge">_interfaceHash</code> are zeroes (<code class="language-plaintext highlighter-rouge">0</code>), then the first 4 bytes are considered an <a href="/EIPS/eip-165">ERC-165</a> interface and the registry SHALL forward the call to the contract at <code class="language-plaintext highlighter-rouge">_addr</code> to see if it implements the <a href="/EIPS/eip-165">ERC-165</a> interface (the first 4 bytes of <code class="language-plaintext highlighter-rouge">_interfaceHash</code>). The registry SHALL also cache <a href="/EIPS/eip-165">ERC-165</a> queries to reduce gas consumption. Anyone MAY call the <code class="language-plaintext highlighter-rouge">erc165UpdateCache</code> function to update whether a contract implements an interface or not.</p>
<p><em>NOTE</em>: The <code class="language-plaintext highlighter-rouge">_addr</code> MAY be <code class="language-plaintext highlighter-rouge">0</code>, then <code class="language-plaintext highlighter-rouge">msg.sender</code> is assumed. This default value is consistent with the behavior of the <code class="language-plaintext highlighter-rouge">setInterfaceImplementer</code> function and simplifies interactions via multisigs where the data of the transaction to sign is constant regardless of the address of the multisig instance.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">aabbb8ca</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_addr</code>: Address being queried for the implementer of an interface. (If <code class="language-plaintext highlighter-rouge">_addr == 0</code> them <code class="language-plaintext highlighter-rouge">msg.sender</code> is assumed.)</small><br />
<small><code class="language-plaintext highlighter-rouge">_interfaceHash</code>: keccak256 hash of the name of the interface as a string. E.g. <code class="language-plaintext highlighter-rouge">web3.utils.keccak256('ERC777Token')</code></small><br />
<small><strong>returns:</strong> The address of the contract which implements the interface <code class="language-plaintext highlighter-rouge">_interfaceHash</code> for <code class="language-plaintext highlighter-rouge">_addr</code> or <code class="language-plaintext highlighter-rouge">0x0</code> if <code class="language-plaintext highlighter-rouge">_addr</code> did not register an implementer for this interface.</small></p>
</blockquote>
<h3 id="interface-implementation-erc820implementerinterface">
<a href="#interface-implementation-erc820implementerinterface" class="anchor-link"></a> Interface Implementation (<code class="language-plaintext highlighter-rouge">ERC820ImplementerInterface</code>)
</h3>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="n">ERC820ImplementerInterface</span> <span class="p">{</span>
    <span class="c1">/// @notice Indicates whether the contract implements the interface `interfaceHash` for the address `addr`.
</span>    <span class="c1">/// @param addr Address for which the contract will implement the interface
</span>    <span class="c1">/// @param interfaceHash keccak256 hash of the name of the interface
</span>    <span class="c1">/// @return ERC820_ACCEPT_MAGIC only if the contract implements `ìnterfaceHash` for the address `addr`.
</span>    <span class="k">function</span> <span class="n">canImplementInterfaceForAddress</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">interfaceHash</span><span class="p">,</span> <span class="kt">address</span> <span class="n">addr</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes32</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Any contract being registered as the implementation of an interface for a given address MUST implement said interface. In addition if it implements an interface on behalf of a different address, the contract MUST implement the <code class="language-plaintext highlighter-rouge">ERC820ImplementerInterface</code> shown above.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">canImplementInterfaceForAddress</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">interfaceHash</span><span class="p">,</span> <span class="kt">address</span> <span class="n">addr</span><span class="p">)</span> <span class="k">view</span> <span class="k">public</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes32</span><span class="p">);</span>
</code></pre></div></div>
<p>Indicates whether a contract implements an interface (<code class="language-plaintext highlighter-rouge">interfaceHash</code>) for a given address (<code class="language-plaintext highlighter-rouge">addr</code>).</p>
<p>If a contract implements the interface (<code class="language-plaintext highlighter-rouge">interfaceHash</code>) for a given address (<code class="language-plaintext highlighter-rouge">addr</code>), it MUST return <code class="language-plaintext highlighter-rouge">ERC820_ACCEPT_MAGIC</code> when called with the <code class="language-plaintext highlighter-rouge">addr</code> and the <code class="language-plaintext highlighter-rouge">interfaceHash</code>. If it does not implement the <code class="language-plaintext highlighter-rouge">interfaceHash</code> for a given address (<code class="language-plaintext highlighter-rouge">addr</code>), it MUST NOT return <code class="language-plaintext highlighter-rouge">ERC820_ACCEPT_MAGIC</code>.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">f0083250</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">interfaceHash</code>: Hash of the interface which is implemented</small><br />
<small><code class="language-plaintext highlighter-rouge">addr</code>: Address for which the interface is implemented</small><br />
<small><strong>returns:</strong> <code class="language-plaintext highlighter-rouge">ERC820_ACCEPT_MAGIC</code> only if the contract implements <code class="language-plaintext highlighter-rouge">ìnterfaceHash</code> for the address <code class="language-plaintext highlighter-rouge">addr</code>.</small></p>
</blockquote>
<p>The special value <code class="language-plaintext highlighter-rouge">ERC820_ACCEPT_MAGIC</code> is defined as the <code class="language-plaintext highlighter-rouge">keccka256</code> hash of the string <code class="language-plaintext highlighter-rouge">"ERC820_ACCEPT_MAGIC"</code>.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bytes32</span> <span class="k">constant</span> <span class="n">ERC820_ACCEPT_MAGIC</span> <span class="o">=</span> <span class="nb">keccak256</span><span class="p">(</span><span class="s">"ERC820_ACCEPT_MAGIC"</span><span class="p">);</span>
</code></pre></div></div>
<blockquote>
<p>The reason to return <code class="language-plaintext highlighter-rouge">ERC820_ACCEPT_MAGIC</code> instead of a boolean is to prevent cases where a contract fails to implement the <code class="language-plaintext highlighter-rouge">canImplementInterfaceForAddress</code> but implements a fallback function which does not throw. In this case, since <code class="language-plaintext highlighter-rouge">canImplementInterfaceForAddress</code> does not exist, the fallback function is called instead, executed without throwing and returns <code class="language-plaintext highlighter-rouge">1</code>. Thus making it appear as if <code class="language-plaintext highlighter-rouge">canImplementInterfaceForAddress</code> returned <code class="language-plaintext highlighter-rouge">true</code>.</p>
</blockquote>
<h3 id="manager">
<a href="#manager" class="anchor-link"></a> Manager
</h3>
<p>The manager of an address (regular account or a contract) is the only entity allowed to register implementations of interfaces for the address. By default, any address is its own manager.</p>
<p>The manager can transfer its role to another address by calling <code class="language-plaintext highlighter-rouge">setManager</code> on the registry contract with the address for which to transfer the manager and the address of the new manager.</p>
<p><strong><code class="language-plaintext highlighter-rouge">setManager</code> Function</strong></p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">setManager</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_newManager</span><span class="p">)</span> <span class="k">public</span>
</code></pre></div></div>
<p>Sets the <code class="language-plaintext highlighter-rouge">_newManager</code> as manager for the <code class="language-plaintext highlighter-rouge">_addr</code> address.</p>
<p>The new manager will be able to call <code class="language-plaintext highlighter-rouge">setInterfaceImplementer</code> for <code class="language-plaintext highlighter-rouge">_addr</code>.</p>
<p>If <code class="language-plaintext highlighter-rouge">_newManager</code> is <code class="language-plaintext highlighter-rouge">0x0</code>, the manager is reset to <code class="language-plaintext highlighter-rouge">_addr</code> itself as the manager.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">5df8122f</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_addr</code>: Address for which to set the new manager.</small><br />
<small><code class="language-plaintext highlighter-rouge">_newManager</code>: The address of the new manager for <code class="language-plaintext highlighter-rouge">_addr</code>. (Pass <code class="language-plaintext highlighter-rouge">0x0</code> to reset the manager to <code class="language-plaintext highlighter-rouge">_addr</code>.)</small></p>
</blockquote>
<p><strong><code class="language-plaintext highlighter-rouge">getManager</code> Function</strong></p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">getManager</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">address</span><span class="p">)</span>
</code></pre></div></div>
<p>Get the manager of an address.</p>
<blockquote>
<p><small><strong>identifier:</strong> <code class="language-plaintext highlighter-rouge">3d584063</code></small><br />
<small><strong>parameters</strong></small><br />
<small><code class="language-plaintext highlighter-rouge">_addr</code>: Address for which to return the manager.</small><br />
<small><strong>returns:</strong> Address of the manager for a given address.</small></p>
</blockquote>
