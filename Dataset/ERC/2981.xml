<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
RFC 2119.</p>
<p><strong>ERC-721 and ERC-1155 compliant contracts MAY implement this ERC for royalties to provide a standard method of specifying royalty payment information.</strong></p>
<p>Marketplaces that support this standard <strong>SHOULD</strong> implement some method of transferring royalties to the royalty recipient. Standards for the actual transfer and notification of funds will be specified in future EIPs.</p>
<p>Marketplaces <strong>MUST</strong> pay the royalty in the same unit of exchange as that of the <code class="language-plaintext highlighter-rouge">_salePrice</code> passed to <code class="language-plaintext highlighter-rouge">royaltyInfo()</code>. This is equivalent to saying that the <code class="language-plaintext highlighter-rouge">_salePrice</code> parameter and the <code class="language-plaintext highlighter-rouge">royaltyAmount</code> return value <strong>MUST</strong> be denominated in the same monetary unit. For example, if the sale price is in ETH, then the royalty payment must also be paid in ETH, and if the sale price is in USDC, then the royalty payment must also be paid in USDC.</p>
<p>Implementers of this standard <strong>MUST</strong> calculate a percentage of the <code class="language-plaintext highlighter-rouge">_salePrice</code> when calculating the royalty amount. Subsequent invocations of <code class="language-plaintext highlighter-rouge">royaltyInfo()</code> <strong>MAY</strong> return a different <code class="language-plaintext highlighter-rouge">royaltyAmount</code>. Though there are some important considerations for implementers if they choose to perform different percentage calculations between <code class="language-plaintext highlighter-rouge">royaltyInfo()</code> invocations.</p>
<p>The <code class="language-plaintext highlighter-rouge">royaltyInfo()</code> function is not aware of the unit of exchange for the sale and royalty payment. With that in mind, implementers <strong>MUST NOT</strong> return a fixed/constant <code class="language-plaintext highlighter-rouge">royaltyAmount</code>, wherein they’re ignoring the <code class="language-plaintext highlighter-rouge">_salePrice</code>. For the same reason, implementers <strong>MUST NOT</strong> determine the <code class="language-plaintext highlighter-rouge">royaltyAmount</code> based on comparing the <code class="language-plaintext highlighter-rouge">_salePrice</code> with constant numbers. In both cases, the <code class="language-plaintext highlighter-rouge">royaltyInfo()</code> function makes assumptions on the unit of exchange, which <strong>MUST</strong> be avoided.</p>
<p>The percentage value used must be independent of the sale price for reasons previously mentioned (i.e. if the percentage value 10%, then 10% <strong>MUST</strong> apply whether <code class="language-plaintext highlighter-rouge">_salePrice</code> is 10, 10000 or 1234567890). If the royalty fee calculation results in a remainder, implementers <strong>MAY</strong> round up or round down to the nearest integer. For example, if the royalty fee is 10% and <code class="language-plaintext highlighter-rouge">_salePrice</code> is 999, the implementer can return either 99 or 100 for <code class="language-plaintext highlighter-rouge">royaltyAmount</code>, both are valid.</p>
<p>The implementer <strong>MAY</strong> choose to change the percentage value based on other predictable variables that do not make assumptions about the unit of exchange. For example, the percentage value may drop linearly over time. An approach like this <strong>SHOULD NOT</strong> be based on variables that are unpredictable like <code class="language-plaintext highlighter-rouge">block.timestamp</code>, but instead on other more predictable state changes. One more reasonable approach <strong>MAY</strong> use the number of transfers of an NFT to decide which percentage value is used to calculate the <code class="language-plaintext highlighter-rouge">royaltyAmount</code>. The idea being that the percentage value could decrease after each transfer of the NFT. Another example could be using a different percentage value for each unique <code class="language-plaintext highlighter-rouge">_tokenId</code>.</p>
<p>Marketplaces that support this standard <strong>SHOULD NOT</strong> send a zero-value transaction if the <code class="language-plaintext highlighter-rouge">royaltyAmount</code> returned is <code class="language-plaintext highlighter-rouge">0</code>. This would waste gas and serves no useful purpose in this EIP.</p>
<p>Marketplaces that support this standard <strong>MUST</strong> pay royalties no matter where the sale occurred or in what currency, including on-chain sales, over-the-counter (OTC) sales and off-chain sales such as at auction houses. As royalty payments are voluntary, entities that respect this EIP must pay no matter where the sale occurred - a sale conducted outside of the blockchain is still a sale. The exact mechanism for paying and notifying the recipient will be defined in future EIPs.</p>
<p>Implementers of this standard <strong>MUST</strong> have all of the following functions:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.6</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="k">import</span> <span class="s">"./IERC165.sol"</span><span class="p">;</span>

<span class="c1">///
/// @dev Interface for the NFT Royalty Standard
///
</span><span class="k">interface</span> <span class="n">IERC2981</span> <span class="k">is</span> <span class="n">IERC165</span> <span class="p">{</span>
    <span class="c1">/// ERC165 bytes to add to interface array - set in parent contract
</span>    <span class="c1">/// implementing this standard
</span>    <span class="c1">///
</span>    <span class="c1">/// bytes4(keccak256("royaltyInfo(uint256,uint256)")) == 0x2a55205a
</span>    <span class="c1">/// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;
</span>    <span class="c1">/// _registerInterface(_INTERFACE_ID_ERC2981);
</span>
    <span class="c1">/// @notice Called with the sale price to determine how much royalty
</span>    <span class="c1">//          is owed and to whom.
</span>    <span class="c1">/// @param _tokenId - the NFT asset queried for royalty information
</span>    <span class="c1">/// @param _salePrice - the sale price of the NFT asset specified by _tokenId
</span>    <span class="c1">/// @return receiver - address of who should be sent the royalty payment
</span>    <span class="c1">/// @return royaltyAmount - the royalty payment amount for _salePrice
</span>    <span class="k">function</span> <span class="n">royaltyInfo</span><span class="p">(</span>
        <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_salePrice</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span>
        <span class="kt">address</span> <span class="n">receiver</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">royaltyAmount</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="k">interface</span> <span class="n">IERC165</span> <span class="p">{</span>
    <span class="c1">/// @notice Query if a contract implements an interface
</span>    <span class="c1">/// @param interfaceID The interface identifier, as specified in ERC-165
</span>    <span class="c1">/// @dev Interface identification is specified in ERC-165. This function
</span>    <span class="c1">///  uses less than 30,000 gas.
</span>    <span class="c1">/// @return `true` if the contract implements `interfaceID` and
</span>    <span class="c1">///  `interfaceID` is not 0xffffffff, `false` otherwise
</span>    <span class="k">function</span> <span class="n">supportsInterface</span><span class="p">(</span><span class="kt">bytes4</span> <span class="n">interfaceID</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="examples">
<a href="#examples" class="anchor-link"></a> Examples
</h3>
<p>This standard being used on an ERC-721 during deployment:</p>
<h4 id="deploying-an-erc-721-and-signaling-support-for-erc-2981">
<a href="#deploying-an-erc-721-and-signaling-support-for-erc-2981" class="anchor-link"></a> Deploying an ERC-721 and signaling support for ERC-2981
</h4>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constructor</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">symbol</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">baseURI</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
        <span class="n">_symbol</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">;</span>
        <span class="n">_setBaseURI</span><span class="p">(</span><span class="n">baseURI</span><span class="p">);</span>
        <span class="c1">// register the supported interfaces to conform to ERC721 via ERC165
</span>        <span class="n">_registerInterface</span><span class="p">(</span><span class="n">_INTERFACE_ID_ERC721</span><span class="p">);</span>
        <span class="n">_registerInterface</span><span class="p">(</span><span class="n">_INTERFACE_ID_ERC721_METADATA</span><span class="p">);</span>
        <span class="n">_registerInterface</span><span class="p">(</span><span class="n">_INTERFACE_ID_ERC721_ENUMERABLE</span><span class="p">);</span>
        <span class="c1">// Royalties interface
</span>        <span class="n">_registerInterface</span><span class="p">(</span><span class="n">_INTERFACE_ID_ERC2981</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<h4 id="checking-if-the-nft-being-sold-on-your-marketplace-implemented-royalties">
<a href="#checking-if-the-nft-being-sold-on-your-marketplace-implemented-royalties" class="anchor-link"></a> Checking if the NFT being sold on your marketplace implemented royalties
</h4>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bytes4</span> <span class="k">private</span> <span class="k">constant</span> <span class="n">_INTERFACE_ID_ERC2981</span> <span class="o">=</span> <span class="mh">0x2a55205a</span><span class="p">;</span>

<span class="k">function</span> <span class="n">checkRoyalties</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">)</span> <span class="k">internal</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">)</span> <span class="o">=</span> <span class="n">IERC165</span><span class="p">(</span><span class="n">_contract</span><span class="p">).</span><span class="n">supportsInterface</span><span class="p">(</span><span class="n">_INTERFACE_ID_ERC2981</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">success</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div></div>
