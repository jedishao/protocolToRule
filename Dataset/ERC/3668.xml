<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="overview">
<a href="#overview" class="anchor-link"></a> Overview
</h3>
<p>Answering a query via CCIP read takes place in three steps:</p>
<ol>
<li>Querying the contract.</li>
<li>Querying the gateway using the URL provided in (1).</li>
<li>Querying or sending a transaction to the contract using the data from (1) and (2).</li>
</ol>
<p>In step 1, a standard blockchain call operation is made to the contract. The contract reverts with an error that specifies the data to complete the call can be found offchain, and provides the url to a service that can provide the answer, along with additional contextual information required for the call in step (3).</p>
<p>In step 2, the client calls the gateway service with the <code class="language-plaintext highlighter-rouge">callData</code> from the revert message in step (1). The gateway responds with an answer <code class="language-plaintext highlighter-rouge">response</code>, whose content is opaque to the client.</p>
<p>In step 3, the client calls the original contract, supplying the <code class="language-plaintext highlighter-rouge">response</code> from step (2) and the <code class="language-plaintext highlighter-rouge">extraData</code> returned by the contract in step (1). The contract decodes the provided data and uses it to validate the response and act on it - by returning information to the client or by making changes in a transaction. The contract could also revert with a new error to initiate another lookup, in which case the protocol starts again at step 1.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──────┐                                          ┌────────┐ ┌─────────────┐
│Client│                                          │Contract│ │Gateway @ url│
└──┬───┘                                          └───┬────┘ └──────┬──────┘
   │                                                  │             │
   │ somefunc(...)                                    │             │
   ├─────────────────────────────────────────────────►│             │
   │                                                  │             │
   │ revert OffchainData(sender, urls, callData,      │             │
   │                     callbackFunction, extraData) │             │
   │◄─────────────────────────────────────────────────┤             │
   │                                                  │             │
   │ HTTP request (sender, callData)                  │             │
   ├──────────────────────────────────────────────────┼────────────►│
   │                                                  │             │
   │ Response (result)                                │             │
   │◄─────────────────────────────────────────────────┼─────────────┤
   │                                                  │             │
   │ callbackFunction(result, extraData)              │             │
   ├─────────────────────────────────────────────────►│             │
   │                                                  │             │
   │ answer                                           │             │
   │◄─────────────────────────────────────────────────┤             │
   │                                                  │             │
</code></pre></div></div>
<h3 id="contract-interface">
<a href="#contract-interface" class="anchor-link"></a> Contract interface
</h3>
<p>A CCIP read enabled contract MUST revert with the following error whenever a function that requires offchain data is called:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">error</span> <span class="n">OffchainLookup</span><span class="p">(</span><span class="kt">address</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">urls</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">callData</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">callbackFunction</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">extraData</span><span class="p">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">sender</code> is the address of the contract that raised the error, and is used to determine if the error was thrown by the contract the client called, or ‘bubbled up’ from a nested call.</p>
<p><code class="language-plaintext highlighter-rouge">urls</code> specifies a list of URL templates to services (known as gateways) that implement the CCIP read protocol and can formulate an answer to the query. <code class="language-plaintext highlighter-rouge">urls</code> can be the empty list <code class="language-plaintext highlighter-rouge">[]</code>, in which case the client MUST specify the URL template. The order in which URLs are tried is up to the client, but contracts SHOULD return them in order of priority, with the most important entry first.</p>
<p>Each URL may include two substitution parameters, <code class="language-plaintext highlighter-rouge">{sender}</code> and <code class="language-plaintext highlighter-rouge">{data}</code>. Before a call is made to the URL, <code class="language-plaintext highlighter-rouge">sender</code> is replaced with the lowercase 0x-prefixed hexadecimal formatted <code class="language-plaintext highlighter-rouge">sender</code> parameter, and <code class="language-plaintext highlighter-rouge">data</code> is replaced by the the 0x-prefixed hexadecimal formatted <code class="language-plaintext highlighter-rouge">callData</code> parameter.</p>
<p><code class="language-plaintext highlighter-rouge">callData</code> specifies the data to call the gateway with. This value is opaque to the client. Typically this will be ABI-encoded, but this is an implementation detail that contracts and gateways can standardise on as desired.</p>
<p><code class="language-plaintext highlighter-rouge">callbackFunction</code> is the 4-byte function selector for a function on the original contract to which a callback should be sent.</p>
<p><code class="language-plaintext highlighter-rouge">extraData</code> is additional data that is required by the callback, and MUST be retained by the client and provided unmodified to the callback function. This value is opaque to the client.</p>
<p>The contract MUST also implement a callback method for decoding and validating the data returned by the gateway. The name of this method is implementation-specific, but it MUST have the signature <code class="language-plaintext highlighter-rouge">(bytes response, bytes extraData)</code>, and MUST have the same return type as the function that reverted with <code class="language-plaintext highlighter-rouge">OffchainLookup</code>.</p>
<p>If the client successfully calls the gateway, the callback function specified in the <code class="language-plaintext highlighter-rouge">OffchainLookup</code> error will be invoked by the client, with <code class="language-plaintext highlighter-rouge">response</code> set to the value returned by the gateway, and <code class="language-plaintext highlighter-rouge">extraData</code> set to the value returned in the contract’s <code class="language-plaintext highlighter-rouge">OffchainLookup</code> error. The contract MAY initiate another CCIP read lookup in this callback, though authors should bear in mind that the limits on number of recursive invocations will vary from client to client.</p>
<p>In a call context (as opposed to a transaction), the return data from this call will be returned to the user as if it was returned by the function that was originally invoked.</p>
<h4 id="example">
<a href="#example" class="anchor-link"></a> Example
</h4>
<p>Suppose a contract has the following method:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">addr</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">uint</span> <span class="nb">balance</span><span class="p">);</span>
</code></pre></div></div>
<p>Data for these queries is stored offchain in some kind of hashed data structure, the details of which are not important for this example. The contract author wants the gateway to fetch the proof information for this query and call the following function with it:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">balanceOfWithProof</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">response</span><span class="p">,</span> <span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">extraData</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">uint</span> <span class="nb">balance</span><span class="p">);</span>
</code></pre></div></div>
<p>One example of a valid implementation of <code class="language-plaintext highlighter-rouge">balanceOf</code> would thus be:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">addr</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">uint</span> <span class="nb">balance</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">revert</span> <span class="n">OffchainLookup</span><span class="p">(</span>
        <span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">),</span>
        <span class="p">[</span><span class="n">url</span><span class="p">],</span>
        <span class="n">abi</span><span class="p">.</span><span class="n">encodeWithSelector</span><span class="p">(</span><span class="n">Gateway</span><span class="p">.</span><span class="n">getSignedBalance</span><span class="p">.</span><span class="nb">selector</span><span class="p">,</span> <span class="n">addr</span><span class="p">),</span>
        <span class="n">ContractName</span><span class="p">.</span><span class="n">balanceOfWithProof</span><span class="p">.</span><span class="nb">selector</span><span class="p">,</span>
        <span class="n">abi</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note that in this example the contract is returning <code class="language-plaintext highlighter-rouge">addr</code> in both <code class="language-plaintext highlighter-rouge">callData</code> and <code class="language-plaintext highlighter-rouge">extraData</code>, because it is required both by the gateway (in order to look up the data) and the callback function (in order to verify it). The contract cannot simply pass it to the gateway and rely on it being returned in the response, as this would give the gateway an opportunity to respond with an answer to a different query than the one that was initially issued.</p>
<h4 id="recursive-calls-in-ccip-aware-contracts">
<a href="#recursive-calls-in-ccip-aware-contracts" class="anchor-link"></a> Recursive calls in CCIP-aware contracts
</h4>
<p>When a CCIP-aware contract wishes to make a call to another contract, and the possibility exists that the callee may implement CCIP read, the calling contract MUST catch all <code class="language-plaintext highlighter-rouge">OffchainLookup</code> errors thrown by the callee, and revert with a different error if the <code class="language-plaintext highlighter-rouge">sender</code> field of the error does not match the callee address.</p>
<p>The contract MAY choose to replace all <code class="language-plaintext highlighter-rouge">OffchainLookup</code> errors with a different error. Doing so avoids the complexity of implementing support for nested CCIP read calls, but renders them impossible.</p>
<p>Where the possibility exists that a callee implements CCIP read, a CCIP-aware contract MUST NOT allow the default solidity behaviour of bubbling up reverts from nested calls. This is to prevent the following situation:</p>
<ol>
<li>Contract A calls non-CCIP-aware contract B.</li>
<li>Contract B calls back to A.</li>
<li>In the nested call, A reverts with <code class="language-plaintext highlighter-rouge">OffchainLookup</code>.</li>
<li>Contract B does not understand CCIP read and propagates the <code class="language-plaintext highlighter-rouge">OffchainLookup</code> to its caller.</li>
<li>Contract A also propagates the <code class="language-plaintext highlighter-rouge">OffchainLookup</code> to its caller.</li>
</ol>
<p>The result of this sequence of operations would be an <code class="language-plaintext highlighter-rouge">OffchainLookup</code> that looks valid to the client, as the <code class="language-plaintext highlighter-rouge">sender</code> field matches the address of the contract that was called, but does not execute correctly, as it only completes a nested invocation.</p>
<h4 id="example-1">
<a href="#example-1" class="anchor-link"></a> Example
</h4>
<p>The code below demonstrates one way that a contract may support nested CCIP read invocations. For simplicity this is shown using Solidity’s try/catch syntax, although as of this writing it does not yet support catching custom errors.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">contract</span> <span class="n">NestedLookup</span> <span class="p">{</span>
    <span class="n">error</span> <span class="n">InvalidOperation</span><span class="p">();</span>
    <span class="n">error</span> <span class="n">OffchainLookup</span><span class="p">(</span><span class="kt">address</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">urls</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">callData</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">callbackFunction</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">extraData</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">a</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">data</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">try</span> <span class="n">target</span><span class="p">.</span><span class="n">b</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span> <span class="n">ret</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="n">OffchainLookup</span><span class="p">(</span><span class="kt">address</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">urls</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">callData</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">callbackFunction</span><span class="p">,</span> <span class="kt">bytes</span> <span class="n">extraData</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">sender</span> <span class="o">!=</span> <span class="kt">address</span><span class="p">(</span><span class="n">target</span><span class="p">))</span> <span class="p">{</span>
                <span class="nb">revert</span> <span class="n">InvalidOperation</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nb">revert</span> <span class="n">OffchainLookup</span><span class="p">(</span>
                <span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">),</span>
                <span class="n">urls</span><span class="p">,</span>
                <span class="n">callData</span><span class="p">,</span>
                <span class="n">NestedLookup</span><span class="p">.</span><span class="n">aCallback</span><span class="p">.</span><span class="nb">selector</span><span class="p">,</span>
                <span class="n">abi</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="n">target</span><span class="p">),</span> <span class="n">callbackFunction</span><span class="p">,</span> <span class="n">extraData</span><span class="p">)</span>
            <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">aCallback</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">response</span><span class="p">,</span> <span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">extraData</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="kt">address</span> <span class="n">inner</span><span class="p">,</span> <span class="kt">bytes4</span> <span class="n">innerCallbackFunction</span><span class="p">,</span> <span class="kt">bytes</span> <span class="k">memory</span> <span class="n">innerExtraData</span><span class="p">)</span> <span class="o">=</span> <span class="n">abi</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">extraData</span><span class="p">,</span> <span class="p">(</span><span class="kt">address</span><span class="p">,</span> <span class="kt">bytes4</span><span class="p">,</span> <span class="kt">bytes</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">abi</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">inner</span><span class="p">.</span><span class="nb">call</span><span class="p">(</span><span class="n">abi</span><span class="p">.</span><span class="n">encodeWithSelector</span><span class="p">(</span><span class="n">innerCallbackFunction</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">innerExtraData</span><span class="p">)),</span> <span class="p">(</span><span class="kt">bytes</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="gateway-interface">
<a href="#gateway-interface" class="anchor-link"></a> Gateway Interface
</h3>
<p>The URLs returned by a contract may be of any schema, but this specification only defines how clients should handle HTTPS URLs.</p>
<p>Given a URL template returned in an <code class="language-plaintext highlighter-rouge">OffchainLookup</code>, the URL to query is composed by replacing <code class="language-plaintext highlighter-rouge">sender</code> with the lowercase 0x-prefixed hexadecimal formatted <code class="language-plaintext highlighter-rouge">sender</code> parameter, and replacing <code class="language-plaintext highlighter-rouge">data</code> with the the 0x-prefixed hexadecimal formatted <code class="language-plaintext highlighter-rouge">callData</code> parameter.</p>
<p>For example, if a contract returns the following data in an <code class="language-plaintext highlighter-rouge">OffchainLookup</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>urls = ["https://example.com/gateway/{sender}/{data}.json"]
sender = "0xaabbccddeeaabbccddeeaabbccddeeaabbccddee"
callData = "0x00112233"
</code></pre></div></div>
<p>The request URL to query is <code class="language-plaintext highlighter-rouge">https://example.com/gateway/0xaabbccddeeaabbccddeeaabbccddeeaabbccddee/0x00112233.json</code>.</p>
<p>If the URL template contains the <code class="language-plaintext highlighter-rouge">{data}</code> substitution parameter, the client MUST send a GET request after replacing the substitution parameters as described above.</p>
<p>If the URL template does not contain the <code class="language-plaintext highlighter-rouge">{data}</code> substitution parameter, the client MUST send a POST request after replacing the substitution parameters as described above. The POST request MUST be sent with a Content-Type of <code class="language-plaintext highlighter-rouge">application/json</code>, and a payload matching the following schema:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "type": "object",
    "properties": {
        "data": {
            "type": "string",
            "description": "0x-prefixed hex string containing the `callData` from the contract"
        },
        "sender": {
            "type": "string",
            "description": "0x-prefixed hex string containing the `sender` parameter from the contract"
        }
    }
}
</code></pre></div></div>
<p>Compliant gateways MUST respond with a Content-Type of <code class="language-plaintext highlighter-rouge">application/json</code>, with the body adhering to the following JSON schema:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "type": "object",
    "properties": {
        "data": {
            "type": "string",
            "description: "0x-prefixed hex string containing the result data."
        }
    }
}
</code></pre></div></div>
<p>Unsuccessful requests MUST return the appropriate HTTP status code - for example, 404 if the <code class="language-plaintext highlighter-rouge">sender</code> address is not supported by this gateway, 400 if the <code class="language-plaintext highlighter-rouge">callData</code> is in an invalid format, 500 if the server encountered an internal error, and so forth. If the Content-Type of a 4xx or 5xx response is <code class="language-plaintext highlighter-rouge">application/json</code>, it MUST adhere to the following JSON schema:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "type": "object",
    "properties": {
        "message": {
            "type": "string",
            "description: "A human-readable error message."
        }
    }
}
</code></pre></div></div>
<h4 id="examples">
<a href="#examples" class="anchor-link"></a> Examples
</h4>
<p><strong><em>GET request</em></strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Client returned a URL template `https://example.com/gateway/{sender}/{data}.json`
# Request
curl -D - https://example.com/gateway/0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8/0xd5fa2b00.json

# Successful result
    HTTP/2 200
    content-type: application/json; charset=UTF-8
    ...
    
    {"data": "0xdeadbeefdecafbad"}

# Error result
    HTTP/2 404
    content-type: application/json; charset=UTF-8
    ...

    {"message": "Gateway address not supported."}
}
</code></pre></div></div>
<p><strong><em>POST request</em></strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Client returned a URL template `https://example.com/gateway/{sender}.json`
# Request
curl -D - -X POST -H "Content-Type: application/json" --data '{"data":"0xd5fa2b00","sender":"0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8"}' https://example.com/gateway/0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8.json

# Successful result
    HTTP/2 200
    content-type: application/json; charset=UTF-8
    ...
    
    {"data": "0xdeadbeefdecafbad"}

# Error result
    HTTP/2 404
    content-type: application/json; charset=UTF-8
    ...

    {"message": "Gateway address not supported."}
}
</code></pre></div></div>
<p>Clients MUST support both GET and POST requests. Gateways may implement either or both as needed.</p>
<h3 id="client-lookup-protocol">
<a href="#client-lookup-protocol" class="anchor-link"></a> Client Lookup Protocol
</h3>
<p>A client that supports CCIP read MUST make contract calls using the following process:</p>
<ol>
<li>Set <code class="language-plaintext highlighter-rouge">data</code> to the call data to supply to the contract, and <code class="language-plaintext highlighter-rouge">to</code> to the address of the contract to call.</li>
<li>Call the contract at address <code class="language-plaintext highlighter-rouge">to</code> function normally, supplying <code class="language-plaintext highlighter-rouge">data</code> as the input data. If the function returns a successful result, return it to the caller and stop.</li>
<li>If the function returns an error other than <code class="language-plaintext highlighter-rouge">OffchainLookup</code>, return it to the caller in the usual fashion.</li>
<li>Otherwise, decode the <code class="language-plaintext highlighter-rouge">sender</code>, <code class="language-plaintext highlighter-rouge">urls</code>, <code class="language-plaintext highlighter-rouge">callData</code>, <code class="language-plaintext highlighter-rouge">callbackFunction</code> and <code class="language-plaintext highlighter-rouge">extraData</code> arguments from the <code class="language-plaintext highlighter-rouge">OffchainLookup</code> error.</li>
<li>If the <code class="language-plaintext highlighter-rouge">sender</code> field does not match the address of the contract that was called, return an error to the caller and stop.</li>
<li>Construct a request URL by replacing <code class="language-plaintext highlighter-rouge">sender</code> with the lowercase 0x-prefixed hexadecimal formatted <code class="language-plaintext highlighter-rouge">sender</code> parameter, and replacing <code class="language-plaintext highlighter-rouge">data</code> with the the 0x-prefixed hexadecimal formatted <code class="language-plaintext highlighter-rouge">callData</code> parameter. The client may choose which URLs to try in which order, but SHOULD prioritise URLs earlier in the list over those later in the list.</li>
<li>Make an HTTP GET request to the request URL.</li>
<li>If the response code from step (5) is in the range 400-499, return an error to the caller and stop.</li>
<li>If the response code from step (5) is in the range 500-599, go back to step (5) and pick a different URL, or stop if there are no further URLs to try.</li>
<li>Otherwise, replace <code class="language-plaintext highlighter-rouge">data</code> with an ABI-encoded call to the contract function specified by the 4-byte selector <code class="language-plaintext highlighter-rouge">callbackFunction</code>, supplying the data returned from step (7) and <code class="language-plaintext highlighter-rouge">extraData</code> from step (4), and return to step (1).</li>
</ol>
<p>Clients MUST handle HTTP status codes appropriately, employing best practices for error reporting and retries.</p>
<p>Clients MUST handle HTTP 4xx and 5xx error responses that have a content type other than application/json appropriately; they MUST NOT attempt to parse the response body as JSON.</p>
<p>This protocol can result in multiple lookups being requested by the same contract. Clients MUST implement a limit on the number of lookups they permit for a single contract call, and this limit SHOULD be at least 4.</p>
<p>The lookup protocol for a client is described with the following pseudocode:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">httpcall</span><span class="p">(</span><span class="nx">urls</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">callData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">{</span><span class="na">sender</span><span class="p">:</span> <span class="nx">to</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(),</span> <span class="na">data</span><span class="p">:</span> <span class="nx">callData</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()};</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">url</span> <span class="k">of</span> <span class="nx">urls</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">queryUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\{([^</span><span class="sr">}</span><span class="se">]</span><span class="sr">*</span><span class="se">)\}</span><span class="sr">/g</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p1</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">args</span><span class="p">[</span><span class="nx">p1</span><span class="p">]);</span>
        <span class="c1">// First argument is URL to fetch, second is optional data for a POST request.</span>
        <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">queryUrl</span><span class="p">,</span> <span class="nx">url</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">{data}</span><span class="dl">'</span><span class="p">)</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">args</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">&gt;=</span> <span class="mi">400</span> <span class="o">&amp;&amp;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">&lt;=</span> <span class="mi">499</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">&lt;=</span> <span class="mi">299</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">durin_call</span><span class="p">(</span><span class="nx">provider</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="nx">provider</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">code</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">CALL_EXCEPTION</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kd">const</span> <span class="p">{</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">urls</span><span class="p">,</span> <span class="nx">callData</span><span class="p">,</span> <span class="nx">callbackFunction</span><span class="p">,</span> <span class="nx">extraData</span><span class="p">}</span> <span class="o">=</span> <span class="nx">error</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">sender</span> <span class="o">!==</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Cannot handle OffchainLookup raised inside nested call</span><span class="dl">"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">httpcall</span><span class="p">(</span><span class="nx">urls</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">callData</span><span class="p">);</span>
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">abi</span><span class="p">.</span><span class="nx">encodeWithSelector</span><span class="p">(</span><span class="nx">callbackFunction</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">extraData</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Too many CCIP read redirects</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Where:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">provider</code> is a provider object that facilitates Ethereum blockchain function calls.</li>
<li><code class="language-plaintext highlighter-rouge">to</code> is the address of the contract to call.</li>
<li><code class="language-plaintext highlighter-rouge">data</code> is the call data for the contract.</li>
</ul>
<p>If the function being called is a standard contract function, the process terminates after the original call, returning the same result as for a regular call. Otherwise, a gateway from <code class="language-plaintext highlighter-rouge">urls</code> is called with the <code class="language-plaintext highlighter-rouge">callData</code> returned by the <code class="language-plaintext highlighter-rouge">OffchainLookup</code> error, and is expected to return a valid response. The response and the <code class="language-plaintext highlighter-rouge">extraData</code> are then passed to the specified callback function. This process can be repeated if the callback function returns another <code class="language-plaintext highlighter-rouge">OffchainLookup</code> error.</p>
<h3 id="use-of-ccip-read-for-transactions">
<a href="#use-of-ccip-read-for-transactions" class="anchor-link"></a> Use of CCIP read for transactions
</h3>
<p>While the specification above is for read-only contract calls (eg, <code class="language-plaintext highlighter-rouge">eth_call</code>), it is simple to use this method for sending transactions (eg, <code class="language-plaintext highlighter-rouge">eth_sendTransaction</code> or <code class="language-plaintext highlighter-rouge">eth_sendRawTransaction</code>) that require offchain data. While ‘preflighting’ a transaction using <code class="language-plaintext highlighter-rouge">eth_estimateGas</code> or <code class="language-plaintext highlighter-rouge">eth_call</code>, a client that receives an <code class="language-plaintext highlighter-rouge">OffchainLookup</code> revert can follow the procedure described above in <a href="#client-lookup-protocol">Client lookup protocol</a>, substituting a transaction for the call in the last step. This functionality is ideal for applications such as making onchain claims supported by offchain proof data.</p>
<h3 id="glossary">
<a href="#glossary" class="anchor-link"></a> Glossary
</h3>
<ul>
<li>Client: A process, such as JavaScript executing in a web browser, or a backend service, that wishes to query a blockchain for data. The client understands how to fetch data using CCIP read.</li>
 <li>Contract: A smart contract existing on Ethereum or another blockchain.</li>
<li>Gateway: A service that answers application-specific CCIP read queries, usually over HTTPS.</li>
</ul>
