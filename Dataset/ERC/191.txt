
 Specification

We propose the following format for signed_data
0x19 &lt;1 byte version&gt; &lt;version specific data&gt; &lt;data to sign&gt;.

Version 0 has &lt;20 byte address&gt; for the version specific data, and the address is the intended validator. In the case of a Multisig wallet, that is the walletâ€™s own address .
The initial 0x19 byte is intended to ensure that the signed_data is not valid RLP

For a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.

That means that any signed_data cannot be one RLP-structure, but a 1-byte RLP payload followed by something else. Thus, any ERC-191 signed_data can never be an Ethereum transaction.
Additionally, 0x19 has been chosen because since ethereum/go-ethereum#2940 , the following is prepended before hashing in personal_sign:
"\x19Ethereum Signed Message:\n" + len(message).

Using 0x19 thus makes it possible to extend the scheme by defining a version 0x45 (E) to handle these kinds of signatures.

 Registry of version bytes




Version byte
EIP
Description




0x00
191
Data with intended validator


0x01
712
Structured data


0x45
191
personal_sign messages




 Example

The following snippet has been written in Solidity 0.5.0.
function submitTransactionPreSigned(address destination, uint value, bytes data, uint nonce, uint8 v, bytes32 r, bytes32 s)
    public
    returns (bytes32 transactionHash)
{
    // Arguments when calculating hash to validate
    // 1: byte(0x19) - the initial 0x19 byte
    // 2: byte(0) - the version byte
    // 3: this - the validator address
    // 4-7 : Application specific data
    transactionHash = keccak256(abi.encodePacked(byte(0x19),byte(0),address(this),destination, value, data, nonce));
    sender = ecrecover(transactionHash, v, r, s);
    // ...
}

