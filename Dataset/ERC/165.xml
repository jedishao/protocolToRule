<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="how-interfaces-are-identified">
<a href="#how-interfaces-are-identified" class="anchor-link"></a> How Interfaces are Identified
</h3>
<p>For this standard, an <em>interface</em> is a set of <a href="https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector">function selectors as defined by the Ethereum ABI</a>. This a subset of <a href="https://solidity.readthedocs.io/en/develop/abi-spec.html">Solidityâ€™s concept of interfaces</a> and the <code class="language-plaintext highlighter-rouge">interface</code> keyword definition which also defines return types, mutability and events.</p>
<p>We define the interface identifier as the XOR of all function selectors in the interface. This code example shows how to calculate an interface identifier:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">interface</span> <span class="n">Solidity101</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">hello</span><span class="p">()</span> <span class="k">external</span> <span class="k">pure</span><span class="p">;</span>
    <span class="k">function</span> <span class="n">world</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">external</span> <span class="k">pure</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">Selector</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">calculateSelector</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bytes4</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Solidity101</span> <span class="n">i</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">i</span><span class="p">.</span><span class="n">hello</span><span class="p">.</span><span class="nb">selector</span> <span class="o">^</span> <span class="n">i</span><span class="p">.</span><span class="n">world</span><span class="p">.</span><span class="nb">selector</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note: interfaces do not permit optional functions, therefore, the interface identity will not include them.</p>
<h3 id="how-a-contract-will-publish-the-interfaces-it-implements">
<a href="#how-a-contract-will-publish-the-interfaces-it-implements" class="anchor-link"></a> How a Contract will Publish the Interfaces it Implements
</h3>
<p>A contract that is compliant with ERC-165 shall implement the following interface (referred as <code class="language-plaintext highlighter-rouge">ERC165.sol</code>):</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">20</span><span class="p">;</span>

<span class="k">interface</span> <span class="n">ERC165</span> <span class="p">{</span>
    <span class="c1">/// @notice Query if a contract implements an interface
</span>    <span class="c1">/// @param interfaceID The interface identifier, as specified in ERC-165
</span>    <span class="c1">/// @dev Interface identification is specified in ERC-165. This function
</span>    <span class="c1">///  uses less than 30,000 gas.
</span>    <span class="c1">/// @return `true` if the contract implements `interfaceID` and
</span>    <span class="c1">///  `interfaceID` is not 0xffffffff, `false` otherwise
</span>    <span class="k">function</span> <span class="n">supportsInterface</span><span class="p">(</span><span class="kt">bytes4</span> <span class="n">interfaceID</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The interface identifier for this interface is <code class="language-plaintext highlighter-rouge">0x01ffc9a7</code>. You can calculate this by running <code class="language-plaintext highlighter-rouge">bytes4(keccak256('supportsInterface(bytes4)'));</code> or using the <code class="language-plaintext highlighter-rouge">Selector</code> contract above.</p>
<p>Therefore the implementing contract will have a <code class="language-plaintext highlighter-rouge">supportsInterface</code> function that returns:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">true</code> when <code class="language-plaintext highlighter-rouge">interfaceID</code> is <code class="language-plaintext highlighter-rouge">0x01ffc9a7</code> (EIP165 interface)</li>
<li><code class="language-plaintext highlighter-rouge">false</code> when <code class="language-plaintext highlighter-rouge">interfaceID</code> is <code class="language-plaintext highlighter-rouge">0xffffffff</code></li>
<li><code class="language-plaintext highlighter-rouge">true</code> for any other <code class="language-plaintext highlighter-rouge">interfaceID</code> this contract implements</li>
<li><code class="language-plaintext highlighter-rouge">false</code> for any other <code class="language-plaintext highlighter-rouge">interfaceID</code></li>
</ul>
<p>This function must return a bool and use at most 30,000 gas.</p>
<p>Implementation note, there are several logical ways to implement this function. Please see the example implementations and the discussion on gas usage.</p>
<h3 id="how-to-detect-if-a-contract-implements-erc-165">
<a href="#how-to-detect-if-a-contract-implements-erc-165" class="anchor-link"></a> How to Detect if a Contract Implements ERC-165
</h3>
<ol>
<li>The source contract makes a <code class="language-plaintext highlighter-rouge">STATICCALL</code> to the destination address with input data: <code class="language-plaintext highlighter-rouge">0x01ffc9a701ffc9a700000000000000000000000000000000000000000000000000000000</code> and gas 30,000. This corresponds to <code class="language-plaintext highlighter-rouge">contract.supportsInterface(0x01ffc9a7)</code>.</li>
<li>If the call fails or return false, the destination contract does not implement ERC-165.</li>
<li>If the call returns true, a second call is made with input data <code class="language-plaintext highlighter-rouge">0x01ffc9a7ffffffff00000000000000000000000000000000000000000000000000000000</code>.</li>
<li>If the second call fails or returns true, the destination contract does not implement ERC-165.</li>
<li>Otherwise it implements ERC-165.</li>
</ol>
<h3 id="how-to-detect-if-a-contract-implements-any-given-interface">
<a href="#how-to-detect-if-a-contract-implements-any-given-interface" class="anchor-link"></a> How to Detect if a Contract Implements any Given Interface
</h3>
<ol>
<li>If you are not sure if the contract implements ERC-165, use the above procedure to confirm.</li>
<li>If it does not implement ERC-165, then you will have to see what methods it uses the old-fashioned way.</li>
<li>If it implements ERC-165 then just call <code class="language-plaintext highlighter-rouge">supportsInterface(interfaceID)</code> to determine if it implements an interface you can use.</li>
</ol>
