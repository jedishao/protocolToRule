<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-3525: Semi-Fungible Token</title>
<meta property="og:title" content="EIP-3525: Semi-Fungible Token" />
<meta name="description" content="Defines a specification where EIP-721 compatible tokens with the same SLOT and different IDs are fungible." />
<meta property="og:description" content="Defines a specification where EIP-721 compatible tokens with the same SLOT and different IDs are fungible." />
<meta name="twitter:description" content="Defines a specification where EIP-721 compatible tokens with the same SLOT and different IDs are fungible." />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-3525" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-3525" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-3525: Semi-Fungible Token
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3525.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Defines a specification where EIP-721 compatible tokens with the same SLOT and different IDs are fungible.</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/will-edge">Will Wang</a>, <a href="/cdn-cgi/l/email-protection#3b56425a557b4854574d155d52555a55585e">Mike Meng</a>, <a href="https://github.com/YeeTsai">Ethan Y. Tsai</a>, <a href="/cdn-cgi/l/email-protection#3d4f445c535e55524a7d4e52514b135b54535c535e58">Ryan Chow</a>, <a href="https://github.com/Nerverwind">Zhongxin Wu</a>, <a href="https://github.com/AlvisDu">AlvisDu</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-3525-the-semi-fungible-token">https://ethereum-magicians.org/t/eip-3525-the-semi-fungible-token</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2020-12-01</td></tr>
<tr><th>Requires</th><td>
<a href="eip-20">20</a>,
<a href="eip-165">165</a>,
<a href="eip-721">721</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#eip-3525-token-receiver">EIP-3525 Token Receiver</a></li>
<li><a href="#token-manipulation">Token Manipulation</a></li>
<li><a href="#metadata">Metadata</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#metadata-generation">Metadata generation</a></li>
<li><a href="#design-decision-value-transfer-from-token-to-address">Design decision: Value transfer from token to address</a></li>
<li><a href="#design-decision-notificationacceptance-mechanism-instead-of-safe-transfer">Design decision: Notification/acceptance mechanism instead of ‘Safe Transfer’</a></li>
<li><a href="#design-decision-relationship-between-different-approval-models">Design decision: Relationship between different approval models</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#reference-implementation">Reference Implementation</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>This is a standard for semi-fungible tokens. The set of smart contract interfaces described in this document defines an <a href="/EIPS/eip-721">EIP-721</a> compatible token standard. This standard introduces an <code class="language-plaintext highlighter-rouge">&lt;ID, SLOT, VALUE&gt;</code> triple scalar model that represents the semi-fungible structure of a token. It also introduces new transfer models as well as approval models that reflect the semi-fungible nature of the tokens.</p>
<p>Token contains an EIP-721 equivalent ID property to identify itself as a universally unique entity, so that the tokens can be transferred between addresses and approved to be operated in EIP-721 compatible way.</p>
<p>Token also contains a <code class="language-plaintext highlighter-rouge">value</code> property, representing the quantitative nature of the token. The meaning of the ‘value’ property is quite like that of the ‘balance’ property of an <a href="/EIPS/eip-20">EIP-20</a> token. Each token has a ‘slot’ attribute, ensuring that the value of two tokens with the same slot be treated as fungible, adding fungibility to the value property of the tokens.</p>
<p>This EIP introduces new token transfer models for semi-fungibility, including value transfer between two tokens of the same slot and value transfer from a token to an address.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Tokenization is one of the most important trends by which to use and control digital assets in crypto. Traditionally, there have been two approaches to do so: fungible and non-fungible tokens. Fungible tokens generally use the EIP-20 standard, where every unit of an asset is identical to each other. EIP-20 is a flexible and efficient way to manipulate fungible tokens. Non-fungible tokens are predominantly EIP-721 tokens, a standard capable of distinguishing digital assets from one another based on identity.</p>
<p>However, both have significant drawbacks. For example, EIP-20 requires that users create a separate EIP-20 contract for each individual data structure or combination of customizable properties. In practice, this results in an extraordinarily large amount of EIP-20 contracts that need to be created. On the other hand, EIP-721 tokens provide no quantitative feature, significantly undercutting their computability, liquidity, and manageability. For example, if one was to create financial instruments such as bonds, insurance policy, or vesting plans using EIP-721, no standard interfaces are available for us to control the value in them, making it impossible, for example, to transfer a portion of the equity in the contract represented by the token.</p>
<p>A more intuitive and straightforward way to solve the problem is to create a semi-fungible token that has the quantitative features of EIP-20 and qualitative attributes of EIP-721. The backwards-compatibility with EIP-721 of such semi-fungible tokens would help utilize existing infrastructures already in use and lead to faster adoption.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.</p>
<p><strong>Every <a href="/EIPS/eip-3525">EIP-3525</a> compliant contract must implement the EIP-3525, EIP-721 and <a href="/EIPS/eip-165">EIP-165</a> interfaces</strong></p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="cm">/**
 * @title EIP-3525 Semi-Fungible Token Standard
 * Note: the EIP-165 identifier for this interface is 0xd5358140.
 */</span>
<span class="k">interface</span> <span class="n">IERC3525</span> <span class="cm">/* is IERC165, IERC721 */</span> <span class="p">{</span>
    <span class="cm">/**
     * @dev MUST emit when value of a token is transferred to another token with the same slot,
     *  including zero value transfers (_value == 0) as well as transfers when tokens are created
     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).
     * @param _fromTokenId The token id to transfer value from
     * @param _toTokenId The token id to transfer value to
     * @param _value The transferred value
     */</span>
    <span class="k">event</span> <span class="n">TransferValue</span><span class="p">(</span><span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_fromTokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_toTokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">);</span>

    <span class="cm">/**
     * @dev MUST emit when the approval value of a token is set or changed.
     * @param _tokenId The token to approve
     * @param _operator The operator to approve for
     * @param _value The maximum value that `_operator` is allowed to manage
     */</span>
    <span class="k">event</span> <span class="n">ApprovalValue</span><span class="p">(</span><span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_tokenId</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">_operator</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">);</span>
    
    <span class="cm">/**
     * @dev MUST emit when the slot of a token is set or changed.
     * @param _tokenId The token of which slot is set or changed
     * @param _oldSlot The previous slot of the token
     * @param _newSlot The updated slot of the token
     */</span> 
    <span class="k">event</span> <span class="n">SlotChanged</span><span class="p">(</span><span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_tokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_oldSlot</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_newSlot</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user
     *  representation of the value of a token can be calculated by dividing it by 1,000,000.
     *  Considering the compatibility with third-party wallets, this function is defined as
     *  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens.
     * @return The number of decimals for value
     */</span>
    <span class="k">function</span> <span class="n">valueDecimals</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint8</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Get the value of a token.
     * @param _tokenId The token for which to query the balance
     * @return The value of `_tokenId`
     */</span>
    <span class="k">function</span> <span class="n">balanceOf</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Get the slot of a token.
     * @param _tokenId The identifier for a token
     * @return The slot of the token
     */</span>
    <span class="k">function</span> <span class="n">slotOf</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Allow an operator to manage the value of a token, up to the `_value`.
     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved
     *  address for `_tokenId`.
     *  MUST emit the ApprovalValue event.
     * @param _tokenId The token to approve
     * @param _operator The operator to be approved
     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage
     */</span>
    <span class="k">function</span> <span class="n">approve</span><span class="p">(</span>
        <span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">_operator</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_value</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>

    <span class="cm">/**
     * @notice Get the maximum value of a token that an operator is allowed to manage.
     * @param _tokenId The token for which to query the allowance
     * @param _operator The address of an operator
     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage
     */</span>
    <span class="k">function</span> <span class="n">allowance</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_tokenId</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_operator</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Transfer value from a specified token to another specified token with the same slot.
     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been
     *  approved the whole `_fromTokenId` or part of it.
     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.
     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.
     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the
     *  operator.
     *  MUST emit `TransferValue` event.
     * @param _fromTokenId The token to transfer value from
     * @param _toTokenId The token to transfer value to
     * @param _value The transferred value
     */</span>
    <span class="k">function</span> <span class="n">transferFrom</span><span class="p">(</span>
        <span class="kt">uint256</span> <span class="n">_fromTokenId</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_toTokenId</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_value</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>


    <span class="cm">/**
     * @notice Transfer value from a specified token to an address. The caller should confirm that
     *  `_to` is capable of receiving EIP-3525 tokens.
     * @dev This function MUST create a new EIP-3525 token with the same slot for `_to`, 
     *  or find an existing token with the same slot owned by `_to`, to receive the transferred value.
     *  MUST revert if `_fromTokenId` is zero token id or does not exist.
     *  MUST revert if `_to` is zero address.
     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the
     *  operator.
     *  MUST emit `Transfer` and `TransferValue` events.
     * @param _fromTokenId The token to transfer value from
     * @param _to The address to transfer value to
     * @param _value The transferred value
     * @return ID of the token which receives the transferred value
     */</span>
    <span class="k">function</span> <span class="n">transferFrom</span><span class="p">(</span>
        <span class="kt">uint256</span> <span class="n">_fromTokenId</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">_to</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_value</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">payable</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The slot’s enumeration extension is OPTIONAL. This allows your contract to publish its full list of <code class="language-plaintext highlighter-rouge">SLOT</code>s and make them discoverable.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="cm">/**
 * @title EIP-3525 Semi-Fungible Token Standard, optional extension for slot enumeration
 * @dev Interfaces for any contract that wants to support enumeration of slots as well as tokens 
 *  with the same slot.
 * Note: the EIP-165 identifier for this interface is 0x3b741b9e.
 */</span>
<span class="k">interface</span> <span class="n">IERC3525SlotEnumerable</span> <span class="k">is</span> <span class="n">IERC3525</span> <span class="cm">/* , IERC721Enumerable */</span> <span class="p">{</span>

    <span class="cm">/**
     * @notice Get the total amount of slots stored by the contract.
     * @return The total amount of slots
     */</span>
    <span class="k">function</span> <span class="n">slotCount</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Get the slot at the specified index of all slots stored by the contract.
     * @param _index The index in the slot list
     * @return The slot at `index` of all slots.
     */</span>
    <span class="k">function</span> <span class="n">slotByIndex</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Get the total amount of tokens with the same slot.
     * @param _slot The slot to query token supply for
     * @return The total amount of tokens with the specified `_slot`
     */</span>
    <span class="k">function</span> <span class="n">tokenSupplyInSlot</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_slot</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Get the token at the specified index of all tokens with the same slot.
     * @param _slot The slot to query tokens with
     * @param _index The index in the token list of the slot
     * @return The token ID at `_index` of all tokens with `_slot`
     */</span>
    <span class="k">function</span> <span class="n">tokenInSlotByIndex</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_slot</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_index</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The slot level approval is OPTIONAL. This allows any contract that wants to support approval for slots, which allows an operator to manage one’s tokens with the same slot.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="cm">/**
 * @title EIP-3525 Semi-Fungible Token Standard, optional extension for approval of slot level
 * @dev Interfaces for any contract that wants to support approval of slot level, which allows an
 *  operator to manage one's tokens with the same slot.
 *  See https://eips.ethereum.org/EIPS/eip-3525
 * Note: the EIP-165 identifier for this interface is 0xb688be58.
 */</span>
<span class="k">interface</span> <span class="n">IERC3525SlotApprovable</span> <span class="k">is</span> <span class="n">IERC3525</span> <span class="p">{</span>
    <span class="cm">/**
     * @dev MUST emit when an operator is approved or disapproved to manage all of `_owner`'s
     *  tokens with the same slot.
     * @param _owner The address whose tokens are approved
     * @param _slot The slot to approve, all of `_owner`'s tokens with this slot are approved
     * @param _operator The operator being approved or disapproved
     * @param _approved Identify if `_operator` is approved or disapproved
     */</span>
    <span class="k">event</span> <span class="n">ApprovalForSlot</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">_slot</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">_operator</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">_approved</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Approve or disapprove an operator to manage all of `_owner`'s tokens with the
     *  specified slot.
     * @dev Caller SHOULD be `_owner` or an operator who has been authorized through
     *  `setApprovalForAll`.
     *  MUST emit ApprovalSlot event.
     * @param _owner The address that owns the EIP-3525 tokens
     * @param _slot The slot of tokens being queried approval of
     * @param _operator The address for whom to query approval
     * @param _approved Identify if `_operator` would be approved or disapproved
     */</span>
    <span class="k">function</span> <span class="n">setApprovalForSlot</span><span class="p">(</span>
        <span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_slot</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">_operator</span><span class="p">,</span>
        <span class="kt">bool</span> <span class="n">_approved</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>

    <span class="cm">/**
     * @notice Query if `_operator` is authorized to manage all of `_owner`'s tokens with the
     *  specified slot.
     * @param _owner The address that owns the EIP-3525 tokens
     * @param _slot The slot of tokens being queried approval of
     * @param _operator The address for whom to query approval
     * @return True if `_operator` is authorized to manage all of `_owner`'s tokens with `_slot`,
     *  false otherwise.
     */</span>
    <span class="k">function</span> <span class="n">isApprovedForSlot</span><span class="p">(</span>
        <span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">_slot</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">_operator</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="eip-3525-token-receiver">
<a href="#eip-3525-token-receiver" class="anchor-link"></a> EIP-3525 Token Receiver
</h3>
<p>If a smart contract wants to be informed when they receive values from other addresses, it should implement all of the functions in the <code class="language-plaintext highlighter-rouge">IERC3525Receiver</code> interface, in the implementation it can decide whether to accept or reject the transfer. See “Transfer Rules” for further detail.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="cm">/**
 * @title EIP-3525 token receiver interface
 * @dev Interface for a smart contract that wants to be informed by EIP-3525 contracts when receiving values from ANY addresses or EIP-3525 tokens.
 * Note: the EIP-165 identifier for this interface is 0x009ce20b.
 */</span>
<span class="k">interface</span> <span class="n">IERC3525Receiver</span> <span class="p">{</span>
    <span class="cm">/**
     * @notice Handle the receipt of an EIP-3525 token value.
     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the
     *  recipient contract implements this function, the EIP-3525 contract MUST call this function after a 
     *  value transfer (i.e. `transferFrom(uint256,uint256,uint256,bytes)`).
     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,
     *  uint256,bytes)'))`) if the transfer is accepted.
     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.
     * @param _operator The address which triggered the transfer
     * @param _fromTokenId The token id to transfer value from
     * @param _toTokenId The token id to transfer value to
     * @param _value The transferred value
     * @param _data Additional data with no specified format
     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))` 
     *  unless the transfer is rejected.
     */</span>
    <span class="k">function</span> <span class="n">onERC3525Received</span><span class="p">(</span><span class="kt">address</span> <span class="n">_operator</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_fromTokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_toTokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">,</span> <span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">_data</span><span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bytes4</span><span class="p">);</span>

<span class="p">}</span>
</code></pre></div></div>
<h3 id="token-manipulation">
<a href="#token-manipulation" class="anchor-link"></a> Token Manipulation
</h3>
<h4 id="scenarios">
<a href="#scenarios" class="anchor-link"></a> Scenarios
</h4>
<p><strong><em>Transfer:</em></strong></p>
<p>Besides EIP-721 compatible token transfer methods, this EIP introduces two new transfer models: value transfer from ID to ID, and value transfer from ID to address.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">transferFrom</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_fromTokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_toTokenId</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span><span class="p">;</span>
	
<span class="k">function</span> <span class="n">transferFrom</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_fromTokenId</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">toTokenId_</span><span class="p">);</span>
</code></pre></div></div>
<p>The first one allows value transfers from one token (specified by <code class="language-plaintext highlighter-rouge">_fromTokenId</code>) to another token (specified by <code class="language-plaintext highlighter-rouge">_toTokenId</code>) within the same slot, resulting in the <code class="language-plaintext highlighter-rouge">_value</code> being subtracted from the value of the source token and added to the value of the destination token;</p>
<p>The second one allows value transfers from one token (specified by <code class="language-plaintext highlighter-rouge">_fromTokenId</code>) to an address (specified by <code class="language-plaintext highlighter-rouge">_to</code>), the value is actually transferred to a token owned by the address, and the id of the destination token should be returned. Further explanation can be found in the ‘design decision’ section for this method.</p>
<h4 id="rules">
<a href="#rules" class="anchor-link"></a> Rules
</h4>
<p><strong><em>approving rules:</em></strong></p>
<p>This EIP provides four kinds of approving functions indicating different levels of approvals, which can be described as full level approval, slot level approval, token ID level approval as well as value level approval.</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">setApprovalForAll</code>, compatible with EIP-721, SHOULD indicate the full level of approval, which means that the authorized operators are capable of managing all the tokens, including their values, owned by the owner.</li>
<li><code class="language-plaintext highlighter-rouge">setApprovalForSlot</code> (optional) SHOULD indicate the slot level of approval, which means that the authorized operators are capable of managing all the tokens with the specified slot, including their values, owned by the owner.</li>
<li>The token ID level <code class="language-plaintext highlighter-rouge">approve</code> function, compatible with EIP-721, SHOULD indicate that the authorized operator is capable of managing only the specified token ID, including its value, owned by the owner.</li>
<li>The value level <code class="language-plaintext highlighter-rouge">approve</code> function, SHOULD indicate that the authorized operator is capable of managing the specified maximum value of the specified token owned by the owner.</li>
<li>For any approving function, the caller MUST be the owner or has been approved with a higher level of authority.</li>
</ul>
<p><strong><em>transferFrom rules:</em></strong></p>
<ul>
<li>
<p>The <code class="language-plaintext highlighter-rouge">transferFrom(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value)</code> function, SHOULD indicate value transfers from one token to another token, in accordance with the rules below:</p>
<ul>
<li>MUST revert unless <code class="language-plaintext highlighter-rouge">msg.sender</code> is the owner of <code class="language-plaintext highlighter-rouge">_fromTokenId</code>, an authorized operator or an operator who has been approved the whole token or at least <code class="language-plaintext highlighter-rouge">_value</code> of it.</li>
<li>MUST revert if <code class="language-plaintext highlighter-rouge">_fromTokenId</code> or <code class="language-plaintext highlighter-rouge">_toTokenId</code> is zero token id or does not exist.</li>
<li>MUST revert if slots of <code class="language-plaintext highlighter-rouge">_fromTokenId</code> and <code class="language-plaintext highlighter-rouge">_toTokenId</code> do not match.</li>
<li>MUST revert if <code class="language-plaintext highlighter-rouge">_value</code> exceeds the value of <code class="language-plaintext highlighter-rouge">_fromTokenId</code> or its allowance to the operator.</li>
<li>MUST check for the <code class="language-plaintext highlighter-rouge">onERC3525Received</code> function if the owner of _toTokenId is a smart contract, if the function exists, MUST call this function after the value transfer, MUST revert if the result is not equal to 0x009ce20b;</li>
<li>MUST emit <code class="language-plaintext highlighter-rouge">TransferValue</code> event.</li>
</ul>
</li>
<li>
<p>The <code class="language-plaintext highlighter-rouge">transferFrom(uint256 _fromTokenId, address _to, uint256 _value)</code> function, which transfers value from one token ID to an address, SHOULD follow the rule below:</p>
<ul>
<li>MUST either find a EIP-3525 token owned by the address <code class="language-plaintext highlighter-rouge">_to</code> or create a new EIP-3525 token, with the same slot of <code class="language-plaintext highlighter-rouge">_fromTokenId</code>, to receive the transferred value.</li>
<li>MUST revert unless <code class="language-plaintext highlighter-rouge">msg.sender</code> is the owner of <code class="language-plaintext highlighter-rouge">_fromTokenId</code>, an authorized operator or an operator who has been approved the whole token or at least <code class="language-plaintext highlighter-rouge">_value</code> of it.</li>
<li>MUST revert if <code class="language-plaintext highlighter-rouge">_fromTokenId</code> is zero token id or does not exist.</li>
<li>MUST revert if <code class="language-plaintext highlighter-rouge">_to</code> is zero address.</li>
<li>MUST revert if <code class="language-plaintext highlighter-rouge">_value</code> exceeds the value of <code class="language-plaintext highlighter-rouge">_fromTokenId</code> or its allowance to the operator.</li>
<li>MUST check for the <code class="language-plaintext highlighter-rouge">onERC3525Received</code> function if the _to address is a smart contract, if the function exists, MUST call this function after the value transfer, MUST revert if the result is not equal to 0x009ce20b;</li>
<li>MUST emit <code class="language-plaintext highlighter-rouge">Transfer</code> and <code class="language-plaintext highlighter-rouge">TransferValue</code> events.</li>
</ul>
</li>
</ul>
<h3 id="metadata">
<a href="#metadata" class="anchor-link"></a> Metadata
</h3>
<h4 id="metadata-extensions">
<a href="#metadata-extensions" class="anchor-link"></a> Metadata Extensions
</h4>
<p>EIP-3525 metadata extensions are compatible EIP-721 metadata extensions.</p>
<p>This optional interface can be identified with the EIP-165 Standard Interface Detection.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="cm">/**
 * @title EIP-3525 Semi-Fungible Token Standard, optional extension for metadata
 * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier
 *  (URI) for the EIP-3525 contract as well as a specified slot. 
 *  Because of the higher reliability of data stored in smart contracts compared to data stored in 
 *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and 
 *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing 
 *  to any resource stored in a centralized system. 
 *  See https://eips.ethereum.org/EIPS/eip-3525
 * Note: the EIP-165 identifier for this interface is 0xe1600902.
 */</span>
<span class="k">interface</span> <span class="n">IERC3525Metadata</span> <span class="k">is</span>
    <span class="n">IERC3525</span> <span class="cm">/* , IERC721Metadata */</span>
<span class="p">{</span>
    <span class="cm">/**
     * @notice Returns the Uniform Resource Identifier (URI) for the current EIP-3525 contract.
     * @dev This function SHOULD return the URI for this contract in JSON format, starting with
     *  header `data:application/json;`.
     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.
     * @return The JSON formatted URI of the current EIP-3525 contract
     */</span>
    <span class="k">function</span> <span class="n">contractURI</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">);</span>

    <span class="cm">/**
     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.
     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header
     *  `data:application/json;`.
     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.
     * @return The JSON formatted URI of `_slot`
     */</span>
    <span class="k">function</span> <span class="n">slotURI</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_slot</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="eip-3525-metadata-uri-json-schema">
<a href="#eip-3525-metadata-uri-json-schema" class="anchor-link"></a> EIP-3525 Metadata URI JSON Schema
</h4>
<p>This is the “EIP-3525 Metadata JSON Schema for <code class="language-plaintext highlighter-rouge">contractURI()</code>” referenced above.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Contract Metadata"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Contract Name"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Describes the contract"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Optional. Either a base64 encoded imgae data or a URI pointing to a resource with mime type image/* representing what this contract represents."</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"external_link"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Optional. A URI pointing to an external resource."</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"valueDecimals"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"integer"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The number of decimal places that the balance should display - e.g. 18, means to divide the token value by 1000000000000000000 to get its user representation."</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>This is the “EIP-3525 Metadata JSON Schema for <code class="language-plaintext highlighter-rouge">slotURI(uint)</code>” referenced above.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Slot Metadata"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Identifies the asset category to which this slot represents"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Describes the asset category to which this slot represents"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Optional. Either a base64 encoded imgae data or a URI pointing to a resource with mime type image/* representing the asset category to which this slot represents."</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"array"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Each item of `properties` SHOULD be organized in object format, including name, description, value, order (optional), display_type (optional), etc."</span><span class="w">
      </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The name of this property."</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Describes this property."</span><span class="w">
          </span><span class="p">}</span><span class="w">
          </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The value of this property, which may be a string or a number."</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="nl">"is_intrinsic"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"boolean"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"According to the definition of `slot`, one of the best practice to generate the value of a slot is utilizing the `keccak256` algorithm to calculate the hash value of multi properties. In this scenario, the `properties` field should contain all the properties that are used to calculate the value of `slot`, and if a property is used in the calculation, is_intrinsic must be TRUE."</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="nl">"order"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"integer"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Optional, related to the value of is_intrinsic. If is_intrinsic is TRUE, it must be the order of this property appeared in the calculation method of the slot."</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="nl">"display_type"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Optional. Specifies in what form this property should be displayed."</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>This is the “EIP-3525 Metadata JSON Schema for <code class="language-plaintext highlighter-rouge">tokenURI(uint)</code>” referenced above.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Token Metadata"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Identifies the asset to which this token represents"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Describes the asset to which this token represents"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Either a base64 encoded imgae data or a URI pointing to a resource with mime type image/* representing the asset to which this token represents."</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"integer"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"THe value held by this token."</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"slot"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"integer"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The id of the slot that this token belongs to."</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Arbitrary properties. Values may be strings, numbers, objects or arrays. Optional, you can use the same schema as the properties section of EIP-3525 Metadata JSON Schema for slotURI(uint) if you need a better description attribute."</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<h3 id="metadata-generation">
<a href="#metadata-generation" class="anchor-link"></a> Metadata generation
</h3>
<p>This token standard is designed to represent semi-fungible assets, which are most suited for financial instruments rather than collectibles or in-game items. For maximum transparency and safety of digital assets, we strongly recommend that all implementations should generate metadata directly from contract code rather than giving out an off-chain server URL.</p>
<h3 id="design-decision-value-transfer-from-token-to-address">
<a href="#design-decision-value-transfer-from-token-to-address" class="anchor-link"></a> Design decision: Value transfer from token to address
</h3>
<p>The ‘value’ of a token is a property of the token and is not linked to an address, so to transfer the value to an address would be actually transferring it to a token owned by that address, not the address itself.</p>
<p>From the implementation perspective, the process of transferring values from token to address could be done as follows: (1) create a new token for the recipient’s address, (2) transfer the value to the new token from the ‘source token’. So that this method is not fully independent from the ID-to-ID transfer method, and can be viewed as syntactic sugar that wraps the process described above.</p>
<p>In a special case, if the destination address owns one or more tokens with the same slot value as the source token, this method will have an alternative implementation as follows: (1) find one token owned by the address with the same slot value of the source token, (2) transfer the value to the found token.</p>
<p>Both implementations described above should be treated as compliant with this standard.</p>
<p>The purpose of maintaining id-to-address transfer function is to maximize the compatibility with most wallet apps, since for most of the token standards, the destination of token transfer are addresses. This syntactic wrapping will help wallet apps easily implement the value transfer function from a token to any address.</p>
<h3 id="design-decision-notificationacceptance-mechanism-instead-of-safe-transfer">
<a href="#design-decision-notificationacceptance-mechanism-instead-of-safe-transfer" class="anchor-link"></a> Design decision: Notification/acceptance mechanism instead of ‘Safe Transfer’
</h3>
<p>EIP-721 and some later token standards introduced ‘Safe Transfer’ model, for better control of the ‘safety’ when transferring tokens, this mechanism leaves the choice of different transfer mode (safe/unsafe) to the sender, and may cause some potential problem:</p>
<ol>
<li>In most situation the sender don’t know how to choose between two kinds of transfer methods (safe/unsafe);</li>
<li>If the sender calls the <code class="language-plaintext highlighter-rouge">safeTransferFrom</code> method, the transfer may fail when the recipient contract didn’t implements the callback function, even if that contract can receive and manipulate the token with no problem.</li>
</ol>
<p>This EIP defines a simple ‘Check, Notify and Response’ model for better flexibility as well as simplicity:</p>
<ol>
<li>No extra <code class="language-plaintext highlighter-rouge">safeTransferFrom</code> methods are needed, all callers only need to call one kind of transfer;</li>
<li>All EIP-3525 contracts need to MUST check for the existence of <code class="language-plaintext highlighter-rouge">onERC3525Received</code> on the recipient contract and call the function when it exists;</li>
<li>Any smart contract can implement <code class="language-plaintext highlighter-rouge">onERC3525Received</code> function for purpose of being notified after receiving values, in this function it can return certain pre-defined value to accept the transfer, or any other value to reject.</li>
</ol>
<p>There is a special case for this notification/acceptance mechanism, since EIP-3525 allow value transfer from an address to itself, so that when a smart contract which implements <code class="language-plaintext highlighter-rouge">onERC3525Received</code> transfers value to itself, this function will also be called. So that the contract is responsible to choose different rules of acceptance between self-value-transfer and receiving value from other addresses.</p>
<h3 id="design-decision-relationship-between-different-approval-models">
<a href="#design-decision-relationship-between-different-approval-models" class="anchor-link"></a> Design decision: Relationship between different approval models
</h3>
<p>For semantic compatibility with EIP-721 as well as the flexibility of value manipulation of tokens, we decided to define the relationships between some of the levels of approval like that:</p>
<ol>
<li>Approval of an id will lead to the ability to partially transfer values from this id by the approved operator, this will simplify the value approval for an id. However, the approval of total values in a token should not lead to the ability to transfer the token entity by the approved operator.</li>
<li><code class="language-plaintext highlighter-rouge">setApprovalForAll</code> will lead to the ability to partially transfer values from any token, as well as the ability to approve partial transfer of values from any token to a third party, this will simplify the value transfer and approval of all tokens owned by an address.</li>
</ol>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>As mentioned in the beginning, this EIP is backward compatible with EIP-721.</p>
<h2 id="reference-implementation">
<a href="#reference-implementation" class="anchor-link"></a> Reference Implementation
</h2>
<ul>
<li><a href="/assets/eip-3525/contracts/ERC3525.sol">EIP-3525 implementation</a></li>
</ul>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>The value level approval and slot level approval(optional) is isolated from EIP-721 approval models, so that approving value should not affect EIP-721 level approvals, implementations of this EIP must obey this principle.</p>
<p>Since this EIP is EIP-721 compatible, any wallets and smart contracts that can hold and manipulate standard EIP-721 tokens will have no risks of asset loss for EIP-3525 tokens.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/will-edge">Will Wang</a>, <a href="/cdn-cgi/l/email-protection#5934203837192a36352f773f303738373a3c">Mike Meng</a>, <a href="https://github.com/YeeTsai">Ethan Y. Tsai</a>, <a href="/cdn-cgi/l/email-protection#f18388909f92999e86b1829e9d87df97989f909f9294">Ryan Chow</a>, <a href="https://github.com/Nerverwind">Zhongxin Wu</a>, <a href="https://github.com/AlvisDu">AlvisDu</a>, "EIP-3525: Semi-Fungible Token," <em>Ethereum Improvement Proposals</em>, no. 3525, December 2020. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-3525.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-3525: Semi-Fungible Token",
    "author": "Will Wang (@will-edge), Mike Meng <myan@solv.finance>, Ethan Y. Tsai (@YeeTsai), Ryan Chow <ryanchow@solv.finance>, Zhongxin Wu (@Nerverwind), AlvisDu (@AlvisDu)",
    "name": "EIP-3525: Semi-Fungible Token",
    "dateCreated": "2020-12-01",
    "datePublished": "2020-12-01",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-3525-the-semi-fungible-token",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2020"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
