<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-1829: Precompile for Elliptic Curve Linear Combinations</title>
<meta property="og:title" content="EIP-1829: Precompile for Elliptic Curve Linear Combinations" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-1829" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-1829" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
üöß This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-1829: Precompile for Elliptic Curve Linear Combinations
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1829.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="/cdn-cgi/l/email-protection#c89aadaba5a788f8b0e6a7baaf">Remco Bloemen</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/ewasm-precompile-for-general-elliptic-curve-math/2581">https://ethereum-magicians.org/t/ewasm-precompile-for-general-elliptic-curve-math/2581</a></td></tr>
<tr><th>Status</th><td>Stagnant

</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2019-03-06</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#precompile-for-elliptic-curve-linear-combinations">Precompile for Elliptic Curve Linear Combinations</a>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#gas-cost">Gas cost</a></li>
<li><a href="#encoding-of-points">Encoding of points</a></li>
<li><a href="#special-cases">Special cases</a></li>
<li><a href="#edge-cases">Edge cases</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#implementation">Implementation</a></li>
<li><a href="#references">References</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="precompile-for-elliptic-curve-linear-combinations">
<a href="#precompile-for-elliptic-curve-linear-combinations" class="anchor-link"></a> Precompile for Elliptic Curve Linear Combinations
</h1>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>Currently the EVM only supports <em>secp256k1</em> in a limited way through <code class="language-plaintext highlighter-rouge">ecrecover</code> and <em>altbn128</em> through two pre-compiles. There are draft proposals to add more curves. There are many more elliptic curve that have useful application for integration with existing systems or newly developed curves for zero-knowledge proofs.</p>
<p>This EIP adds a precompile that allows whole classes of curves to be used.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>A precompile that takes a curve and computes a linear combination of curve points.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>Given integers <code class="language-plaintext highlighter-rouge">m, Œ±</code> and <code class="language-plaintext highlighter-rouge">Œ≤</code>, scalars <code class="language-plaintext highlighter-rouge">s_i</code>, and curve points <code class="language-plaintext highlighter-rouge">A_i</code> construct the elliptic curve</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y¬≤ = x¬≥ + Œ± ‚ãÖ x + Œ≤  mod  m
</code></pre></div></div>
<p>and compute the following</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C = s‚ÇÄ ‚ãÖ A‚ÇÄ + s‚ÇÅ ‚ãÖ A‚ÇÅ + ‚ãØ + s_n ‚ãÖ A_n
</code></pre></div></div>
<p>aka <em>linear combination</em>, <em>inner product</em>, <em>multi-multiplication</em> or even <em>multi-exponentiation</em>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(Cx, Cy) := ecmul(m, Œ±, Œ≤,  s0, Ax0, As0, s1, Ax1, As1, ...)
</code></pre></div></div>
<h3 id="gas-cost">
<a href="#gas-cost" class="anchor-link"></a> Gas cost
</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BASE_GAS = ...
ADD_GAS  = ...
MUL_GAS  = ...
</code></pre></div></div>
<p>The total gas cost is <code class="language-plaintext highlighter-rouge">BASE_GAS</code> plus <code class="language-plaintext highlighter-rouge">ADD_GAS</code> for each <code class="language-plaintext highlighter-rouge">s_i</code> that is <code class="language-plaintext highlighter-rouge">1</code> and <code class="language-plaintext highlighter-rouge">MUL_GAS</code> for each <code class="language-plaintext highlighter-rouge">s_i &gt; 1</code> (<code class="language-plaintext highlighter-rouge">s_i = 0</code> is free).</p>
<h3 id="encoding-of-points">
<a href="#encoding-of-points" class="anchor-link"></a> Encoding of points
</h3>
<p>Encode as <code class="language-plaintext highlighter-rouge">(x, y')</code> where <code class="language-plaintext highlighter-rouge">s</code> indicates whether <code class="language-plaintext highlighter-rouge">y</code> or <code class="language-plaintext highlighter-rouge">-y</code> is to be taken. It follows SEC 1 v 1.9 2.3.4, except uncompressed points (<code class="language-plaintext highlighter-rouge">y' = 0x04</code>) are not supported.</p>
<table>
<thead>
<tr>
<th><code class="language-plaintext highlighter-rouge">y'</code></th>
<th><code class="language-plaintext highlighter-rouge">(x, y)</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code class="language-plaintext highlighter-rouge">0x00</code></td>
<td>Point at infinity</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">0x02</code></td>
<td>Solution with <code class="language-plaintext highlighter-rouge">y</code> even</td>
</tr>
<tr>
<td><code class="language-plaintext highlighter-rouge">0x03</code></td>
<td>Solution with <code class="language-plaintext highlighter-rouge">y</code> odd</td>
</tr>
</tbody>
</table>
<p>Conversion from affine coordinates to compressed coordinates is trivial: <code class="language-plaintext highlighter-rouge">y' = 0x02 | (y &amp; 0x01)</code>.</p>
<h3 id="special-cases">
<a href="#special-cases" class="anchor-link"></a> Special cases
</h3>
<p><strong>Coordinate recovery.</strong> Set <code class="language-plaintext highlighter-rouge">s‚ÇÄ = 1</code>. The output will be the recovered coordinates of <code class="language-plaintext highlighter-rouge">A‚ÇÄ</code>.</p>
<p><strong>On-curve checking.</strong> Do coordinate recovery and compare <code class="language-plaintext highlighter-rouge">y</code> coordinate.</p>
<p><strong>Addition.</strong> Set <code class="language-plaintext highlighter-rouge">s‚ÇÄ = s‚ÇÅ = 1</code>, the output will be <code class="language-plaintext highlighter-rouge">A‚ÇÄ + A‚ÇÅ</code>.</p>
<p><strong>Doubling.</strong> Set <code class="language-plaintext highlighter-rouge">s‚ÇÄ = 2</code>. The output will be <code class="language-plaintext highlighter-rouge">2 ‚ãÖ A‚ÇÄ</code>. (Note: under current gas model this may be more costly than self-addition!)</p>
<p><strong>Scalar multiplication.</strong> Set only <code class="language-plaintext highlighter-rouge">s‚ÇÄ</code> and <code class="language-plaintext highlighter-rouge">A‚ÇÄ</code>.</p>
<p><strong>Modular square root.</strong> Set <code class="language-plaintext highlighter-rouge">Œ± = s‚ÇÄ = A = 0</code> the output will have <code class="language-plaintext highlighter-rouge">Cy¬≤ = Œ≤ mod m</code>.</p>
<h3 id="edge-cases">
<a href="#edge-cases" class="anchor-link"></a> Edge cases
</h3>
<ul>
<li>Non-prime moduli or too small modulus</li>
<li>Field elements larger than modulus</li>
<li>Curve has singular points (<code class="language-plaintext highlighter-rouge">4 Œ±¬≥ + 27 Œ≤¬≤ = 0</code>)</li>
<li>Invalid sign bytes</li>
<li>x coordinate not on curve</li>
<li>Returning the point at infinity</li>
<li>(Please add if you spot more)</li>
</ul>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p><strong>Generic Field and Curve.</strong> Many important optimizations are independent of the field and curve used. Some missed specific optimizations are:</p>
<ul>
<li>Reductions specific to the binary structure of the field prime.</li>
<li>Precomputation of Montgomery factors.</li>
<li>Precomputation of multiples of certain popular points like the generator.</li>
<li>Special point addition/doubling <a href="https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html">formulas</a> for <code class="language-plaintext highlighter-rouge">Œ± = -3</code>, <code class="language-plaintext highlighter-rouge">Œ± = -1</code>, <code class="language-plaintext highlighter-rouge">Œ± = 0</code>, <code class="language-plaintext highlighter-rouge">Œ≤ = 0</code>.</li>
</ul>
<p>TODO: The special cases for <code class="language-plaintext highlighter-rouge">Œ±</code> and <code class="language-plaintext highlighter-rouge">Œ≤</code> might be worth implementing and offered a gas discount.</p>
<p><strong>Compressed Coordinates.</strong> Compressed coordinates allow contract to work with only <code class="language-plaintext highlighter-rouge">x</code> coordinates and sign bytes. It also prevents errors around points not being on-curve. Conversion to compressed coordinates is trivial.</p>
<p><strong>Linear Combination.</strong> We could instead have a simple multiply <code class="language-plaintext highlighter-rouge">C = r ‚ãÖ A</code>. In this case we would need a separate pre-compile for addition. In addition, a linear combination allows for optimizations that like Shamir‚Äôs trick that are not available in a single scalar multiplication. ECDSA requires <code class="language-plaintext highlighter-rouge">s‚ÇÄ ‚ãÖ A‚ÇÄ + s‚ÇÅ ‚ãÖ A‚ÇÅ</code> and would benefit from this.</p>
<p>The BN254 (aka alt_bn8) multiplication operation introduced by the <a href="/EIPS/eip-196">EIP-196</a> precompile only handles a single scalar multiplication. The missed performance is such that for two or more points it is cheaper to use EVM, as practically demonstrated by <a href="https://medium.com/aztec-protocol/huffing-for-crypto-with-weierstrudel-9c9568c06901">Weierstrudel</a>.</p>
<p><strong>Variable Time Math.</strong> When called during a transaction, there is no assumption of privacy and no mitigations for side-channel attacks are necessary.</p>
<p><strong>Prime Fields.</strong> This EIP is for fields of large characteristic. It does not cover Binary fields and other fields of non-prime characteristic.</p>
<p><strong>256-bit modulus.</strong> This EIP is for field moduli less than <code class="language-plaintext highlighter-rouge">2^{256}</code>. This covers many of the popular curves while still having all parameters fit in a single EVM word.</p>
<p>TODO: Consider a double-word version. 512 bits would cover all known curves except E-521. In particular it will cover the NIST P-384 curve used by the Estonian e-Identity and the BLS12-381 curve used by <a href="https://z.cash/blog/new-snark-curve/">ZCash Sappling</a>.</p>
<p><strong>Short Weierstrass Curves.</strong> This EIP is for fields specified in short Weierstrass form. While any curve can be converted to short Weierstrass form through a <a href="https://safecurves.cr.yp.to/equation.html">substitution of variables</a>, this misses out on the performance advantages of those specific forms.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<h2 id="implementation">
<a href="#implementation" class="anchor-link"></a> Implementation
</h2>
<p>There will be a reference implementation in Rust based on the existing libraries (in particular those by ZCash and The Matter Inc.).</p>
<p>The reference implementation will be production grade and compile to a native library with a C api and a webassembly version. Node developers are encouraged to use the reference implementation and can use either the rust library, the native C bindings or the webassembly module. Node developers can of course always decide to implement their own.</p>
<h2 id="references">
<a href="#references" class="anchor-link"></a> References
</h2>
<p>This EIP overlaps in scope with</p>
<ul>
<li><a href="/EIPS/eip-196">EIP-196</a>: ecadd, ecmul for altbn128</li>
<li><a href="https://github.com/ethereum/EIPs/issues/603">EIP issue 603</a>: ecadd, ecmul for SECP256k1.</li>
<li><a href="/EIPS/eip-665">EIP-665</a>: ECDSA verify for ED25519.</li>
<li><a href="/EIPS/eip-1108">EIP-1108</a>: Optimize ecadd and ecmul for altbn128.</li>
</ul>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="/cdn-cgi/l/email-protection#702215131d1f3040085e1f0217">Remco Bloemen</a>, "EIP-1829: Precompile for Elliptic Curve Linear Combinations [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 1829, March 2019. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1829.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-1829: Precompile for Elliptic Curve Linear Combinations [DRAFT]",
    "author": "Remco Bloemen <Recmo@0x.org>",
    "name": "EIP-1829: Precompile for Elliptic Curve Linear Combinations [DRAFT]",
    "dateCreated": "2019-03-06",
    "datePublished": "2019-03-06",

    "discussionUrl": "https://ethereum-magicians.org/t/ewasm-precompile-for-general-elliptic-curve-math/2581",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2019"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
