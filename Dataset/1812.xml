<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-1812: Ethereum Verifiable Claims</title>
<meta property="og:title" content="EIP-1812: Ethereum Verifiable Claims" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-1812" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-1812" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
🚧 This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-1812: Ethereum Verifiable Claims
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1812.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/pelle">Pelle Braendgaard</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/erc-1812-ethereum-verifiable-claims/2814">https://ethereum-magicians.org/t/erc-1812-ethereum-verifiable-claims/2814</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2019-03-03</td></tr>
<tr><th>Requires</th><td>
<a href="eip-712">712</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#ethereum-verifiable-claims">Ethereum Verifiable Claims</a>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#prior-art">Prior Art</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#claims">Claims</a></li>
<li><a href="#claims-data-structure">Claims data structure</a></li>
<li><a href="#presenting-a-verifiable-claim">Presenting a Verifiable Claim</a></li>
<li><a href="#key-delegation">Key Delegation</a></li>
<li><a href="#claim-types">Claim Types</a></li>
<li><a href="#value-claims">Value Claims</a></li>
<li><a href="#hashed-claims">Hashed Claims</a></li>
<li><a href="#eip-712-domain">EIP 712 Domain</a></li>
<li><a href="#revocation">Revocation</a></li>
<li><a href="#creation-of-verifiable-claims-domains">Creation of Verifiable Claims Domains</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#rationale-for-using-not-using-a-single-eip-712-domain">Rationale for using not using a single EIP 712 Domain</a></li>
</ul>
</li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="ethereum-verifiable-claims">
<a href="#ethereum-verifiable-claims" class="anchor-link"></a> Ethereum Verifiable Claims
</h1>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>Reusable Verifiable Claims using <a href="/EIPS/eip-712">EIP 712 Signed Typed Data</a>.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>A new method for Off-Chain Verifiable Claims built on <a href="/EIPS/eip-712">EIP-712</a>. These Claims can be issued by any user with a EIP 712 compatible web3 provider. Claims can be stored off chain and verified on-chain by Solidity Smart Contracts, State Channel Implementations or off-chain libraries.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Reusable Off-Chain Verifiable Claims provide an important piece of integrating smart contracts with real world organizational requirements such as meeting regulatory requirements such as KYC, GDPR, Accredited Investor rules etc.</p>
<p><a href="https://github.com/ethereum/EIPs/issues/735">ERC-735</a> and <a href="https://github.com/ethereum/EIPs/issues/780">ERC-780</a> provide methods of making claims that live on chain. This is useful for some particular use cases, where some claim about an address must be verified on chain.</p>
<p>In most cases though it is both dangerous and in some cases illegal (according to EU GDPR rules for example) to record Identity Claims containing Personal Identifying Information (PII) on an immutable public database such as the Ethereum blockchain.</p>
<p>The W3C <a href="https://www.w3.org/TR/verifiable-claims-data-model/">Verifiable Claims Data Model and Representations</a> as well as uPorts <a href="https://developer.uport.me/messages/verification">Verification Message Spec</a> are proposed off-chain solutions.</p>
<p>While built on industry standards such as <a href="https://json-ld.org">JSON-LD</a> and <a href="https://jwt.io">JWT</a> neither of them are easy to integrate with the Ethereum ecosystem.</p>
<p><a href="/EIPS/eip-712">EIP-712</a> introduces a new method of signing off chain Identity data. This provides both a data format based on Solidity ABI encoding that can easily be parsed on-chain an a new JSON-RPC call that is easily supported by existing Ethereum wallets and Web3 clients.</p>
<p>This format allows reusable off-chain Verifiable Claims to be cheaply issued to users, who can present them when needed.</p>
<h2 id="prior-art">
<a href="#prior-art" class="anchor-link"></a> Prior Art
</h2>
<p>Verified Identity Claims such as those proposed by <a href="https://developer.uport.me/messages/verification">uPort</a> and <a href="https://www.w3.org/2017/vc/WG/">W3C Verifiable Claims Working Group</a> form an important part of building up reusable identity claims.</p>
<p><a href="https://github.com/ethereum/EIPs/issues/735">ERC-735</a> and <a href="https://github.com/ethereum/EIPs/issues/780">ERC-780</a> provide on-chain storage and lookups of Verifiable Claims.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="claims">
<a href="#claims" class="anchor-link"></a> Claims
</h3>
<p>Claims can be generalized like this:</p>
<blockquote>
<p>Issuer makes the claim that Subject is something or has some attribute and value.</p>
</blockquote>
<p>Claims should be deterministic, in that the same claim signed multiple times by the same signer.</p>
<h3 id="claims-data-structure">
<a href="#claims-data-structure" class="anchor-link"></a> Claims data structure
</h3>
<p>Each claim should be typed based on its specific use case, which EIP 712 lets us do effortlessly. But there are 3 minimal attributes required of the claims structure.</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">subject</code> the subject of the claim as an <code class="language-plaintext highlighter-rouge">address</code> (who the claim is about)</li>
<li><code class="language-plaintext highlighter-rouge">validFrom</code> the time in seconds encoded as a <code class="language-plaintext highlighter-rouge">uint256</code> of start of validity of claim. In most cases this would be the time of issuance, but some claims may be valid in the future or past.</li>
<li><code class="language-plaintext highlighter-rouge">validTo</code> the time in seconds encoded as a <code class="language-plaintext highlighter-rouge">uint256</code> of when the validity of the claim expires. If you intend for the claim not to expire use <code class="language-plaintext highlighter-rouge">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</code>.</li>
</ul>
<p>The basic minimal claim data structure as a Solidity struct:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="p">[</span><span class="n">CLAIM</span> <span class="n">TYPE</span><span class="p">]</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The CLAIM TYPE is the actual name of the claim. While not required, in most cases use the taxonomy developed by <a href="https://schema.org/docs/full.html">schema.org</a> which is also commonly used in other Verifiable Claims formats.</p>
<p>Example claim that issuer knows a subject:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Know</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="presenting-a-verifiable-claim">
<a href="#presenting-a-verifiable-claim" class="anchor-link"></a> Presenting a Verifiable Claim
</h3>
<h4 id="verifying-contract">
<a href="#verifying-contract" class="anchor-link"></a> Verifying Contract
</h4>
<p>When defining Verifiable Claims formats a Verifying Contract should be created with a public <code class="language-plaintext highlighter-rouge">verify()</code> view function. This makes it very easy for other smart contracts to verify a claim correctly.</p>
<p>It also provides a convenient interface for web3 and state channel apps to verify claims securely.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">verifyIssuer</span><span class="p">(</span><span class="n">Know</span> <span class="k">memory</span> <span class="n">claim</span><span class="p">,</span> <span class="kt">uint8</span> <span class="n">v</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">r</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">s</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">bytes32</span> <span class="n">digest</span> <span class="o">=</span> <span class="nb">keccak256</span><span class="p">(</span>
	  <span class="n">abi</span><span class="p">.</span><span class="n">encodePacked</span><span class="p">(</span>
	    <span class="s">"</span><span class="se">\x19\x01</span><span class="s">"</span><span class="p">,</span>
	    <span class="n">DOMAIN_SEPARATOR</span><span class="p">,</span>
	    <span class="n">hash</span><span class="p">(</span><span class="n">claim</span><span class="p">)</span>
	  <span class="p">)</span>
	<span class="p">);</span>
	<span class="nb">require</span><span class="p">(</span>
		<span class="p">(</span><span class="n">claim</span><span class="p">.</span><span class="n">validFrom</span> <span class="o">&gt;=</span> <span class="n">block</span><span class="p">.</span><span class="n">timestamp</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">timestamp</span> <span class="o">&lt;</span> <span class="n">claim</span><span class="p">.</span><span class="n">validTo</span><span class="p">)</span>
<span class="p">,</span> <span class="s">"invalid issuance timestamps"</span><span class="p">);</span>
	<span class="k">return</span> <span class="nb">ecrecover</span><span class="p">(</span><span class="n">digest</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="calling-a-smartcontract-function">
<a href="#calling-a-smartcontract-function" class="anchor-link"></a> Calling a SmartContract function
</h4>
<p>Verifiable Claims can be presented to a solidity function call as it’s struct together with the <code class="language-plaintext highlighter-rouge">v</code>, <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code> signature components.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">vouch</span><span class="p">(</span><span class="n">Know</span> <span class="k">memory</span> <span class="n">claim</span><span class="p">,</span> <span class="kt">uint8</span> <span class="n">v</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">r</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">s</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span> <span class="o">=</span> <span class="n">verifier</span><span class="p">.</span><span class="n">verifyIssuer</span><span class="p">(</span><span class="n">claim</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
	<span class="nb">require</span><span class="p">(</span><span class="n">issuer</span> <span class="o">!==</span> <span class="s">'0x0'</span><span class="p">);</span>
	<span class="n">knows</span><span class="p">[</span><span class="n">issuer</span><span class="p">][</span><span class="n">claim</span><span class="p">.</span><span class="n">subject</span><span class="p">]</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">number</span><span class="p">;</span>
	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="embedding-a-verifiable-claim-in-another-signed-typed-data--structure">
<a href="#embedding-a-verifiable-claim-in-another-signed-typed-data--structure" class="anchor-link"></a> Embedding a Verifiable Claim in another Signed Typed Data structure
</h4>
<p>The Claim struct should be embedded in another struct together with the <code class="language-plaintext highlighter-rouge">v</code>, <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code> signature parameters.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Know</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">VerifiableReference</span> <span class="p">{</span>
	<span class="n">Know</span> <span class="n">delegate</span><span class="p">;</span>
	<span class="kt">uint8</span> <span class="n">v</span><span class="p">;</span>
	<span class="kt">bytes32</span> <span class="n">r</span><span class="p">;</span>
	<span class="kt">bytes32</span> <span class="n">s</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Introduction</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">recipient</span><span class="p">;</span>
	<span class="n">VerifiableReference</span> <span class="n">issuer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Each Verifiable Claim should be individually verified together with the parent Signed Typed Data structure.</p>
<p>Verifiable Claims issued to different EIP 712 Domains can be embedded within each other.</p>
<h4 id="state-channels">
<a href="#state-channels" class="anchor-link"></a> State Channels
</h4>
<p>This proposal will not show how to use Eth Verifiable Claims as part of a specific State Channel method.</p>
<p>Any State Channel based on EIP712 should be able to include the embeddable Verifiable Claims as part of its protocol. This could be useful for exchanging private Identity Claims between the parties for regulatory reasons, while ultimately not posting them to the blockchain on conclusion of a channel.</p>
<h3 id="key-delegation">
<a href="#key-delegation" class="anchor-link"></a> Key Delegation
</h3>
<p>In most simple cases the issuer of a Claim is the signer of the data. There are cases however where signing should be delegated to an intermediary key.</p>
<p>KeyDelegation can be used to implement off chain signing for smart contract based addresses, server side key rotation as well as employee permissions in complex business use cases.</p>
<h4 id="erc1056-signing-delegation">
<a href="#erc1056-signing-delegation" class="anchor-link"></a> ERC1056 Signing Delegation
</h4>
<p><a href="/EIPS/eip-1056">ERC-1056</a> provides a method for addresses to assign delegate signers. One of the primary use cases for this is that a smart contract can allow a key pair to sign on its behalf for a certain period. It also allows server based issuance tools to institute key rotation.</p>
<p>To support this an additional <code class="language-plaintext highlighter-rouge">issuer</code> attribute can be added to the Claim Type struct. In this case the verification code should lookup the EthereumDIDRegistry to see if the signer of the data is an allowed signing delegate for the <code class="language-plaintext highlighter-rouge">issuer</code></p>
<p>The following is the minimal struct for a Claim containing an issuer:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="p">[</span><span class="n">CLAIM</span> <span class="n">TYPE</span><span class="p">]</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
  <span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If the <code class="language-plaintext highlighter-rouge">issuer</code> is specified in the struct In addition to performing the standard ERC712 verification the verification code MUST also verify that the signing address is a valid <code class="language-plaintext highlighter-rouge">veriKey</code> delegate for the address specified in the issuer.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registry</span><span class="p">.</span><span class="n">validDelegate</span><span class="p">(</span><span class="n">issuer</span><span class="p">,</span> <span class="s">'veriKey'</span><span class="p">,</span> <span class="n">recoveredAddress</span><span class="p">)</span>
</code></pre></div></div>
<h4 id="embedded-delegation-proof">
<a href="#embedded-delegation-proof" class="anchor-link"></a> Embedded Delegation Proof
</h4>
<p>There may be applications, in particularly where organizations want to allow delegates to issue claims about specific domains and types.</p>
<p>For this purpose instead of the <code class="language-plaintext highlighter-rouge">issuer</code> we allow a special claim to be embedded following this same format:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Delegate</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">VerifiableDelegate</span> <span class="p">{</span>
	<span class="n">Delegate</span> <span class="n">delegate</span><span class="p">;</span>
	<span class="kt">uint8</span> <span class="n">v</span><span class="p">;</span>
	<span class="kt">bytes32</span> <span class="n">r</span><span class="p">;</span>
	<span class="kt">bytes32</span> <span class="n">s</span><span class="p">;</span>
<span class="p">}</span>


<span class="k">struct</span> <span class="p">[</span><span class="n">CLAIM</span> <span class="n">TYPE</span><span class="p">]</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="n">VerifiedDelegate</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Delegates should be created for specific EIP 712 Domains and not be reused across Domains.</p>
<p>Implementers of new EIP 712 Domains can add further data to the <code class="language-plaintext highlighter-rouge">Delegate</code> struct to allow finer grained application specific rules to it.</p>
<h3 id="claim-types">
<a href="#claim-types" class="anchor-link"></a> Claim Types
</h3>
<h4 id="binary-claims">
<a href="#binary-claims" class="anchor-link"></a> Binary Claims
</h4>
<p>A Binary claim is something that doesn’t have a particular value. It either is issued or not.</p>
<p>Examples:</p>
<ul>
<li>subject is a Person</li>
<li>subject is my owner (eg. Linking an ethereum account to an owner identity)</li>
</ul>
<p>Example:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This is exactly the same as the minimal claim above with the CLAIM TYPE set to <a href="https://schema.org/Person">Person</a>.</p>
<h3 id="value-claims">
<a href="#value-claims" class="anchor-link"></a> Value Claims
</h3>
<p>Value claims can be used to make a claim about the subject containing a specific readable value.</p>
<p><strong>WARNING</strong>: Be very careful about using Value Claims as part of Smart Contract transactions. Identity Claims containing values could be a GDPR violation for the business or developer encouraging a user to post it to a public blockchain.</p>
<p>Examples:</p>
<ul>
<li>subject’s name is Alice</li>
<li>subjects average account balance is 1234555</li>
</ul>
<p>Each value should use the <code class="language-plaintext highlighter-rouge">value</code> field to indicate the value.</p>
<p>A Name Claim</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Name</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">string</span> <span class="n">name</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Average Balance</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">AverageBalance</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">value</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="hashed-claims">
<a href="#hashed-claims" class="anchor-link"></a> Hashed Claims
</h3>
<p>Hashed claims can be used to make a claim about the subject containing the hash of a claim value. Hashes should use ethereum standard <code class="language-plaintext highlighter-rouge">keccak256</code> hashing function.</p>
<p><strong>WARNING</strong>: Be very careful about using Hashed Claims as part of Smart Contract transactions. Identity Claims containing hashes of known values could be a GDPR violation for the business or developer encouraging a user to post it to a public blockchain.</p>
<p>Examples:</p>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />hash of subject’s name is <code class="language-plaintext highlighter-rouge">keccak256(“Alice Torres”)</code></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />hash of subject’s email is <code class="language-plaintext highlighter-rouge">keccak256(“<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8dece1e4eee8cde8f5ece0fde1e8a3eee2e0">[email&#160;protected]</a>”)</code></li>
</ul>
<p>Each value should use the <code class="language-plaintext highlighter-rouge">keccak256 </code> field to indicate the hashed value. Question. The choice of using this name is that we can easily add support for future algorithms as well as maybe zkSnark proofs.</p>
<p>A Name Claim</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Name</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">bytes32</span> <span class="nb">keccak256</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Email Claim</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Email</span> <span class="p">{</span>
	<span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
	<span class="kt">address</span> <span class="n">subject</span><span class="p">;</span>
	<span class="kt">bytes32</span> <span class="nb">keccak256</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validFrom</span><span class="p">;</span>
	<span class="kt">uint256</span> <span class="n">validTo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="eip-712-domain">
<a href="#eip-712-domain" class="anchor-link"></a> EIP 712 Domain
</h3>
<p>The EIP 712 Domain specifies what kind of message that is to be signed and is used to differentiate between signed data types. The content MUST contain the following:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="n">name</span><span class="o">:</span> <span class="s">"EIP1???Claim"</span><span class="p">,</span>
  <span class="n">version</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="n">chainId</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// for mainnet
</span>  <span class="n">verifyingContract</span><span class="o">:</span> <span class="mi">0</span><span class="n">x</span> <span class="c1">// TBD
</span>  <span class="n">salt</span><span class="o">:</span> <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="full-combined-format-for-eip-712-signing">
<a href="#full-combined-format-for-eip-712-signing" class="anchor-link"></a> Full Combined format for EIP 712 signing:
</h4>
<p>Following the EIP 712 standard we can combine the Claim Type with the EIP 712 Domain and the claim itself (in the <code class="language-plaintext highlighter-rouge">message</code>) attribute.</p>
<p>Eg:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">{</span>
    <span class="s">"types"</span><span class="o">:</span> <span class="p">{</span>
      <span class="s">"EIP712Domain"</span><span class="o">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"name"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"string"</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"version"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"string"</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"chainId"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"uint256"</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"verifyingContract"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"address"</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="s">"Email"</span><span class="o">:</span> <span class="p">[</span>
        <span class="p">{</span> 
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"subject"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"address"</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"keccak256"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"bytes32"</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"validFrom"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"uint256"</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="s">"name"</span><span class="o">:</span> <span class="s">"validTo"</span><span class="p">,</span>
          <span class="s">"type"</span><span class="o">:</span> <span class="s">"uint256"</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="s">"primaryType"</span><span class="o">:</span> <span class="s">"Email"</span><span class="p">,</span>
    <span class="s">"domain"</span><span class="o">:</span> <span class="p">{</span>
      <span class="s">"name"</span><span class="o">:</span> <span class="s">"EIP1??? Claim"</span><span class="p">,</span>
      <span class="s">"version"</span><span class="o">:</span> <span class="s">"1"</span><span class="p">,</span>
      <span class="s">"chainId"</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="s">"verifyingContract"</span><span class="o">:</span> <span class="s">"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"</span>
    <span class="p">},</span>
    <span class="s">"message"</span><span class="o">:</span> <span class="p">{</span>
      <span class="s">"subject"</span><span class="o">:</span> <span class="s">"0x5792e817336f41de1d8f54feab4bc200624a1d9d"</span><span class="p">,</span>
      <span class="s">"value"</span><span class="o">:</span> <span class="s">"9c8465d9ae0b0bc167dee7f62880034f59313100a638dcc86a901956ea52e280"</span><span class="p">,</span>
      <span class="s">"validFrom"</span><span class="o">:</span> <span class="s">"0x0000000000000000000000000000000000000000000000000001644b74c2a0"</span><span class="p">,</span>
      <span class="s">"validTo"</span><span class="o">:</span> <span class="s">"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>
<h3 id="revocation">
<a href="#revocation" class="anchor-link"></a> Revocation
</h3>
<p>Both Issuers and Subjects should be allowed to revoke Verifiable Claims. Revocations can be handled through a simple on-chain registry.</p>
<p>The ultimate rules of who should be able to revoke a claim is determined by the Verifying contract.</p>
<p>The <code class="language-plaintext highlighter-rouge">digest</code> used for revocation is the EIP712 Signed Typed Data digest.</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">contract</span> <span class="n">RevocationRegistry</span> <span class="p">{</span>
  <span class="k">mapping</span> <span class="p">(</span><span class="kt">bytes32</span> <span class="o">=&gt;</span> <span class="k">mapping</span> <span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint</span><span class="p">))</span> <span class="k">public</span> <span class="n">revocations</span><span class="p">;</span>

  <span class="k">function</span> <span class="n">revoke</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">digest</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">revocations</span><span class="p">[</span><span class="n">digest</span><span class="p">][</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">number</span><span class="p">;</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">function</span> <span class="n">revoked</span><span class="p">(</span><span class="kt">address</span> <span class="n">party</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">digest</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">revocations</span><span class="p">[</span><span class="n">digest</span><span class="p">][</span><span class="n">party</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>A verifying contract can query the Revocation Registry as such:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bytes32</span> <span class="n">digest</span> <span class="o">=</span> <span class="nb">keccak256</span><span class="p">(</span>
  <span class="n">abi</span><span class="p">.</span><span class="n">encodePacked</span><span class="p">(</span>
    <span class="s">"</span><span class="se">\x19\x01</span><span class="s">"</span><span class="p">,</span>
    <span class="n">DOMAIN_SEPARATOR</span><span class="p">,</span>
    <span class="n">hash</span><span class="p">(</span><span class="n">claim</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">);</span>
<span class="nb">require</span><span class="p">(</span><span class="n">valid</span><span class="p">(</span><span class="n">claim</span><span class="p">.</span><span class="n">validFrom</span><span class="p">,</span> <span class="n">claim</span><span class="p">.</span><span class="n">validTo</span><span class="p">),</span> <span class="s">"invalid issuance timestamps"</span><span class="p">);</span>
<span class="kt">address</span> <span class="n">issuer</span> <span class="o">=</span> <span class="nb">ecrecover</span><span class="p">(</span><span class="n">digest</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">revocations</span><span class="p">.</span><span class="n">revoked</span><span class="p">(</span><span class="n">issuer</span><span class="p">,</span> <span class="n">digest</span><span class="p">),</span> <span class="s">"claim was revoked by issuer"</span><span class="p">);</span>
<span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">revocations</span><span class="p">.</span><span class="n">revoked</span><span class="p">(</span><span class="n">claim</span><span class="p">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">digest</span><span class="p">),</span> <span class="s">"claim was revoked by subject"</span><span class="p">);</span>
</code></pre></div></div>
<h3 id="creation-of-verifiable-claims-domains">
<a href="#creation-of-verifiable-claims-domains" class="anchor-link"></a> Creation of Verifiable Claims Domains
</h3>
<p>Creating specific is Verifiable Claims Domains is out of the scope of this EIP. The Example Code has a few examples.</p>
<p>EIP’s or another process could be used to standardize specific important Domains that are universally useful across the Ethereum world.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>Signed Typed Data provides a strong foundation for Verifiable Claims that can be used in many different kinds of applications built on both Layer 1 and Layer 2 of Ethereum.</p>
<h3 id="rationale-for-using-not-using-a-single-eip-712-domain">
<a href="#rationale-for-using-not-using-a-single-eip-712-domain" class="anchor-link"></a> Rationale for using not using a single EIP 712 Domain
</h3>
<p>EIP712 supports complex types and domains in itself, that we believe are perfect building blocks for building Verifiable Claims for specific purposes.</p>
<p>The Type and Domain of a Claim is itself an important part of a claim and ensures that Verifiable Claims are used for the specific purposes required and not misused.</p>
<p>EIP712 Domains also allow rapid experimentation, allowing taxonomies to be built up by the community.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<p>There is a repo with a few example verifiers and consuming smart contracts written in Solidity:</p>
<p><strong>Example Verifiers</strong></p>
<ul>
<li><a href="https://github.com/uport-project/eip712-claims-experiments/blob/master/contracts/IdentityClaimsVerifier.sol">Verifier for very simple IdVerification Verifiable Claims containing minimal Personal Data</a></li>
<li><a href="https://github.com/uport-project/eip712-claims-experiments/blob/master/contracts/OwnershipProofVerifier.sol">Verifier for OwnershipProofs signed by a users wallet</a></li>
</ul>
<p><strong>Example Smart Contracts</strong></p>
<ul>
<li><a href="https://github.com/uport-project/eip712-claims-experiments/blob/master/contracts/KYCCoin.sol">KYCCoin.sol</a> - Example Token allows reusable IdVerification claims issued by trusted verifiers and users to whitelist their own addresses using OwnershipProofs</li>
<li><a href="https://github.com/uport-project/eip712-claims-experiments/blob/master/contracts/ConsortiumAgreements.sol">ConsortiumAgreement.sol</a> - Example Consortium Agreement smart contract. Consortium Members can issue Delegated Claims to employees or servers to interact on their behalf.</li>
</ul>
<p><strong>Shared Registries</strong></p>
<ul>
<li><a href="https://github.com/uport-project/eip712-claims-experiments/blob/master/contracts/RevocationRegistry.sol">RevocationRegistry.sol</a></li>
</ul>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/pelle">Pelle Braendgaard</a>, "EIP-1812: Ethereum Verifiable Claims [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 1812, March 2019. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1812.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-1812: Ethereum Verifiable Claims [DRAFT]",
    "author": "Pelle Braendgaard (@pelle)",
    "name": "EIP-1812: Ethereum Verifiable Claims [DRAFT]",
    "dateCreated": "2019-03-03",
    "datePublished": "2019-03-03",

    "discussionUrl": "https://ethereum-magicians.org/t/erc-1812-ethereum-verifiable-claims/2814",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2019"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
