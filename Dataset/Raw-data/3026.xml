<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-3026: BW6-761 curve operations</title>
<meta property="og:title" content="EIP-3026: BW6-761 curve operations" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-3026" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-3026" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
🚧 This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-3026: BW6-761 curve operations
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3026.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/yelhousni">Youssef El Housni</a>, <a href="https://github.com/iAmMichaelConnor">Michael Connor</a>, <a href="/cdn-cgi/l/email-protection#b3d2c6c1dcc1d69dd4c6dadfdfd6c5dad0f3daddc1dad29dd5c1">Aurore Guillevic</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-3026-bw6-761-curve-operations/4790">https://ethereum-magicians.org/t/eip-3026-bw6-761-curve-operations/4790</a></td></tr>

<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2020-10-05</td></tr>
<tr><th>Requires</th><td>
<a href="eip-2539">2539</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a>
<ul>
<li><a href="#proposed-addresses-table">Proposed addresses table</a></li>
</ul>
</li>
<li><a href="#specification">Specification</a></li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#implementation">Implementation</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>This precompile adds operations for the BW6-761 curve (from the EY/Inria <a href="https://eprint.iacr.org/2020/351.pdf">research paper</a>) as a precompile in a set necessary to <em>efficiently</em> perform verification of one-layer composed zkSNARKs proofs.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>If <code class="language-plaintext highlighter-rouge">block.number &gt;= X</code> we introduce <em>seven</em> separate precompiles to perform the following operations (addresses to be determined):</p>
<ul>
<li>BW6_G1_ADD - to perform point addition on a curve defined over a prime field</li>
<li>BW6_G1_MUL - to perform point multiplication on a curve defined over a prime field</li>
<li>BW6_G1_MULTIEXP - to perform multiexponentiation on a curve defined over a prime field</li>
<li>BW6_G2_ADD - to perform point addition on a curve twist defined the base a prime field</li>
<li>BW6_G2_MUL - to perform point multiplication on a curve twist defined over a prime field</li>
<li>BW6_G2_MULTIEXP - to perform multiexponentiation on a curve twist defined over a prime field</li>
<li>BW6_PAIRING - to perform a pairing operations between a set of <em>pairs</em> of (G1, G2) points</li>
</ul>
<p>The multiexponentiation operations are a generalization of point multiplication, but separate precompiles are prosposed because running a single MUL through MULTIEXP seems to be 20% more expensive.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>This EIP is based on and tends to replace <a href="https://github.com/matter-labs/EIPs/blob/sw6_wrapping/EIPS/eip-2541.md">EIP-2541</a> for significant performance reasons. In most applications, BW6-761 is used as an outer curve to BLS12-377 considered in <a href="https://github.com/ethereum/EIPs/pull/2539">EIP-2539</a>.
The motivation of this precompile is to allow efficient one-layer composition of SNARK proofs. Currently this is done by Zexe using the BLS12-377/CP6-782 pair of curves. This precompile proposes a replacement of CP6-782 by BW6-761, which allows much faster operations. For example, it was shown that verifying a Groth16 proof with BW6-761 is 30 times faster than with CP6-782.</p>
<h3 id="proposed-addresses-table">
<a href="#proposed-addresses-table" class="anchor-link"></a> Proposed addresses table
</h3>
<table>
<thead>
<tr>
<th>Precompile</th>
<th>Address</th>
</tr>
</thead>
<tbody>
<tr>
<td>BW6_G1_ADD</td>
<td>0x13</td>
</tr>
<tr>
<td>BW6_G1_MUL</td>
<td>0x14</td>
</tr>
<tr>
<td>BW6_G1_MULTIEXP</td>
<td>0x15</td>
</tr>
<tr>
<td>BW6_G2_ADD</td>
<td>0x16</td>
</tr>
<tr>
<td>BW6_G2_MUL</td>
<td>0x17</td>
</tr>
<tr>
<td>BW6_G2_MULTIEXP</td>
<td>0x18</td>
</tr>
<tr>
<td>BW6_PAIRING</td>
<td>0x19</td>
</tr>
</tbody>
</table>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>Curve parameters:</p>
<p>The BW6-761 <code class="language-plaintext highlighter-rouge">y^2=x^3-1</code> curve is fully defined by the following set of parameters:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Base field modulus = 0x122e824fb83ce0ad187c94004faff3eb926186a81d14688528275ef8087be41707ba638e584e91903cebaff25b423048689c8ed12f9fd9071dcd3dc73ebff2e98a116c25667a8f8160cf8aeeaf0a437e6913e6870000082f49d00000000008b
A coefficient = 0x0
B coefficient = 0x122e824fb83ce0ad187c94004faff3eb926186a81d14688528275ef8087be41707ba638e584e91903cebaff25b423048689c8ed12f9fd9071dcd3dc73ebff2e98a116c25667a8f8160cf8aeeaf0a437e6913e6870000082f49d00000000008a
Main subgroup order = 0x1ae3a4617c510eac63b05c06ca1493b1a22d9f300f5138f1ef3622fba094800170b5d44300000008508c00000000001
Extension tower:
Fp3 construction: (Fp3 = Fp[u]/u^3+4)
Fp cubic non-residue = 0x122e824fb83ce0ad187c94004faff3eb926186a81d14688528275ef8087be41707ba638e584e91903cebaff25b423048689c8ed12f9fd9071dcd3dc73ebff2e98a116c25667a8f8160cf8aeeaf0a437e6913e6870000082f49d000000000087
Twist parameters:
Twist type: M
twist curve A coefficient c0 = 0x0
                          c1 = 0x0
twist curve B coefficient c0 = 0x4
                        c1 = 0x0
Generators:
G1:
X = 0x1075b020ea190c8b277ce98a477beaee6a0cfb7551b27f0ee05c54b85f56fc779017ffac15520ac11dbfcd294c2e746a17a54ce47729b905bd71fa0c9ea097103758f9a280ca27f6750dd0356133e82055928aca6af603f4088f3af66e5b43d
Y = 0x58b84e0a6fc574e6fd637b45cc2a420f952589884c9ec61a7348d2a2e573a3265909f1af7e0dbac5b8fa1771b5b806cc685d31717a4c55be3fb90b6fc2cdd49f9df141b3053253b2b08119cad0fb93ad1cb2be0b20d2a1bafc8f2db4e95363
G2:
X = 0x110133241d9b816c852a82e69d660f9d61053aac5a7115f4c06201013890f6d26b41c5dab3da268734ec3f1f09feb58c5bbcae9ac70e7c7963317a300e1b6bace6948cb3cd208d700e96efbc2ad54b06410cf4fe1bf995ba830c194cd025f1c
Y = 0x17c3357761369f8179eb10e4b6d2dc26b7cf9acec2181c81a78e2753ffe3160a1d86c80b95a59c94c97eb733293fef64f293dbd2c712b88906c170ffa823003ea96fcd504affc758aa2d3a3c5a02a591ec0594f9eac689eb70a16728c73b61
Pairing parameters:
e(P,Q)=(ML1(P,Q)*ML2(P,Q)^q)^FE
|loop_count_1| (first miller loop ML1 count) = 0x8508c00000000002
|loop_count_2| (second miller loop ML2 count) = 0x23ed1347970dec008a442f991fffffffffffffffffffffff
loop_count_1 is negative = false
loop_count_2 is negative = false
</code></pre></div></div>
<h4 id="encoding">
<a href="#encoding" class="anchor-link"></a> Encoding
</h4>
<h5 id="field-elements-encoding">
<a href="#field-elements-encoding" class="anchor-link"></a> Field elements encoding:
</h5>
<p>To encode points involved in the operation one has to encode elements of only the base field.</p>
<p>The base field element (Fp) is encoded as <code class="language-plaintext highlighter-rouge">96</code> bytes by performing BigEndian encoding of the corresponding (unsigned) integer. The corresponding integer <strong>MUST</strong> be less than the base field modulus.</p>
<p>If encodings do not follow this spec anywhere during parsing in the precompile, the precompile <strong>MUST</strong> revert with “endoding error”.</p>
<h5 id="encoding-of-uncompressed-points">
<a href="#encoding-of-uncompressed-points" class="anchor-link"></a> Encoding of uncompressed points:
</h5>
<p>Points in both G1 and G2 can be expressed as <code class="language-plaintext highlighter-rouge">(x, y)</code> affine coordinates, where <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> are elements of the base field.
Therefore, points in both G1 and G2 are encoded as the byte concatenation of the field element encodings of the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> affine coordinates. The total encoding length for a G1/G2 point is thus <code class="language-plaintext highlighter-rouge">192</code> bytes.</p>
<h5 id="point-at-infinity-encoding">
<a href="#point-at-infinity-encoding" class="anchor-link"></a> Point at infinity encoding:
</h5>
<p>Also referred as the “zero point”. For BW6-761 (<code class="language-plaintext highlighter-rouge">y^2=x^3-1</code>) and its M-twisted curves (<code class="language-plaintext highlighter-rouge">y^3=x^3+4</code>), the point with coordinates <code class="language-plaintext highlighter-rouge">(0, 0)</code> (formal zeros in Fp) is <em>not</em> on the curve, and so the encoding of <code class="language-plaintext highlighter-rouge">(0, 0)</code> is used as a convention to encode the point at infinity.</p>
<h5 id="encoding-of-scalars-for-multiplication-and-multiexponentiation-operations">
<a href="#encoding-of-scalars-for-multiplication-and-multiexponentiation-operations" class="anchor-link"></a> Encoding of scalars for multiplication and multiexponentiation operations:
</h5>
<p>For multiplication and multiexponentiation operations, a scalar is encoded as <code class="language-plaintext highlighter-rouge">64</code> bytes by performing BigEndian encoding of the corresponding (unsigned) integer.</p>
<p>Note that the main subgroup order for BW6-761 is actually only <code class="language-plaintext highlighter-rouge">377</code> bits (<code class="language-plaintext highlighter-rouge">48</code> bytes), but an encoding of <code class="language-plaintext highlighter-rouge">64</code> bytes has been chosen to have a <code class="language-plaintext highlighter-rouge">32</code>-byte-aligned ABI (representable as e.g. <code class="language-plaintext highlighter-rouge">bytes32[2]</code> or <code class="language-plaintext highlighter-rouge">uint256[2]</code>).</p>
<p>The corresponding integer <strong>MAY</strong> be greater than the main subgroup order.</p>
<h4 id="abi-for-operations">
<a href="#abi-for-operations" class="anchor-link"></a> ABI for operations
</h4>
<h5 id="abi-for-g1-addition">
<a href="#abi-for-g1-addition" class="anchor-link"></a> ABI for G1 addition
</h5>
<p>G1 addition call expects <code class="language-plaintext highlighter-rouge">384</code> bytes as an input that is interpreted as the byte concatenation of two G1 points (point-encoded as <code class="language-plaintext highlighter-rouge">192</code> bytes each). Output is a point-encoding of the addition operation result.</p>
<p>Error cases:</p>
<ul>
<li>Either of the points being not on the curve</li>
<li>Input has invalid length</li>
<li>Field element encoding rules apply (obviously)</li>
</ul>
<h5 id="abi-for-g1-multiplication">
<a href="#abi-for-g1-multiplication" class="anchor-link"></a> ABI for G1 multiplication
</h5>
<p>G1 multiplication call expects <code class="language-plaintext highlighter-rouge">256</code> bytes as an input that is interpreted as the byte concatenation of the point-encoding of a G1 point (<code class="language-plaintext highlighter-rouge">192</code> bytes) and the encoding of a scalar value (<code class="language-plaintext highlighter-rouge">64</code> bytes). Output is a point-encoding of the multiplication operation result.</p>
<p>Error cases:</p>
<ul>
<li>Point being not on the curve</li>
<li>Input has invalid length</li>
<li>Field element encoding rules apply (obviously)</li>
<li>Scalar encoding rules apply (obviously)</li>
</ul>
<h5 id="abi-for-g1-multiexponentiation">
<a href="#abi-for-g1-multiexponentiation" class="anchor-link"></a> ABI for G1 multiexponentiation

</h5>
<p>G1 multiplication call expects <code class="language-plaintext highlighter-rouge">256*k</code> bytes as an input that is interpreted as the byte concatenation of <code class="language-plaintext highlighter-rouge">k</code> slices, each of them being a byte concatenation of the point-encoding of a G1 point (<code class="language-plaintext highlighter-rouge">192</code> bytes) and the encoding of a scalar value (<code class="language-plaintext highlighter-rouge">64</code> bytes). Output is an encoding of the multiexponentiation operation result.</p>
<p>Error cases:</p>
<ul>
<li>Any of the G1 points being not on the curve</li>
<li>Input has invalid length</li>
<li>Field element encoding rules apply (obviously)</li>
<li>Scalar encoding rules apply (obviously)</li>
</ul>
<h5 id="abi-for-g2-addition">
<a href="#abi-for-g2-addition" class="anchor-link"></a> ABI for G2 addition
</h5>
<p>G2 addition call expects <code class="language-plaintext highlighter-rouge">384</code> bytes as an input that is interpreted as the byte concatenation of two G2 points (point-encoded as <code class="language-plaintext highlighter-rouge">192</code> bytes each). Output is a point-encoding of the addition operation result.</p>
<p>Error cases:</p>
<ul>
<li>Either of points being not on the curve</li>
<li>Input has invalid length</li>
<li>Field elements encoding rules apply (obviously)</li>
</ul>
<h5 id="abi-for-g2-multiplication">
<a href="#abi-for-g2-multiplication" class="anchor-link"></a> ABI for G2 multiplication
</h5>
<p>G2 multiplication call expects <code class="language-plaintext highlighter-rouge">256</code> bytes as an input that is interpreted as the byte concatenation of the point-encoding of a G2 point (<code class="language-plaintext highlighter-rouge">192</code> bytes) and the encoding of a scalar value (<code class="language-plaintext highlighter-rouge">64</code> bytes). Output is an encoding of multiplication operation result.</p>
<p>Error cases:</p>
<ul>
<li>Point being not on the curve must result in error</li>
<li>Field elements encoding rules apply (obviously)</li>
<li>Input has invalid length</li>
</ul>
<h5 id="abi-for-g2-multiexponentiation">
<a href="#abi-for-g2-multiexponentiation" class="anchor-link"></a> ABI for G2 multiexponentiation
</h5>
<p>G2 multiplication call expects <code class="language-plaintext highlighter-rouge">240*k</code> bytes as an input that is interpreted as byte concatenation of <code class="language-plaintext highlighter-rouge">k</code> slices each of them being a byte concatenation of encoding of G2 point (<code class="language-plaintext highlighter-rouge">192</code> bytes) and encoding of a scalar value (<code class="language-plaintext highlighter-rouge">48</code> bytes). Output is an encoding of multiexponentiation operation result.</p>
<p>Error cases:</p>
<ul>
<li>Any of G2 points being not on the curve must result in error</li>
<li>Field elements encoding rules apply (obviously)</li>
<li>Input has invalid length</li>
</ul>
<h5 id="abi-for-pairing">
<a href="#abi-for-pairing" class="anchor-link"></a> ABI for pairing
</h5>
<p>Pairing call expects <code class="language-plaintext highlighter-rouge">384*k</code> bytes as an input, that is interpreted as the byte concatenation of <code class="language-plaintext highlighter-rouge">k</code> slices. Each slice has the following structure:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">192</code> bytes G1 point encoding</li>
<li><code class="language-plaintext highlighter-rouge">192</code> bytes G2 point encoding</li>
</ul>
<p>Output is <code class="language-plaintext highlighter-rouge">32</code> bytes representing a boolean:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000000000000000000000000001</code> if the pairing result is equal the to multiplicative identity in the pairing target field; and</li>
<li><code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000000000000000000000000000</code> otherwise.</li>
</ul>
<p>Error cases:</p>
<ul>
<li>Any of the G1 or G2 points being not on the curve</li>
<li>Any of the G1 or G2 points being not in the correct subgroup</li>
<li>Input has invalid length</li>
<li>Field elements encoding rules apply (obviously)</li>
</ul>
<h4 id="prevention-of-ddos-on-error-handling">
<a href="#prevention-of-ddos-on-error-handling" class="anchor-link"></a> Prevention of DDoS on error handling
</h4>
<p>This precompile performs extensive computations and in case of any errors during execution it <strong>MUST</strong> consume all gas from the the gas schedule for the corresponding operation.</p>
<h4 id="gas-schedule">
<a href="#gas-schedule" class="anchor-link"></a> Gas schedule
</h4>
<h5 id="g1-addition">
<a href="#g1-addition" class="anchor-link"></a> G1 addition
</h5>
<p><code class="language-plaintext highlighter-rouge">&lt;to be estimated&gt;</code> gas</p>
<h5 id="g1-multiplication">
<a href="#g1-multiplication" class="anchor-link"></a> G1 multiplication
</h5>
<p><code class="language-plaintext highlighter-rouge">&lt;to be estimated&gt;</code> gas</p>
<h5 id="g2-addition">
<a href="#g2-addition" class="anchor-link"></a> G2 addition
</h5>
<p><code class="language-plaintext highlighter-rouge">&lt;to be estimated&gt;</code> gas</p>
<h5 id="g2-multiplication">
<a href="#g2-multiplication" class="anchor-link"></a> G2 multiplication
</h5>
<p><code class="language-plaintext highlighter-rouge">&lt;to be estimated&gt;</code> gas</p>
<h5 id="g1g2-multiexponentiation">
<a href="#g1g2-multiexponentiation" class="anchor-link"></a> G1/G2 Multiexponentiation
</h5>
<p>Discounts table as a vector of pairs <code class="language-plaintext highlighter-rouge">[k, discount]</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;to be estimated&gt;
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">max_discount = &lt;to be estimated&gt;</code></p>
<h5 id="pairing-operation">
<a href="#pairing-operation" class="anchor-link"></a> Pairing operation
</h5>
<p>Base cost of the pairing operation is <code class="language-plaintext highlighter-rouge">&lt;to be estimated&gt;*k + &lt;to be estimated&gt;</code> where <code class="language-plaintext highlighter-rouge">k</code> is a number of pairs.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>Gas costs are based on EIP1962 estimation strategy (but do not fully include yet parsing of ABI, decoding and encoding of the result as a byte array).</p>
<h4 id="gas-estimation-strategy">
<a href="#gas-estimation-strategy" class="anchor-link"></a> Gas estimation strategy
</h4>
<p>Gas cost is derived by taking the average timing of the same operations over different implementations and assuming a constant <code class="language-plaintext highlighter-rouge">30 MGas/second</code>. Since the execution time is machine-specific, this constant is determined based on execution times of <a href="https://github.com/matter-labs/eip1962/blob/master/run_bn_pairing_estimate.sh">ECRECOVER</a> and <a href="https://github.com/matter-labs/eip1962/blob/master/run_bn_pairing_estimate.sh">BNPAIR</a> precompiles on my machine and their proposed gas price (<code class="language-plaintext highlighter-rouge">43.5 MGas/s</code> for ECRECOVER and <code class="language-plaintext highlighter-rouge">16.5 MGas/s</code> for BNPAIR). Following are the proposed methods to time the precompile operations:</p>
<ul>
<li>G1 addition: Average timing of 1000 random samples.</li>
<li>G1 multiplication: Average timing of 1000 samples of random worst-case of double-and-add algorithm (scalar of max bit length and max hamming weight and random base points in G1)</li>
<li>G2 addition: Average timing of 1000 random samples</li>
<li>G2 multiplication: Average timing of 1000 samples of radnom worst-case of double-and-add algorithm (scalar of max bit length and max hamming weight and random base points in G2)</li>
<li>G1 and G2 multiexponentiations: Expected to be performed by the Peppinger algorithm, with a table prepared for discount in case of <code class="language-plaintext highlighter-rouge">k &lt;= 128</code> points in the multiexponentiation with a discount cup <code class="language-plaintext highlighter-rouge">max_discount</code> for <code class="language-plaintext highlighter-rouge">k &gt; 128</code>. To avoid non-integer arithmetic call cost is calculated as <code class="language-plaintext highlighter-rouge">k * multiplication_cost * discount / multiplier</code> where <code class="language-plaintext highlighter-rouge">multiplier = 1000</code>, <code class="language-plaintext highlighter-rouge">k</code> is a number of (scalar, point) pairs for the call, <code class="language-plaintext highlighter-rouge">multiplication_cost</code> is a corresponding single multiplication call cost for G1/G2.</li>
<li>Pairing: Average timing of 1000 random samples (random points in G1 and G2) for different number of pairs with linear lifting.</li>
</ul>
<h4 id="multiexponentiation-as-a-separate-call">
<a href="#multiexponentiation-as-a-separate-call" class="anchor-link"></a> Multiexponentiation as a separate call
</h4>
<p>Explicit separate multiexponentiation operation that allows one to save execution time (so gas) by both the algorithm used (namely Peppinger algorithm) and (usually forgotten) by the fact that <code class="language-plaintext highlighter-rouge">CALL</code> operation in Ethereum is expensive (at the time of writing), so one would have to pay non-negigible overhead if e.g. for multiexponentiation of <code class="language-plaintext highlighter-rouge">100</code> points would have to call the multipication precompile <code class="language-plaintext highlighter-rouge">100</code> times and addition for <code class="language-plaintext highlighter-rouge">99</code> times (roughly <code class="language-plaintext highlighter-rouge">138600</code> would be saved).</p>
<h4 id="explicit-subgroup-checks">
<a href="#explicit-subgroup-checks" class="anchor-link"></a> Explicit subgroup checks
</h4>
<p>G2 subgroup check has the same cost as G1 subgroup check. Endomorphisms can be leverages to optimize this operation.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>There are no backward compatibility questions.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<p>Due to the large test parameters space we first provide properties that various operations must satisfy. We use additive notation for point operations, capital letters (<code class="language-plaintext highlighter-rouge">P</code>, <code class="language-plaintext highlighter-rouge">Q</code>) for points, small letters (<code class="language-plaintext highlighter-rouge">a</code>, <code class="language-plaintext highlighter-rouge">b</code>) for scalars. Generator for G1 is labeled as <code class="language-plaintext highlighter-rouge">G</code>, generator for G2 is labeled as <code class="language-plaintext highlighter-rouge">H</code>, otherwise we assume random point on a curve in a correct subgroup. <code class="language-plaintext highlighter-rouge">0</code> means either scalar zero or point of infinity. <code class="language-plaintext highlighter-rouge">1</code> means either scalar one or multiplicative identity. <code class="language-plaintext highlighter-rouge">group_order</code> is a main subgroup order. <code class="language-plaintext highlighter-rouge">e(P, Q)</code> means pairing operation where <code class="language-plaintext highlighter-rouge">P</code> is in G1, <code class="language-plaintext highlighter-rouge">Q</code> is in G2.</p>
<p>Requeired properties for basic ops (add/multiply):</p>
<ul>
<li>Commutativity: <code class="language-plaintext highlighter-rouge">P + Q = Q + P</code></li>
<li>Additive negation: <code class="language-plaintext highlighter-rouge">P + (-P) = 0</code></li>
<li>Doubling <code class="language-plaintext highlighter-rouge">P + P = 2*P</code></li>
<li>Subgroup check: <code class="language-plaintext highlighter-rouge">group_order * P = 0</code></li>
<li>Trivial multiplication check: <code class="language-plaintext highlighter-rouge">1 * P = P</code></li>
<li>Multiplication by zero: <code class="language-plaintext highlighter-rouge">0 * P = 0</code></li>
<li>Multiplication by the unnormalized scalar <code class="language-plaintext highlighter-rouge">(scalar + group_order) * P = scalar * P</code></li>
</ul>
<p>Required properties for pairing operation:</p>
<ul>
<li>Degeneracy <code class="language-plaintext highlighter-rouge">e(P, 0*Q) = e(0*P, Q) = 1</code></li>
<li>Bilinearity <code class="language-plaintext highlighter-rouge">e(a*P, b*Q) = e(a*b*P, Q) = e(P, a*b*Q)</code> (internal test, not visible through ABI)</li>
</ul>
<p>Test vector for all operations are expanded in this <a href="https://gist.github.com/shamatar/506ab3193a7932fe9302a2f3a31a23e8">gist</a> until it’s final.</p>
<h2 id="implementation">
<a href="#implementation" class="anchor-link"></a> Implementation
</h2>
<p>There is a various choice of existing implementations:</p>
<p><strong>Libraries:</strong></p>
<ul>
<li>Rust implementation (EY/Zexe): https://github.com/yelhousni/zexe/tree/youssef/BW6-761-Fq-ABLR-2ML-M</li>
<li>C++ implementation (EY/libff): https://github.com/EYBlockchain/zk-swap-libff</li>
<li>Golang implementation (Consensys/gurvy): https://github.com/ConsenSys/gurvy</li>
</ul>
<p><strong>Stand-alone implementation:</strong></p>
<ul>
<li>Golang implementation with Intel assembly (Onur Kilic): https://github.com/kilic/bw6</li>
</ul>
<p><strong>Precompiles:</strong></p>
<ul>
<li>OpenEthereum (EY/Parity): https://github.com/EYBlockchain/solidity-elliptic-curves</li>
</ul>
<p><strong>Scripts:</strong></p>
<ul>
<li>SageMath and Magma scripts: https://gitlab.inria.fr/zk-curves/bw6-761/</li>
</ul>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>Strictly following the spec will eliminate security implications or consensus implications in a contrast to the previous BN254 precompile.</p>
<p>Important topic is a “constant time” property for performed operations. We explicitly state that this precompile <strong>IS NOT REQUIRED</strong> to perform all the operations using constant time algorithms.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/yelhousni">Youssef El Housni</a>, <a href="https://github.com/iAmMichaelConnor">Michael Connor</a>, <a href="/cdn-cgi/l/email-protection#d9b8acabb6abbcf7beacb0b5b5bcafb0ba99b0b7abb0b8f7bfab">Aurore Guillevic</a>, "EIP-3026: BW6-761 curve operations [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 3026, October 2020. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-3026.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-3026: BW6-761 curve operations [DRAFT]",
    "author": "Youssef El Housni (@yelhousni), Michael Connor (@iAmMichaelConnor), Aurore Guillevic <aurore.guillevic@inria.fr>",
    "name": "EIP-3026: BW6-761 curve operations [DRAFT]",
    "dateCreated": "2020-10-05",
    "datePublished": "2020-10-05",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-3026-bw6-761-curve-operations/4790",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2020"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
