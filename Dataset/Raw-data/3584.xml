<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-3584: Block Access List</title>
<meta property="og:title" content="EIP-3584: Block Access List" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-3584" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-3584" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
ðŸš§ This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-3584: Block Access List
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3584.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/g11in">Gajinder Singh</a>, <a href="https://github.com/pipermerriam">Piper Merriam</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethresear.ch/t/block-access-list-v0-1/9505">https://ethresear.ch/t/block-access-list-v0-1/9505</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2021-05-22</td></tr>
<tr><th>Requires</th><td>
<a href="eip-2929">2929</a>,
<a href="eip-2930">2930</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#simple-summary">Simple Summary</a></li>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#canonical-block-access-list">Canonical Block Access List</a></li>
<li><a href="#accesslistroot">AccessListRoot</a></li>
<li><a href="#additional-block-validation">Additional Block Validation</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a>
<ul>
<li><a href="#sorting-of-canonical-access_list">Sorting of canonical access_list</a></li>
<li><a href="#accesslistroot-1">AccessListRoot</a></li>
<li><a href="#future-extensions-of-access_list">Future extensions of access_list</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="simple-summary">
<a href="#simple-summary" class="anchor-link"></a> Simple Summary
</h2>
<p>A proposal to build a blockâ€™s <code class="language-plaintext highlighter-rouge">access_list</code> and include its fingerprint <code class="language-plaintext highlighter-rouge">AccessListRoot</code> in the block header.</p>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p><a href="/EIPS/eip-2929">EIP-2929</a>/<a href="/EIPS/eip-2930">EIP-2930</a> centers around normalizing the (low) gas costs of data/storage accesses made by a transaction as well as providing for (and encouraging) a new transaction type format:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, access_list, yParity, senderR, senderS])
</code></pre></div></div>
<p>that makes upfront <code class="language-plaintext highlighter-rouge">access_list</code> declarations, where <code class="language-plaintext highlighter-rouge">access_list</code> is some <code class="language-plaintext highlighter-rouge">[[{20 bytes}, [{32 bytes}...]]...]</code> map of <code class="language-plaintext highlighter-rouge">AccessedAddress=&gt; AccessedStorageKeys</code>.</p>
<p>The first <em>accesses</em> of these upfront <em>declarations</em> are charged at discounted price (roughly ~<code class="language-plaintext highlighter-rouge">10%</code>) and first accesses outside this list are charged higher price. Reason is upfront access declaration provides for a way to <em>preload/optimize/batch</em> loading these locations while executing the transaction.
This inadvertently leads to generation of transaction <code class="language-plaintext highlighter-rouge">access_list</code> that has all (first) accesses (declared or not) made by a transaction.
This proposal is to collate these <em>transaction</em> <code class="language-plaintext highlighter-rouge">access_list</code>s for all the transactions in a <strong>block</strong> <code class="language-plaintext highlighter-rouge">access_list</code> document and include its <em>fingerprint</em> in the block header.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Motivation for collating the <em>transaction</em> <code class="language-plaintext highlighter-rouge">access_list</code>s for all the transactions in a <strong>block</strong>â€™s <code class="language-plaintext highlighter-rouge">access_list</code> is to have an <em>access index</em> of the block with following benefits:</p>
<ol>
<li>Block execution/validation optimizations/parallelization/cache warmup by enabling construction of <em>a partial order</em> for access and hence execution (hint: <em>chains</em> in this <em>poset</em> can be parallelized).</li>
<li>Enabling partial inspection and fetching/serving of a block data/state by <em>light sync</em> or <em>fast sync</em> protocols concerned with a subset of addresses.</li>
<li>Possible future extension of this list to serve as index for bundling, serving and fetching witness data for <em>stateless</em> protocols.</li>
</ol>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>A block <code class="language-plaintext highlighter-rouge">access_list</code> represents:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set [ 
    AccessedAddress, 
    List [AccessedStorageKeys] , 
    Set  [ AccessedInBlockTransactionNumber, List [ AccessedStorageKeys ]]  
]
</code></pre></div></div>
<p>A <strong>canonical</strong> construction of such an <code class="language-plaintext highlighter-rouge">access_list</code> is specified as below.</p>
<h3 id="canonical-block-access-list">
<a href="#canonical-block-access-list" class="anchor-link"></a> Canonical Block Access List
</h3>
<p>An <code class="language-plaintext highlighter-rouge">access_list</code> is defined to be comprised of many <code class="language-plaintext highlighter-rouge">access_list_entry</code> elements:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>access_list   :=  [access_list_entry, ...]
</code></pre></div></div>
<p>An <code class="language-plaintext highlighter-rouge">access_list_entry</code> is a 3-tuple of:</p>
<ul>
<li>address</li>
<li>sorted list of storage keys of the address accessed across the entire block</li>
<li>sorted list of 2-tuples of:
<ul>
<li>transaction index in which the address or any of its storage keys were accessed</li>
<li>sorted list of storage keys which were accessed</li>
</ul>
</li>
</ul>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>access_list                 := [access_list_entry, ...]
access_list_entry           := [address, storage_keys, accesses_by_txn_index]
address                     := bytes20
accesses_by_txn_index       := [txn_index_and_keys, ...]
txn_index_and_keys          := [txn_index, storage_keys]
txn_index                   := uint64  # or uint256 or whatever
storage_keys                := [storage_key, ...]
storage_key                 := bytes32
</code></pre></div></div>
<p>Additional sorting rules for the above are that:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">access_list</code> is sorted by the <code class="language-plaintext highlighter-rouge">address</code></li>
<li><code class="language-plaintext highlighter-rouge">storage_keys</code> is sorted</li>
<li><code class="language-plaintext highlighter-rouge">accesses_by_txn_index</code> is sorted by <code class="language-plaintext highlighter-rouge">txn_index</code></li>
</ul>
<p>Additional validation rules for the above are that:</p>
<ul>
<li>Each unique <code class="language-plaintext highlighter-rouge">address</code> may only appear at most once in <code class="language-plaintext highlighter-rouge">access_list</code></li>
<li>Each <code class="language-plaintext highlighter-rouge">storage_key</code> may only appear at most once in <code class="language-plaintext highlighter-rouge">storage_keys</code></li>
<li>Each <code class="language-plaintext highlighter-rouge">txn_index</code> may only appear at most once in <code class="language-plaintext highlighter-rouge">txn_index_and_keys</code></li>
</ul>
<p>All sorting is in increasing order.</p>
<h3 id="accesslistroot">
<a href="#accesslistroot" class="anchor-link"></a> AccessListRoot
</h3>
<p>An <code class="language-plaintext highlighter-rouge">AccessListRoot</code> is a URN <em>like</em> encoding <code class="language-plaintext highlighter-rouge">Hash/Commitment</code> of the canonical <code class="language-plaintext highlighter-rouge">access_list</code> as well as the construction type ( <code class="language-plaintext highlighter-rouge">sha256</code> ) and serialization type ( <code class="language-plaintext highlighter-rouge">json</code> ), i.e.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AccessListRoot := "urn:sha256:json:0x${ SHA256( access_list.toJSONString('utf8') ).toHexString() }"
</code></pre></div></div>
<p>where <code class="language-plaintext highlighter-rouge">0x${ SHA256 (...)...}</code> is the <code class="language-plaintext highlighter-rouge">SHA256</code> hashed <code class="language-plaintext highlighter-rouge">32</code> bytes hex string as indicated by leading <code class="language-plaintext highlighter-rouge">0x</code>.</p>
<h3 id="additional-block-validation">
<a href="#additional-block-validation" class="anchor-link"></a> Additional Block Validation
</h3>
<p>Validating a new block requires an additional validation check that the blockâ€™s <code class="language-plaintext highlighter-rouge">AccessListRoot</code> matches the one generated by executing the block using the construction as defined by the <code class="language-plaintext highlighter-rouge">AccessListRoot</code> URN.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<h3 id="sorting-of-canonical-access_list">
<a href="#sorting-of-canonical-access_list" class="anchor-link"></a> Sorting of canonical <code class="language-plaintext highlighter-rouge">access_list</code>
</h3>
<p>It is specified to be sorted in lexicographic ordering or integer sorting wherever applicable and specified. Sorting with respect to access time was considered but didnâ€™t seem to provide any additional benefit at the cost of adding implementation complexity and bookkeeping.</p>
<h3 id="accesslistroot-1">
<a href="#accesslistroot-1" class="anchor-link"></a> <code class="language-plaintext highlighter-rouge">AccessListRoot</code>
</h3>
<p><code class="language-plaintext highlighter-rouge">AccessListRoot</code> is generated to prevent any <em>griefing</em> attacks and hence will need to be included (and validated) in the <em>block header</em>.
Even though <code class="language-plaintext highlighter-rouge">AccessListRoot</code> is currently specified to be a simple <code class="language-plaintext highlighter-rouge">sha256</code> hash of the canonical <code class="language-plaintext highlighter-rouge">access_list</code>, it would be beneficial to consider other constructions</p>
<ul>
<li>a tree structure (<code class="language-plaintext highlighter-rouge">merkle</code>/<code class="language-plaintext highlighter-rouge">verkle</code>). It will be a bit more expensive but will enable partial downloading, inspection and validation of the <code class="language-plaintext highlighter-rouge">access_list</code>.</li>
<li>a normal <code class="language-plaintext highlighter-rouge">kate</code> commitment can also be generated to enable this partial capability and is recommended as validating partial fetch of access list chunks would be very simple.</li>
</ul>
<p>Also serialization of the <code class="language-plaintext highlighter-rouge">access_list</code> is currently specified as a normal <code class="language-plaintext highlighter-rouge">JSON String</code> dump and these parameters could vary from construction to construction, but for the sake of simplicity, it can always be <code class="language-plaintext highlighter-rouge">sha256</code> hashed to get a consistent <code class="language-plaintext highlighter-rouge">32</code> bytes hex string root.</p>
<p>So this AccessListRoot could evolve to <code class="language-plaintext highlighter-rouge">urn:merkle:ssz:...</code> or to <code class="language-plaintext highlighter-rouge">urn:kate:...</code> or to any other scheme as per requirement. And the idea of having the <code class="language-plaintext highlighter-rouge">AccessListRoot</code> as URN <em>like</em> structure is to enable upgradation to these paths without affecting block structure.</p>
<h3 id="future-extensions-of-access_list">
<a href="#future-extensions-of-access_list" class="anchor-link"></a> Future extensions of <code class="language-plaintext highlighter-rouge">access_list</code>
</h3>
<p>We can extend the notion of a blockâ€™s <code class="language-plaintext highlighter-rouge">access_list</code> to include witnesses:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>access_list := Set[ 
    Address,
    List [ AddressWitnesses ],
    Set  [ AccessedStorageKey, List [ StorageKeyWitnesses] ],        
    Set  [ AccessedInBlockTransactionNumber, List [ AccessedStorageKeys ] ]
]
</code></pre></div></div>
<p>and then get to define the a canonical specification for building the fingerprint.
This will allow an incremental path to partial or full statelessness, where it would be easy to bundle/request <strong>witnesses</strong> using this <code class="language-plaintext highlighter-rouge">access_list</code>.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>The extra block validation will only be mandatory post the block number this EIP comes into effect, but the clients can still provide a way to generate (and possibly store) this access list on request (via the <code class="language-plaintext highlighter-rouge">JSON/RPC</code> api). However this is optional and client dependent.</p>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>There are no known security issues as a result of this change.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/g11in">Gajinder Singh</a>, <a href="https://github.com/pipermerriam">Piper Merriam</a>, "EIP-3584: Block Access List [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 3584, May 2021. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-3584.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-3584: Block Access List [DRAFT]",
    "author": "Gajinder Singh (@g11in), Piper Merriam (@pipermerriam)",
    "name": "EIP-3584: Block Access List [DRAFT]",
    "dateCreated": "2021-05-22",
    "datePublished": "2021-05-22",

    "discussionUrl": "https://ethresear.ch/t/block-access-list-v0-1/9505",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2021"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
