<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-1051: Overflow checking for the EVM</title>
<meta property="og:title" content="EIP-1051: Overflow checking for the EVM" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-1051" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-1051" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
ðŸš§ This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-1051: Overflow checking for the EVM
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1051.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="/cdn-cgi/l/email-protection#2140534042494f4845614f4e55454e550f4f4455">Nick Johnson</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-arithmetic-overflow-detection-for-the-evm/261">https://ethereum-magicians.org/t/eip-arithmetic-overflow-detection-for-the-evm/261</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2018-05-02</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a></li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#test-cases">Test Cases</a></li>
<li><a href="#implementation">Implementation</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>This EIP adds overflow checking for EVM arithmetic operations, and two new opcodes that check and clear the overflow flags.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>The correct functioning of many contracts today is dependent on detecting and preventing overflow of arithmetic operations. Since the EVM operates on mod 2^256 integers and provides no built-in overflow detection or prevention, this requires manual checks on every arithmetic operation.</p>
<p>In the interests of facilitating efficient and secure contracts, we propose new opcodes that permit efficient detection of overflows, which can be checked periodically rather than after each operation.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>Two new flags are added to the EVM state: overflow (<code class="language-plaintext highlighter-rouge">ovf</code>) and signed overflow (<code class="language-plaintext highlighter-rouge">sovf</code>).</p>
<p>The <code class="language-plaintext highlighter-rouge">ovf</code> flag is set in the following circumstances:</p>
<ul>
<li>When an <code class="language-plaintext highlighter-rouge">ADD</code> (<code class="language-plaintext highlighter-rouge">0x01</code>) opcode, with both inputs treated as unsigned integers, produces an ideal output in excess of 2^256 - 1.</li>
<li>When a <code class="language-plaintext highlighter-rouge">SUB</code> (<code class="language-plaintext highlighter-rouge">0x03</code>) opcode, with both inputs treated as unsigned integers, produces an ideal output less than 0.</li>
<li>When a <code class="language-plaintext highlighter-rouge">MUL</code>(<code class="language-plaintext highlighter-rouge">0x02</code>) opcode, with both inputs treated as unsigned integers, produces an ideal output in excess of 2^256 - 1.</li>
</ul>
<p>The <code class="language-plaintext highlighter-rouge">sovf</code> flag is set whenever the <code class="language-plaintext highlighter-rouge">ovf</code> flag is set, and additionally in the following circumstances:</p>
<ul>
<li>When an <code class="language-plaintext highlighter-rouge">ADD</code> opcode with both inputs having the same MSB results in the output having a different MSB (eg, <code class="language-plaintext highlighter-rouge">(+a) + (+b) = (-c)</code> or <code class="language-plaintext highlighter-rouge">(-a) + (-b) = (+c)</code>).</li>
<li>When a <code class="language-plaintext highlighter-rouge">SUB</code> opcode occurs and the result has the same MSB as the subtractand (second argument) (eg, <code class="language-plaintext highlighter-rouge">(+a) - (-b) = (-c)</code> or <code class="language-plaintext highlighter-rouge">(-a) - (+b) = (+c)</code>.</li>
<li>When a <code class="language-plaintext highlighter-rouge">MUL</code> opcode with both inputs being positive has a negative output.</li>
<li>When a <code class="language-plaintext highlighter-rouge">MUL</code> opcode with both inputs being negative has a negative output.</li>
<li>When a <code class="language-plaintext highlighter-rouge">MUL</code> opcode with one negative input and one positive input has a positive output.</li>
</ul>
<p>A new opcode, <code class="language-plaintext highlighter-rouge">OFV</code> is added, with number <code class="language-plaintext highlighter-rouge">0x0c</code>. This opcode takes 0 arguments from the stack. When executed, it pushes <code class="language-plaintext highlighter-rouge">1</code> if the <code class="language-plaintext highlighter-rouge">ovf</code> flag is set, and <code class="language-plaintext highlighter-rouge">0</code> otherwise. It then sets the <code class="language-plaintext highlighter-rouge">ovf</code> flag to false.</p>
<p>A new opcode, <code class="language-plaintext highlighter-rouge">SOVF</code> is added, with number <code class="language-plaintext highlighter-rouge">0x0d</code>. This opcode takes 0 arguments from the stack. When executed, it pushes <code class="language-plaintext highlighter-rouge">1</code> if the <code class="language-plaintext highlighter-rouge">sovf</code> flag is set, and <code class="language-plaintext highlighter-rouge">0</code> otherwise. It then sets the <code class="language-plaintext highlighter-rouge">sovf</code> flag to false.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>Any change to implement overflow protection needs to preserve behaviour of existing contracts, which precludes many changes to the arithmetic operations themselves. One option would be to provide an opcode that enables overflow protection, causing a throw or revert if an overflow happens. However, this limits the manner in which overflows can be handled.</p>
<p>Instead, we replicate functionality from real world CPUs, which typically implement â€˜carryâ€™ and â€˜overflowâ€™ flags.</p>
<p>Separate flags for signed and unsigned overflow are necessary due to the fact that a signed overflow may not result in an unsigned overflow.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>This EIP introduces no backwards compatibility issues.</p>
<h2 id="test-cases">
<a href="#test-cases" class="anchor-link"></a> Test Cases
</h2>
<p>TBD</p>
<h2 id="implementation">
<a href="#implementation" class="anchor-link"></a> Implementation
</h2>
<p>TBD</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="/cdn-cgi/l/email-protection#26475447454e484f426648495242495208484352">Nick Johnson</a>, "EIP-1051: Overflow checking for the EVM [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 1051, May 2018. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1051.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-1051: Overflow checking for the EVM [DRAFT]",
    "author": "Nick Johnson <arachnid@notdot.net>",
    "name": "EIP-1051: Overflow checking for the EVM [DRAFT]",
    "dateCreated": "2018-05-02",
    "datePublished": "2018-05-02",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-arithmetic-overflow-detection-for-the-evm/261",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2018"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
