<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-2544: ENS Wildcard Resolution</title>
<meta property="og:title" content="EIP-2544: ENS Wildcard Resolution" />
<meta name="description" content="Adds support for &quot;wildcard&quot; resolution of subdomains in ENS." />
<meta property="og:description" content="Adds support for &quot;wildcard&quot; resolution of subdomains in ENS." />
<meta name="twitter:description" content="Adds support for &quot;wildcard&quot; resolution of subdomains in ENS." />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-2544" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-2544" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="draft">
⚠️ This EIP is not recommended for general use or implementation as it is likely to change.
</div>
<div class="home">
<h1 class="page-heading">
EIP-2544: ENS Wildcard Resolution
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2544.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Adds support for &quot;wildcard&quot; resolution of subdomains in ENS.</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/arachnid">Nick Johnson</a>, <a href="https://github.com/0age">0age</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-2544-ens-wildcard-resolution">https://ethereum-magicians.org/t/eip-2544-ens-wildcard-resolution</a></td></tr>
<tr><th>Status</th><td>Draft
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2020-02-28</td></tr>
<tr><th>Requires</th><td>
<a href="eip-137">137</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#pseudocode">Pseudocode</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>The Ethereum Name Service Specification (EIP-137) establishes a two-step name resolution process. First, an ENS client performs the namehash algorithm on the name to determine the associated “node”, and supplies that node to the ENS Registry contract to determine the resolver. Then, if a resolver has been set on the Registry, the client supplies that same node to the resolver contract, which will return the associated address or other record.</p>
<p>As currently specified, this process terminates if a resolver is not set on the ENS Registry for a given node. This EIP changes the name resolution process by adding an additional step if a resolver is not set for a domain. This step strips out the leftmost label from the name, derives the node of the new fragment, and supplies that node to the ENS Registry. If a resolver is located for that node, the client supplies the original, complete node to that resolver contract to derive the relevant records. This step is repeated until a node with a resolver is found.</p>
<p>Further, this specification defines a new way for resolvers to resolve names, using a unified <code class="language-plaintext highlighter-rouge">resolve()</code> method that permits more flexible handling of name resolution.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Many applications such as wallet providers, exchanges, and dapps have expressed a desire to issue ENS names for their users via custom subdomains on a shared parent domain. However, the cost of doing so is currently prohibitive for large user bases, as a distinct record must be set on the ENS Registry for each subdomain.</p>
<p>Furthermore, users cannot immediately utilize these subdomains upon account creation, as the transaction to assign a resolver for the node of the subdomain must first be submitted and mined on-chain. This adds unnecessary friction when onboarding new users, who coincidentally would often benefit greatly from the usability improvements afforded by an ENS name.</p>
<p>Enabling wildcard support allows for the design of more advanced resolvers that deterministically generate addresses and other records for unassigned subdomains. The generated addresses could map to counterfactual contract deployment addresses (i.e. <code class="language-plaintext highlighter-rouge">CREATE2</code> addresses), to designated “fallback” addresses, or other schemes. Additionally, individual resolvers would still be assignable to any given subdomain, which would supersede the wildcard resolution using the parent resolver.</p>
<p>Another critical motivation with EIP-2544 is to enable wildcard resolution in a backwards-compatible fashion. It does not require modifying the current ENS Registry contract or any existing resolvers, and continues to support existing ENS records — legacy ENS clients would simply fail to resolve wildcard records.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.</p>
<p>Let:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">namehash</code> be the algorithm defined in EIP 137.</li>
<li><code class="language-plaintext highlighter-rouge">dnsencode</code> be the process for encoding DNS names specified in section 3.1 of RFC1035, with the exception that there is no limit on the total length of the encoded name. The empty string is encoded identically to the name ‘.’, as a single 0-octet.</li>
 <li><code class="language-plaintext highlighter-rouge">parent</code> be a function that removes the first label from a name (eg, <code class="language-plaintext highlighter-rouge">parent('foo.eth') = 'eth'</code>). <code class="language-plaintext highlighter-rouge">parent('tld')</code> is defined as the empty string ‘’.</li>
<li><code class="language-plaintext highlighter-rouge">ens</code> is the ENS registry contract for the current network.</li>
</ul>
<p>EIP-2544-compliant ENS resolvers MAY implement the following function interface:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface ExtendedResolver {
    function resolve(bytes calldata name, bytes calldata data) external view returns(bytes);
}
</code></pre></div></div>
<p>If a resolver implements this function, it MUST return true when <code class="language-plaintext highlighter-rouge">supportsInterface()</code> is called on it with the interface’s ID, 0xTBD.</p>
<p>ENS clients will call <code class="language-plaintext highlighter-rouge">resolve</code> with the DNS-encoded name to resolve and the encoded calldata for a resolver function (as specified in EIP-137 and elsewhere); the function MUST either return valid return data for that function, or revert if it is not supported.</p>
<p>EIP-2544-compliant ENS clients MUST perform the following procedure when determining the resolver for a given name:</p>
<ol>
<li>Set <code class="language-plaintext highlighter-rouge">currentname = name</code></li>
<li>Set <code class="language-plaintext highlighter-rouge">resolver = ens.resolver(namehash(currentname))</code></li>
<li>If <code class="language-plaintext highlighter-rouge">resolver</code> is not the zero address, halt and return <code class="language-plaintext highlighter-rouge">resolver</code>.</li>
<li>If <code class="language-plaintext highlighter-rouge">name</code> is the empty name (‘’ or ‘.’), halt and return null.</li>
<li>Otherwise, set <code class="language-plaintext highlighter-rouge">currentname = parent(currentname)</code> and go to 2.</li>
</ol>
<p>If the procedure above returns null, name resolution MUST terminate unsuccessfully. Otherwise, EIP-2544-compliant ENS clients MUST perform the following procedure when resolving a record:</p>
<ol>
<li>Set <code class="language-plaintext highlighter-rouge">calldata</code> to the ABI-encoded call data for the resolution function required - for example, the ABI encoding of <code class="language-plaintext highlighter-rouge">addr(namehash(name))</code> when resolving the <code class="language-plaintext highlighter-rouge">addr</code> record.</li>
<li>Set <code class="language-plaintext highlighter-rouge">supports2544 = resolver.supportsInterface(0xTBD)</code>.</li>
<li>If <code class="language-plaintext highlighter-rouge">supports2544</code> is true, set <code class="language-plaintext highlighter-rouge">result = resolver.resolve(dnsencode(name), calldata)</code></li>
<li>Otherwise, set <code class="language-plaintext highlighter-rouge">result</code> to the result of calling <code class="language-plaintext highlighter-rouge">resolver</code> with <code class="language-plaintext highlighter-rouge">calldata</code>.</li>
<li>Return <code class="language-plaintext highlighter-rouge">result</code> after decoding it using the return data ABI of the corresponding resolution function (eg, for <code class="language-plaintext highlighter-rouge">addr()</code>, ABI-decode the result of <code class="language-plaintext highlighter-rouge">resolver.resolve()</code> as an <code class="language-plaintext highlighter-rouge">address</code>).</li>
</ol>
<p>Note that in all cases the resolution function (<code class="language-plaintext highlighter-rouge">addr()</code> etc) and the <code class="language-plaintext highlighter-rouge">resolve</code> function are supplied the original <code class="language-plaintext highlighter-rouge">name</code>, <em>not</em> the <code class="language-plaintext highlighter-rouge">currentname</code> found in the first stage of resolution.</p>
<h3 id="pseudocode">
<a href="#pseudocode" class="anchor-link"></a> Pseudocode
</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function getResolver(name) {
    for(let currentname = name; currentname !== ''; currentname = parent(currentname)) {
        const node = namehash(currentname);
        const resolver = ens.resolver(node);
        if(resolver != '0x0000000000000000000000000000000000000000') {
            return resolver;
        }
    }
    return null;
}

function resolve(name, func, ...args) {
    const resolver = getResolver(name);
    if(resolver === null) {
        return null;
    }
    const supports2544 = resolver.supportsInterface('0xTBD');
    let result;
    if(supports2544) {
        const calldata = resolver[func].encodeFunctionCall(namehash(name), ...args);
        result = resolver.resolve(dnsencode(name), calldata);
        return resolver[func].decodeReturnData(result);
    } else {
        return resolver[func](...args);
    }
}
</code></pre></div></div>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>The proposed implementation supports wildcard resolution in a manner that minimizes the impact to existing systems. It also reuses existing algorithms and procedures to the greatest possible extent, thereby easing the burden placed on authors and maintainers of various ENS clients.</p>
<p>It also recognizes an existing consensus concerning the desirability of wildcard resolution for ENS, enabling more widespread adoption of the original specification by solving for a key scalability obstacle.</p>
<p>While introducing an optional <code class="language-plaintext highlighter-rouge">resolve</code> function for resolvers, taking the unhashed name and calldata for a resolution function increases implementation complexity, it provides a means for resolvers to obtain plaintext labels and act accordingly, which enables many wildcard-related use-cases that would otherwise not be possible - for example, a wildcard resolver could resolve <code class="language-plaintext highlighter-rouge">id.nifty.eth</code> to the owner of the NFT with id <code class="language-plaintext highlighter-rouge">id</code> in some collection. With only namehashes to work with, this is not possible. Resolvers with simpler requirements can continue to simply implement resolution functions directly and omit support for the <code class="language-plaintext highlighter-rouge">resolve</code> function entirely.</p>
<p>The DNS wire format is used for encoding names as it permits quick and gas-efficient hashing of names, as well as other common operations such as fetching or removing individual labels; in contrast, dot-separated names require iterating over every character in the name to find the delimiter.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>Existing ENS clients that are compliant with EIP-137 will fail to resolve wildcard records and refuse to interact with them, while those compliant with EIP-2544 will continue to correctly resolve, or reject, existing ENS records. Resolvers wishing to implement the new <code class="language-plaintext highlighter-rouge">resolve</code> function for non-wildcard use-cases (eg, where the resolver is set directly on the name being resolved) should consider what to return to legacy clients that call the individual resolution functions for maximum compatibility.</p>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>While compliant ENS clients will continue to refuse to resolve records without a resolver, there is still the risk that an improperly-configured client will refer to an incorrect resolver, or will not reject interactions with the null address when a resolver cannot be located.</p>
<p>Additionally, resolvers supporting completely arbitrary wildcard subdomain resolution will increase the likelihood of funds being sent to unintended recipients as a result of typos. Applications that implement such resolvers should consider making additional name validation available to clients depending on the context, or implementing features that support recoverability of funds.</p>
<p>There is also the possibility that some applications might require that no resolver be set for certain subdomains. For this to be problematic, the parent domain would need to successfully resolve the given subdomain node — to the knowledge of the authors, no application currently supports this feature or expects that subdomains should not resolve to a record.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/arachnid">Nick Johnson</a>, <a href="https://github.com/0age">0age</a>, "EIP-2544: ENS Wildcard Resolution [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 2544, February 2020. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-2544.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-2544: ENS Wildcard Resolution [DRAFT]",
    "author": "Nick Johnson (@arachnid), 0age (@0age)",
    "name": "EIP-2544: ENS Wildcard Resolution [DRAFT]",
    "dateCreated": "2020-02-28",
    "datePublished": "2020-02-28",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-2544-ens-wildcard-resolution",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2020"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
