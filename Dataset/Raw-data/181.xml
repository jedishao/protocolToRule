<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-181: ENS support for reverse resolution of Ethereum addresses</title>
<meta property="og:title" content="EIP-181: ENS support for reverse resolution of Ethereum addresses" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-181" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-181" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-181: ENS support for reverse resolution of Ethereum addresses
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-181.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="/cdn-cgi/l/email-protection#18796a797b7076717c5876776c7c776c36767d6c">Nick Johnson</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2016-12-01</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#registrar">Registrar</a>
<ul>
<li><a href="#function-claimaddress-owner-returns-bytes32-node">function claim(address owner) returns (bytes32 node)</a></li>
<li><a href="#function-claimwithresolveraddress-owner-address-resolver-returns-bytes32-node">function claimWithResolver(address owner, address resolver) returns (bytes32 node)</a></li>
<li><a href="#function-setnamestring-name-returns-bytes32-node">function setName(string name) returns (bytes32 node)</a></li>
</ul>
</li>
<li><a href="#resolver-interface">Resolver interface</a></li>
</ul>
</li>
<li><a href="#appendix-1-registrar-implementation">Appendix 1: Registrar implementation</a>
<ul>
<li><a href="#copyright">Copyright</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h1>
<p>This EIP specifies a TLD, registrar, and resolver interface for reverse resolution of Ethereum addresses using ENS. This permits associating a human-readable name with any Ethereum blockchain address. Resolvers can be certain that the reverse record was published by the owner of the Ethereum address in question.</p>
<h1 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h1>
<p>While name services are mostly used for forward resolution - going from human-readable identifiers to machine-readable ones - there are many use-cases in which reverse resolution is useful as well:</p>
<ul>
<li>Applications that allow users to monitor accounts benefit from showing the name of an account instead of its address, even if it was originally added by address.</li>
<li>Attaching metadata such as descriptive information to an address allows retrieving this information regardless of how the address was originally discovered.</li>
<li>Anyone can configure a name to resolve to an address, regardless of ownership of that address. Reverse records allow the owner of an address to claim a name as authoritative for that address.</li>
</ul>
<h1 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h1>
<p>Reverse ENS records are stored in the ENS hierarchy in the same fashion as regular records, under a reserved domain, <code class="language-plaintext highlighter-rouge">addr.reverse</code>. To generate the ENS name for a given account’s reverse records, convert the account to hexadecimal representation in lower-case, and append <code class="language-plaintext highlighter-rouge">addr.reverse</code>. For instance, the ENS registry’s address at <code class="language-plaintext highlighter-rouge">0x112234455c3a32fd11230c42e7bccd4a84e02010</code> has any reverse records stored at <code class="language-plaintext highlighter-rouge">112234455c3a32fd11230c42e7bccd4a84e02010.addr.reverse</code>.</p>
<p>Note that this means that contracts wanting to do dynamic reverse resolution of addresses will need to perform hex encoding in the contract.</p>
<h2 id="registrar">
<a href="#registrar" class="anchor-link"></a> Registrar
</h2>
<p>The owner of the <code class="language-plaintext highlighter-rouge">addr.reverse</code> domain will be a registrar that permits the caller to take ownership of
the reverse record for their own address. It provides the following methods:</p>
<h3 id="function-claimaddress-owner-returns-bytes32-node">
<a href="#function-claimaddress-owner-returns-bytes32-node" class="anchor-link"></a> function claim(address owner) returns (bytes32 node)
</h3>
<p>When called by account <code class="language-plaintext highlighter-rouge">x</code>, instructs the ENS registry to transfer ownership of the name <code class="language-plaintext highlighter-rouge">hex(x) + '.addr.reverse'</code> to the provided address, and return the namehash of the ENS record thus transferred.</p>
<p>Allowing the caller to specify an owner other than themselves for the relevant node facilitates contracts that need accurate reverse ENS entries delegating this to their creators with a minimum of code inside their constructor:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reverseRegistrar.claim(msg.sender)
</code></pre></div></div>
<h3 id="function-claimwithresolveraddress-owner-address-resolver-returns-bytes32-node">
<a href="#function-claimwithresolveraddress-owner-address-resolver-returns-bytes32-node" class="anchor-link"></a> function claimWithResolver(address owner, address resolver) returns (bytes32 node)
</h3>
<p>When called by account <code class="language-plaintext highlighter-rouge">x</code>, instructs the ENS registry to set the resolver of the name <code class="language-plaintext highlighter-rouge">hex(x) + '.addr.reverse'</code> to the specified resolver, then transfer ownership of the name to the provided address, and return the namehash of the ENS record thus transferred. This method facilitates setting up a custom resolver and owner in fewer transactions than would be required if calling <code class="language-plaintext highlighter-rouge">claim</code>.</p>
<h3 id="function-setnamestring-name-returns-bytes32-node">
<a href="#function-setnamestring-name-returns-bytes32-node" class="anchor-link"></a> function setName(string name) returns (bytes32 node)
</h3>
<p>When called by account <code class="language-plaintext highlighter-rouge">x</code>, sets the resolver for the name <code class="language-plaintext highlighter-rouge">hex(x) + '.addr.reverse'</code> to a default resolver, and sets the name record on that name to the specified name. This method facilitates setting up simple reverse records for users in a single transaction.</p>
<h2 id="resolver-interface">
<a href="#resolver-interface" class="anchor-link"></a> Resolver interface
</h2>
<p>A new resolver interface is defined, consisting of the following method:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function name(bytes32 node) constant returns (string);
</code></pre></div></div>
<p>Resolvers that implement this interface must return a valid ENS name for the requested node, or the empty string if no name is defined for the requested node.</p>
<p>The interface ID of this interface is 0x691f3431.</p>
<p>Future EIPs may specify more record types appropriate to reverse ENS records.</p>
<h1 id="appendix-1-registrar-implementation">
<a href="#appendix-1-registrar-implementation" class="anchor-link"></a> Appendix 1: Registrar implementation
</h1>
<p>This registrar, written in Solidity, implements the specifications outlined above.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pragma solidity ^0.4.10;

import "./AbstractENS.sol";

contract Resolver {
    function setName(bytes32 node, string name) public;
}

/**
 * @dev Provides a default implementation of a resolver for reverse records,
 * which permits only the owner to update it.
 */
contract DefaultReverseResolver is Resolver {
    AbstractENS public ens;
    mapping(bytes32=&gt;string) public name;

    /**
     * @dev Constructor
     * @param ensAddr The address of the ENS registry.
     */
    function DefaultReverseResolver(AbstractENS ensAddr) {
        ens = ensAddr;
    }

    /**
     * @dev Only permits calls by the reverse registrar.
     * @param node The node permission is required for.
     */
    modifier owner_only(bytes32 node) {
        require(msg.sender == ens.owner(node));
        _;
    }

    /**
     * @dev Sets the name for a node.
     * @param node The node to update.
     * @param _name The name to set.
     */
    function setName(bytes32 node, string _name) public owner_only(node) {
        name[node] = _name;
    }
}

contract ReverseRegistrar {
    // namehash('addr.reverse')
    bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;

    AbstractENS public ens;
    Resolver public defaultResolver;

    /**
     * @dev Constructor
     * @param ensAddr The address of the ENS registry.
     * @param resolverAddr The address of the default reverse resolver.
     */
    function ReverseRegistrar(AbstractENS ensAddr, Resolver resolverAddr) {
        ens = ensAddr;
        defaultResolver = resolverAddr;
    }

    /**
     * @dev Transfers ownership of the reverse ENS record associated with the
     *      calling account.
     * @param owner The address to set as the owner of the reverse record in ENS.
     * @return The ENS node hash of the reverse record.
     */
    function claim(address owner) returns (bytes32 node) {
        return claimWithResolver(owner, 0);
    }

    /**
     * @dev Transfers ownership of the reverse ENS record associated with the
     *      calling account.
     * @param owner The address to set as the owner of the reverse record in ENS.
     * @param resolver The address of the resolver to set; 0 to leave unchanged.
     * @return The ENS node hash of the reverse record.
     */
    function claimWithResolver(address owner, address resolver) returns (bytes32 node) {
        var label = sha3HexAddress(msg.sender);
        node = sha3(ADDR_REVERSE_NODE, label);
        var currentOwner = ens.owner(node);

        // Update the resolver if required
        if(resolver != 0 &amp;&amp; resolver != ens.resolver(node)) {
            // Transfer the name to us first if it's not already
            if(currentOwner != address(this)) {
                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, this);
                currentOwner = address(this);
            }
            ens.setResolver(node, resolver);
        }

        // Update the owner if required
        if(currentOwner != owner) {
            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);
        }

        return node;
    }

    /**
     * @dev Sets the `name()` record for the reverse ENS record associated with
     * the calling account. First updates the resolver to the default reverse
     * resolver if necessary.
     * @param name The name to set for this address.
     * @return The ENS node hash of the reverse record.
     */
    function setName(string name) returns (bytes32 node) {
        node = claimWithResolver(this, defaultResolver);
        defaultResolver.setName(node, name);
        return node;
    }

    /**
     * @dev Returns the node hash for a given account's reverse records.
     * @param addr The address to hash
     * @return The ENS node hash.
     */
    function node(address addr) constant returns (bytes32 ret) {
        return sha3(ADDR_REVERSE_NODE, sha3HexAddress(addr));
    }

    /**
     * @dev An optimised function to compute the sha3 of the lower-case
     *      hexadecimal representation of an Ethereum address.
     * @param addr The address to hash
     * @return The SHA3 hash of the lower-case hexadecimal encoding of the
     *         input address.
     */
    function sha3HexAddress(address addr) private returns (bytes32 ret) {
        addr; ret; // Stop warning us about unused variables
        assembly {
            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000
            let i := 40
        loop:
            i := sub(i, 1)
            mstore8(i, byte(and(addr, 0xf), lookup))
            addr := div(addr, 0x10)
            i := sub(i, 1)
            mstore8(i, byte(and(addr, 0xf), lookup))
            addr := div(addr, 0x10)
            jumpi(loop, i)
            ret := sha3(0, 40)
        }
    }
}
</code></pre></div></div>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="/cdn-cgi/l/email-protection#bedfccdfddd6d0d7dafed0d1cadad1ca90d0dbca">Nick Johnson</a>, "EIP-181: ENS support for reverse resolution of Ethereum addresses," <em>Ethereum Improvement Proposals</em>, no. 181, December 2016. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-181.</p>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-181: ENS support for reverse resolution of Ethereum addresses",
    "author": "Nick Johnson <arachnid@notdot.net>",
    "name": "EIP-181: ENS support for reverse resolution of Ethereum addresses",
    "dateCreated": "2016-12-01",
    "datePublished": "2016-12-01",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2016"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
