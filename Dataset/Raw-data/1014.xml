<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-1014: Skinny CREATE2</title>
<meta property="og:title" content="EIP-1014: Skinny CREATE2" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-1014" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-1014" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-1014: Skinny CREATE2
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1014.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/vbuterin">Vitalik Buterin</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2018-04-20</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#specification">Specification</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#clarifications">Clarifications</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
</div>
<h3 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h3>
<p>Adds a new opcode (<code class="language-plaintext highlighter-rouge">CREATE2</code>) at <code class="language-plaintext highlighter-rouge">0xf5</code>, which takes 4 stack arguments: endowment, memory_start, memory_length, salt. Behaves identically to <code class="language-plaintext highlighter-rouge">CREATE</code> (<code class="language-plaintext highlighter-rouge">0xf0</code>), except using <code class="language-plaintext highlighter-rouge">keccak256( 0xff ++ address ++ salt ++ keccak256(init_code))[12:]</code> instead of the usual sender-and-nonce-hash as the address where the contract is initialized at.</p>
<p>The <code class="language-plaintext highlighter-rouge">CREATE2</code> has the same <code class="language-plaintext highlighter-rouge">gas</code> schema as <code class="language-plaintext highlighter-rouge">CREATE</code>, but also an extra <code class="language-plaintext highlighter-rouge">hashcost</code> of <code class="language-plaintext highlighter-rouge">GSHA3WORD * ceil(len(init_code) / 32)</code>, to account for the hashing that must be performed. The <code class="language-plaintext highlighter-rouge">hashcost</code> is deducted at the same time as memory-expansion gas and <code class="language-plaintext highlighter-rouge">CreateGas</code> is deducted: <em>before</em> evaluation of the resulting address and the execution of <code class="language-plaintext highlighter-rouge">init_code</code>.</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">0xff</code> is a single byte,</li>
<li><code class="language-plaintext highlighter-rouge">address</code> is always <code class="language-plaintext highlighter-rouge">20</code> bytes,</li>
<li><code class="language-plaintext highlighter-rouge">salt</code> is always <code class="language-plaintext highlighter-rouge">32</code> bytes (a stack item).</li>
</ul>
<p>The preimage for the final hashing round is thus always exactly <code class="language-plaintext highlighter-rouge">85</code> bytes long.</p>
<p>The coredev-call at 2018-08-10 decided to use the formula above.</p>
<h3 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h3>
<p>Allows interactions to (actually or counterfactually in channels) be made with addresses that do not exist yet on-chain but can be relied on to only possibly eventually contain code that has been created by a particular piece of init code. Important for state-channel use cases that involve counterfactual interactions with contracts.</p>
<h3 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h3>
<h4 id="address-formula">
<a href="#address-formula" class="anchor-link"></a> Address formula
</h4>
<ul>
<li>Ensures that addresses created with this scheme cannot collide with addresses created using the traditional <code class="language-plaintext highlighter-rouge">keccak256(rlp([sender, nonce]))</code> formula, as <code class="language-plaintext highlighter-rouge">0xff</code> can only be a starting byte for RLP for data many petabytes long.</li>
<li>Ensures that the hash preimage has a fixed size,</li>
</ul>
<h4 id="gas-cost">
<a href="#gas-cost" class="anchor-link"></a> Gas cost
</h4>
<p>Since address calculation depends on hashing the <code class="language-plaintext highlighter-rouge">init_code</code>, it would leave clients open to DoS attacks if executions could repeatedly cause hashing of large pieces of <code class="language-plaintext highlighter-rouge">init_code</code>, since expansion of memory is paid for only once. This EIP uses the same cost-per-word as the <code class="language-plaintext highlighter-rouge">SHA3</code> opcode.</p>
<h3 id="clarifications">
<a href="#clarifications" class="anchor-link"></a> Clarifications
</h3>
<p>The <code class="language-plaintext highlighter-rouge">init_code</code> is the code that, when executed, produces the runtime bytecode that will be placed into the state, and which typically is used by high level languages to implement a ‘constructor’.</p>
<p>This EIP makes collisions possible. The behaviour at collisions is specified by <a href="https://github.com/ethereum/EIPs/issues/684">EIP-684</a>:</p>
<blockquote>
<p>If a contract creation is attempted, due to either a creation transaction or the <code class="language-plaintext highlighter-rouge">CREATE</code> (or future <code class="language-plaintext highlighter-rouge">CREATE2</code>) opcode, and the destination address already has either nonzero nonce, or nonempty code, then the creation throws immediately, with exactly the same behavior as would arise if the first byte in the init code were an invalid opcode. This applies retroactively starting from genesis.</p>
</blockquote>
<p>Specifically, if <code class="language-plaintext highlighter-rouge">nonce</code> or <code class="language-plaintext highlighter-rouge">code</code> is nonzero, then the create-operation fails.</p>
<p>With <a href="/EIPS/eip-161">EIP-161</a></p>
<blockquote>
<p>Account creation transactions and the <code class="language-plaintext highlighter-rouge">CREATE</code> operation SHALL, prior to the execution of the initialisation code, increment the nonce over and above its normal starting value by one</p>
</blockquote>
<p>This means that if a contract is created in a transaction, the <code class="language-plaintext highlighter-rouge">nonce</code> is immediately non-zero, with the side-effect that a collision within the same transaction will always fail – even if it’s carried out from the <code class="language-plaintext highlighter-rouge">init_code</code> itself.</p>
<p>It should also be noted that <code class="language-plaintext highlighter-rouge">SELFDESTRUCT</code> (<code class="language-plaintext highlighter-rouge">0xff</code>) has no immediate effect on <code class="language-plaintext highlighter-rouge">nonce</code> or <code class="language-plaintext highlighter-rouge">code</code>, thus a contract cannot be destroyed and recreated within one transaction.</p>
<h3 id="examples">
<a href="#examples" class="anchor-link"></a> Examples
</h3>
<p>Example 0</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000000000000000000000000000</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0x00</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32006</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0x4D1A2e2bB4F88F0250f26Ffff098B0b30B26BF38</code></li>
</ul>
<p>Example 1</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0xdeadbeef00000000000000000000000000000000</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000000000000000000000000000</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0x00</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32006</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0xB928f69Bb1D91Cd65274e3c79d8986362984fDA3</code></li>
</ul>
<p>Example 2</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0xdeadbeef00000000000000000000000000000000</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x000000000000000000000000feed000000000000000000000000000000000000</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0x00</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32006</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0xD04116cDd17beBE565EB2422F2497E06cC1C9833</code></li>
</ul>
<p>Example 3</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000000000000000000000000000</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0xdeadbeef</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32006</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0x70f2b2914A2a4b783FaEFb75f459A580616Fcb5e</code></li>
</ul>
<p>Example 4</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0x00000000000000000000000000000000deadbeef</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x00000000000000000000000000000000000000000000000000000000cafebabe</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0xdeadbeef</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32006</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0x60f3f640a8508fC6a86d45DF051962668E1e8AC7</code></li>
</ul>
<p>Example 5</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0x00000000000000000000000000000000deadbeef</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x00000000000000000000000000000000000000000000000000000000cafebabe</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32012</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0x1d8bfDC5D46DC4f61D6b6115972536eBE6A8854C</code></li>
</ul>
<p>Example 6</p>
<ul>
<li>address <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000</code></li>
<li>salt <code class="language-plaintext highlighter-rouge">0x0000000000000000000000000000000000000000000000000000000000000000</code></li>
<li>init_code <code class="language-plaintext highlighter-rouge">0x</code></li>
<li>gas (assuming no mem expansion): <code class="language-plaintext highlighter-rouge">32000</code></li>
<li>result: <code class="language-plaintext highlighter-rouge">0xE33C0C7F7df4809055C3ebA6c09CFe4BaF1BD9e0</code></li>
</ul>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/vbuterin">Vitalik Buterin</a>, "EIP-1014: Skinny CREATE2," <em>Ethereum Improvement Proposals</em>, no. 1014, April 2018. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1014.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-1014: Skinny CREATE2",
    "author": "Vitalik Buterin (@vbuterin)",
    "name": "EIP-1014: Skinny CREATE2",
    "dateCreated": "2018-04-20",
    "datePublished": "2018-04-20",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2018"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>

<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
