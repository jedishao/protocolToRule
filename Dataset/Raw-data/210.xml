<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-210: Blockhash refactoring</title>
<meta property="og:title" content="EIP-210: Blockhash refactoring" />
<meta name="description" content="" />
<meta property="og:description" content="" />
<meta name="twitter:description" content="" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-210" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-210" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="stagnant">
🚧 This EIP had no activity for at least 6 months.
</div>
<div class="home">
<h1 class="page-heading">
EIP-210: Blockhash refactoring
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-210.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3></h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/vbuterin">Vitalik Buterin</a></td></tr>
<tr><th>Status</th><td>Stagnant
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>Core</td></tr>
<tr><th>Created</th><td>2017-02-10</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#summary">Summary</a></li>
<li><a href="#parameters">Parameters</a></li>
<li><a href="#specification">Specification</a></li>
<li><a href="#blockhash_contract_code">BLOCKHASH_CONTRACT_CODE</a></li>
<li><a href="#rationale">Rationale</a></li>
</ul>
</div>
<h3 id="summary">
<a href="#summary" class="anchor-link"></a> Summary
</h3>
<p>Stores blockhashes in the state, reducing the protocol complexity and the need for client implementation complexity in order to process the BLOCKHASH opcode. Also extends the range of how far back blockhash checking can go, with the side effect of creating direct links between blocks with very distant block numbers, facilitating much more efficient initial light client syncing.</p>
<h3 id="parameters">
<a href="#parameters" class="anchor-link"></a> Parameters
</h3>
<ul>
<li><code class="language-plaintext highlighter-rouge">CONSTANTINOPLE_FORK_BLKNUM</code>: TBD</li>
<li><code class="language-plaintext highlighter-rouge">SUPER_USER</code>: 2**160 - 2</li>
<li><code class="language-plaintext highlighter-rouge">BLOCKHASH_CONTRACT_ADDR</code>: 0xf0 (ie. 240)</li>
<li><code class="language-plaintext highlighter-rouge">BLOCKHASH_CONTRACT_CODE</code>: see below</li>
</ul>
<h3 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h3>
<p>If <code class="language-plaintext highlighter-rouge">block.number == CONSTANTINOPLE_FORK_BLKNUM</code>, then when processing the block, before processing any transactions set the code of BLOCKHASH_CONTRACT_ADDR to BLOCKHASH_CONTRACT_CODE.</p>
<p>If <code class="language-plaintext highlighter-rouge">block.number &gt;= CONSTANTINOPLE_FORK_BLKNUM</code>, then when processing a block, before processing any transactions execute a call with the parameters:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">SENDER</code>: SUPER_USER</li>
<li><code class="language-plaintext highlighter-rouge">GAS</code>: 1000000</li>
<li><code class="language-plaintext highlighter-rouge">TO</code>: BLOCKHASH_CONTRACT_ADDR</li>
<li><code class="language-plaintext highlighter-rouge">VALUE</code>: 0</li>
<li><code class="language-plaintext highlighter-rouge">DATA</code>: &lt;32 bytes corresponding to the block’s prevhash&gt;</li>
</ul>
<p>If <code class="language-plaintext highlighter-rouge">block.number &gt;= CONSTANTINOPLE_FORK_BLKNUM + 256</code>, then the BLOCKHASH opcode instead returns the result of executing a call (NOT a transaction) with the parameters:</p>
<ul>
<li><code class="language-plaintext highlighter-rouge">SENDER</code>: <account from="" which="" the="" opcode="" was="" called=""></account></li>
<li><code class="language-plaintext highlighter-rouge">GAS</code>: 1000000</li>
<li><code class="language-plaintext highlighter-rouge">TO</code>: BLOCKHASH_CONTRACT_ADDR</li>
<li><code class="language-plaintext highlighter-rouge">VALUE</code>: 0</li>
<li><code class="language-plaintext highlighter-rouge">DATA</code>: 32 byte zero-byte-leftpadded integer representing the stack argument with which the opcode was called</li>
</ul>
<p>Also, for blocks where <code class="language-plaintext highlighter-rouge">block.number &gt;= CONSTANTINOPLE_FORK_BLKNUM</code>, the gas cost is increased from 20 to 800 to reflect the higher costs of processing the algorithm in the contract code.</p>
<h3 id="blockhash_contract_code">
<a href="#blockhash_contract_code" class="anchor-link"></a> BLOCKHASH_CONTRACT_CODE
</h3>
<p>The Serpent source code is:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">==</span> <span class="mh">0xfffffffffffffffffffffffffffffffffffffffe</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">bn</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">bn</span><span class="p">:</span>
                <span class="o">~</span><span class="n">sstore</span><span class="p">(</span><span class="n">offset</span> <span class="o">+</span> <span class="o">~</span><span class="n">mod</span><span class="p">(</span><span class="n">bn</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span> <span class="o">~</span><span class="n">calldataload</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
                <span class="k">if</span> <span class="o">~</span><span class="n">mod</span><span class="p">(</span><span class="n">bn</span><span class="p">,</span> <span class="mi">256</span><span class="p">):</span>
                    <span class="o">~</span><span class="n">stop</span><span class="p">()</span>
                <span class="n">bn</span> <span class="o">=</span> <span class="o">~</span><span class="n">div</span><span class="p">(</span><span class="n">bn</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
                <span class="n">offset</span> <span class="o">+=</span> <span class="mi">256</span>
    <span class="k">elif</span> <span class="o">~</span><span class="n">calldataload</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="o">~</span><span class="n">calldataload</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">block</span><span class="p">.</span><span class="n">number</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">tbn</span> <span class="o">=</span> <span class="o">~</span><span class="n">calldataload</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span>
            <span class="k">with</span> <span class="n">dist_minus_one</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">number</span> <span class="o">-</span> <span class="n">tbn</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">dist_minus_one</span> <span class="o">&gt;=</span> <span class="mi">256</span> <span class="o">&amp;&amp;</span> <span class="o">~</span><span class="n">mod</span><span class="p">(</span><span class="n">tbn</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">offset</span> <span class="o">+=</span> <span class="mi">256</span>
                    <span class="n">tbn</span> <span class="o">=</span> <span class="o">~</span><span class="n">div</span><span class="p">(</span><span class="n">tbn</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span> 
                    <span class="n">dist_minus_one</span> <span class="o">=</span> <span class="o">~</span><span class="n">div</span><span class="p">(</span><span class="n">dist_minus_one</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">dist_minus_one</span> <span class="o">&gt;=</span> <span class="mi">256</span><span class="p">:</span>
                    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="k">return</span><span class="p">(</span><span class="o">~</span><span class="n">sload</span><span class="p">(</span><span class="n">offset</span> <span class="o">+</span> <span class="o">~</span><span class="n">mod</span><span class="p">(</span><span class="n">tbn</span><span class="p">,</span> <span class="mi">256</span><span class="p">)))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>
<p>The EVM init code is:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x6100f58061000e60003961010356600073fffffffffffffffffffffffffffffffffffffffe33141561005857600143035b801561005257600035610100820683015561010081061561003f57005b6101008104905061010082019150610022565b506100f3565b600060003512151561006e574360003512610071565b60005b156100e7576000356001814303035b6101008112151561009857600061010083061461009b565b60005b156100ba57610100830192506101008204915061010081049050610080565b610100811215156100d057600060a052602060a0f35b610100820683015460c052602060c0f350506100f2565b600060e052602060e0f35b5b505b6000f3
</code></pre></div></div>
<p>The EVM bytecode that the contract code should be set to is:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x600073fffffffffffffffffffffffffffffffffffffffe33141561005857600143035b801561005257600035610100820683015561010081061561003f57005b6101008104905061010082019150610022565b506100f3565b600060003512151561006e574360003512610071565b60005b156100e7576000356001814303035b6101008112151561009857600061010083061461009b565b60005b156100ba57610100830192506101008204915061010081049050610080565b610100811215156100d057600060a052602060a0f35b610100820683015460c052602060c0f350506100f2565b600060e052602060e0f35b5b50
</code></pre></div></div>
<h3 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h3>
<p>This removes the need for implementations to have an explicit way to look into historical block hashes, simplifying the protocol definition and removing a large component of the “implied state” (information that is technically state but is not part of the state tree) and thereby making the protocol more “pure”. Additionally, it allows blocks to directly point to blocks far behind them, which enables extremely efficient and secure light client protocols.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/vbuterin">Vitalik Buterin</a>, "EIP-210: Blockhash refactoring [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 210, February 2017. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-210.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-210: Blockhash refactoring [DRAFT]",
    "author": "Vitalik Buterin (@vbuterin)",
    "name": "EIP-210: Blockhash refactoring [DRAFT]",
    "dateCreated": "2017-02-10",
    "datePublished": "2017-02-10",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2017"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
