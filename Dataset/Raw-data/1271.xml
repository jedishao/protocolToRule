<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-1271: Standard Signature Validation Method for Contracts</title>
<meta property="og:title" content="EIP-1271: Standard Signature Validation Method for Contracts" />
<meta name="description" content="Standard way to verify a signature when the account is a smart contract" />
<meta property="og:description" content="Standard way to verify a signature when the account is a smart contract" />
<meta name="twitter:description" content="Standard way to verify a signature when the account is a smart contract" />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-1271" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-1271" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="home">
<h1 class="page-heading">
EIP-1271: Standard Signature Validation Method for Contracts
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1271.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Standard way to verify a signature when the account is a smart contract</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/frangio">Francisco Giordano</a>, <a href="https://github.com/shrugs">Matt Condon</a>, <a href="https://github.com/PhABC">Philippe Castonguay</a>, <a href="https://github.com/abandeali1">Amir Bandeali</a>, <a href="https://github.com/izqui">Jorge Izquierdo</a>, <a href="https://github.com/catageek">Bertrand Masius</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://github.com/ethereum/EIPs/issues/1271">https://github.com/ethereum/EIPs/issues/1271</a></td></tr>
<tr><th>Status</th><td>Final
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2018-07-25</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a></li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#reference-implementation">Reference Implementation</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>Externally Owned Accounts (EOA) can sign messages with their associated private keys, but currently contracts cannot. We propose a standard way for any contracts to verify whether a signature on a behalf of a given contract is valid. This is possible via the implementation of a <code class="language-plaintext highlighter-rouge">isValidSignature(hash, signature)</code> function on the signing contract, which can be called to validate a signature.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>There are and will be many contracts that want to utilize signed messages for validation of rights-to-move assets or other purposes. In order for these contracts to be able to support non Externally Owned Accounts (i.e., contract owners), we need a standard mechanism by which a contract can indicate whether a given signature is valid or not on its behalf.</p>
<p>One example of an application that requires signatures to be provided would be decentralized exchanges with off-chain orderbook, where buy/sell orders are signed messages. In these applications, EOAs sign orders, signaling their desire to buy/sell a given asset and giving explicit permissions to the exchange smart contracts to conclude a trade via a signature. When it comes to contracts however, regular signatures are not possible since contracts do not possess a private key, hence this proposal.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <a href="https://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">^</span><span class="mf">0.5</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="nx">contract</span> <span class="nx">ERC1271</span> <span class="p">{</span>

  <span class="c1">// bytes4(keccak256("isValidSignature(bytes32,bytes)")</span>
  <span class="nx">bytes4</span> <span class="nx">constant</span> <span class="nx">internal</span> <span class="nx">MAGICVALUE</span> <span class="o">=</span> <span class="mh">0x1626ba7e</span><span class="p">;</span>

  <span class="cm">/**
   * @dev Should return whether the signature provided is valid for the provided hash
   * @param _hash      Hash of the data to be signed
   * @param _signature Signature byte array associated with _hash
   *
   * MUST return the bytes4 magic value 0x1626ba7e when function passes.
   * MUST NOT modify state (using STATICCALL for solc &lt; 0.5, view modifier for solc &gt; 0.5)
   * MUST allow external calls
   */</span> 
  <span class="kd">function</span> <span class="nx">isValidSignature</span><span class="p">(</span>
    <span class="nx">bytes32</span> <span class="nx">_hash</span><span class="p">,</span> 
    <span class="nx">bytes</span> <span class="nx">memory</span> <span class="nx">_signature</span><span class="p">)</span>
    <span class="kr">public</span>
    <span class="nx">view</span> 
    <span class="nx">returns</span> <span class="p">(</span><span class="nx">bytes4</span> <span class="nx">magicValue</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">isValidSignature</code> can call arbitrary methods to validate a given signature, which could be context dependent (e.g. time based or state based), EOA dependent (e.g. signers authorization level within smart wallet), signature scheme Dependent (e.g. ECDSA, multisig, BLS), etc.</p>
<p>This function should be implemented by contracts which desire to sign messages (e.g. smart contract wallets, DAOs, multisignature wallets, etc.) Applications wanting to support contract signatures should call this method if the signer is a contract.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p>We believe the name of the proposed function to be appropriate considering that an <em>authorized</em> signers providing proper signatures for a given data would see their signature as “valid” by the signing contract. Hence, an signed action message is only valid when the signer is authorized to perform a given action on the behalf of a smart wallet.</p>
<p>Two arguments are provided for simplicity of separating the hash signed from the signature. A bytes32 hash is used instead of the unhashed message for simplicy, since contracts could expect a certain hashing function that is not standard, such as with <a href="/EIPS/eip-712">EIP-712</a>.</p>
<p><code class="language-plaintext highlighter-rouge">isValidSignature()</code> should not be able to modify states in order to prevent <code class="language-plaintext highlighter-rouge">GasToken</code> minting or similar attack vectors. Again, this is to simplify the implementation surface of the function for better standardization and to allow off-chain contract queries.</p>
<p>The specific return value is expected to be returned instead of a boolean in order to have stricter and simpler verification of a signature.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>This EIP is backward compatible with previous work on signature validation since this method is specific to contract based signatures and not EOA signatures.</p>
<h2 id="reference-implementation">
<a href="#reference-implementation" class="anchor-link"></a> Reference Implementation
</h2>
<p>Example implementation of a signing contract:</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="cm">/**
   * @notice Verifies that the signer is the owner of the signing contract.
   */</span>
  <span class="k">function</span> <span class="n">isValidSignature</span><span class="p">(</span>
    <span class="kt">bytes32</span> <span class="n">_hash</span><span class="p">,</span>
    <span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">_signature</span>
  <span class="p">)</span> <span class="k">external</span> <span class="k">override</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bytes4</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Validate signatures
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">recoverSigner</span><span class="p">(</span><span class="n">_hash</span><span class="p">,</span> <span class="n">_signature</span><span class="p">)</span> <span class="o">==</span> <span class="n">owner</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mh">0x1626ba7e</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mh">0xffffffff</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

 <span class="cm">/**
   * @notice Recover the signer of hash, assuming it's an EOA account
   * @dev Only for EthSign signatures
   * @param _hash       Hash of message that was signed
   * @param _signature  Signature encoded as (bytes32 r, bytes32 s, uint8 v)
   */</span>
  <span class="k">function</span> <span class="n">recoverSigner</span><span class="p">(</span>
    <span class="kt">bytes32</span> <span class="n">_hash</span><span class="p">,</span>
    <span class="kt">bytes</span> <span class="k">memory</span> <span class="n">_signature</span>
  <span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span> <span class="n">signer</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">_signature</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">65</span><span class="p">,</span> <span class="s">"SignatureValidator#recoverSigner: invalid signature length"</span><span class="p">);</span>

    <span class="c1">// Variables are not scoped in Solidity.
</span>    <span class="kt">uint8</span> <span class="n">v</span> <span class="o">=</span> <span class="kt">uint8</span><span class="p">(</span><span class="n">_signature</span><span class="p">[</span><span class="mi">64</span><span class="p">]);</span>
    <span class="kt">bytes32</span> <span class="n">r</span> <span class="o">=</span> <span class="n">_signature</span><span class="p">.</span><span class="n">readBytes32</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kt">bytes32</span> <span class="n">s</span> <span class="o">=</span> <span class="n">_signature</span><span class="p">.</span><span class="n">readBytes32</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>

    <span class="c1">// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
</span>    <span class="c1">// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
</span>    <span class="c1">// the valid range for s in (281): 0 &lt; s &lt; secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
</span>    <span class="c1">// signatures from current libraries generate a unique signature with an s-value in the lower half order.
</span>    <span class="c1">//
</span>    <span class="c1">// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
</span>    <span class="c1">// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
</span>    <span class="c1">// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
</span>    <span class="c1">// these malleable signatures as well.
</span>    <span class="c1">//
</span>    <span class="c1">// Source OpenZeppelin
</span>    <span class="c1">// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol
</span>
    <span class="k">if</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mh">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">revert</span><span class="p">(</span><span class="s">"SignatureValidator#recoverSigner: invalid signature 's' value"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">!=</span> <span class="mi">27</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="mi">28</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">revert</span><span class="p">(</span><span class="s">"SignatureValidator#recoverSigner: invalid signature 'v' value"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Recover ECDSA signer
</span>    <span class="n">signer</span> <span class="o">=</span> <span class="nb">ecrecover</span><span class="p">(</span>
      <span class="nb">keccak256</span><span class="p">(</span><span class="n">abi</span><span class="p">.</span><span class="n">encodePacked</span><span class="p">(</span><span class="s">"</span><span class="se">\x19</span><span class="s">Ethereum Signed Message:</span><span class="se">\n</span><span class="s">32"</span><span class="p">,</span> <span class="n">_hash</span><span class="p">)),</span>
      <span class="n">v</span><span class="p">,</span>
      <span class="n">r</span><span class="p">,</span>
      <span class="n">s</span>
    <span class="p">);</span>
    
    <span class="c1">// Prevent signer from being 0x0
</span>    <span class="nb">require</span><span class="p">(</span>
      <span class="n">signer</span> <span class="o">!=</span> <span class="kt">address</span><span class="p">(</span><span class="mh">0x0</span><span class="p">),</span>
      <span class="s">"SignatureValidator#recoverSigner: INVALID_SIGNER"</span>
    <span class="p">);</span>

    <span class="k">return</span> <span class="n">signer</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>Example implementation of a contract calling the isValidSignature() function on an external signing contract ;</p>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">function</span> <span class="n">callERC1271isValidSignature</span><span class="p">(</span>
    <span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span>
    <span class="kt">bytes32</span> <span class="n">_hash</span><span class="p">,</span>
    <span class="kt">bytes</span> <span class="k">calldata</span> <span class="n">_signature</span>
  <span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="p">{</span>
    <span class="kt">bytes4</span> <span class="n">result</span> <span class="o">=</span> <span class="n">IERC1271Wallet</span><span class="p">(</span><span class="n">_addr</span><span class="p">).</span><span class="n">isValidSignature</span><span class="p">(</span><span class="n">_hash</span><span class="p">,</span> <span class="n">_signature</span><span class="p">);</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="mh">0x1626ba7e</span><span class="p">,</span> <span class="s">"INVALID_SIGNATURE"</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>Since there are no gas-limit expected for calling the isValidSignature() function, it is possible that some implementation will consume a large amount of gas. It is therefore important to not hardcode an amount of gas sent when calling this method on an external contract as it could prevent the validation of certain signatures.</p>
<p>Note also that each contract implementing this method is responsible to ensure that the signature passed is indeed valid, otherwise catastrophic outcomes are to be expected.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/frangio">Francisco Giordano</a>, <a href="https://github.com/shrugs">Matt Condon</a>, <a href="https://github.com/PhABC">Philippe Castonguay</a>, <a href="https://github.com/abandeali1">Amir Bandeali</a>, <a href="https://github.com/izqui">Jorge Izquierdo</a>, <a href="https://github.com/catageek">Bertrand Masius</a>, "EIP-1271: Standard Signature Validation Method for Contracts," <em>Ethereum Improvement Proposals</em>, no. 1271, July 2018. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1271.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-1271: Standard Signature Validation Method for Contracts",
    "author": "Francisco Giordano (@frangio), Matt Condon (@shrugs), Philippe Castonguay (@PhABC), Amir Bandeali (@abandeali1), Jorge Izquierdo (@izqui), Bertrand Masius (@catageek)",
    "name": "EIP-1271: Standard Signature Validation Method for Contracts",
    "dateCreated": "2018-07-25",
    "datePublished": "2018-07-25",

    "discussionUrl": "https://github.com/ethereum/EIPs/issues/1271",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2018"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
