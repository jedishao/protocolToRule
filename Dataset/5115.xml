<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EIP-5115: Super Composable Yield Token</title>
<meta property="og:title" content="EIP-5115: Super Composable Yield Token" />
<meta name="description" content="Interface for wrapped yield-generating tokens." />
<meta property="og:description" content="Interface for wrapped yield-generating tokens." />
<meta name="twitter:description" content="Interface for wrapped yield-generating tokens." />
<meta name="generator" content="Jekyll" />
<meta property="og:locale" content="en_US" />
<link rel="canonical" href="https://eips.ethereum.org/EIPS/eip-5115" />
<meta property="og:url" content="https://eips.ethereum.org/EIPS/eip-5115" />
<meta property="og:site_name" content="Ethereum Improvement Proposals" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@" />
<script type="application/ld+json">
    {
      "@type": "WebSite",
      "url": "https://eips.ethereum.org",
      "name": "Ethereum Improvement Proposals",
      "description": "Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.",
      "@context": "https://schema.org"
    }
  </script>
<link rel="stylesheet" href="/assets/css/style.css" /><link type="application/atom+xml" rel="alternate" href="https://eips.ethereum.org/feed.xml" title="Ethereum Improvement Proposals" /><script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML" integrity="sha256-nlrDrBTHxJJlDDX22AS33xYI1OJHnGMDhiYMSe2U0e0=" crossorigin="anonymous"></script>
</head>
<body><header class="site-header" role="banner">
<div class="wrapper"><a class="site-title" rel="author" href="/">Ethereum Improvement Proposals</a><nav class="site-nav">
<input type="checkbox" id="nav-trigger" class="nav-trigger" />
<label for="nav-trigger">
<span class="menu-icon">
<svg viewBox="0 0 18 15" width="18px" height="15px">
<path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z" />
</svg>
</span>
</label>
<div class="trigger"><a class="page-link" href="/all">All</a><a class="page-link" href="/core">Core</a><a class="page-link" href="/networking">Networking</a><a class="page-link" href="/interface">Interface</a><a class="page-link" href="/erc">ERC</a><a class="page-link" href="/meta">Meta</a><a class="page-link" href="/informational">Informational</a></div>
</nav></div>
</header>
<main class="page-content" aria-label="Content">
<div class="wrapper">
<div class="draft">
⚠️ This EIP is not recommended for general use or implementation as it is likely to change.
</div>
<div class="home">
<h1 class="page-heading">
EIP-5115: Super Composable Yield Token
<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5115.md"><svg role="img" aria-label="Source" xmlns="https://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><title>Source</title><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z" /></svg></a>
</h1>
<h3>Interface for wrapped yield-generating tokens.</h3>
<table>
<tr><th>Author</th><td><a href="https://github.com/mrenoon">Vu Nguyen</a>, <a href="https://github.com/UncleGrandpa925">Long Vuong</a>, <a href="https://github.com/ayobuenavista">Anton Buenavista</a></td></tr>
<tr><th>Discussions-To</th><td><a href="https://ethereum-magicians.org/t/eip-5115-super-composable-yield-token-standard/9423">https://ethereum-magicians.org/t/eip-5115-super-composable-yield-token-standard/9423</a></td></tr>
<tr><th>Status</th><td>Draft
</td></tr>
<tr><th>Type</th><td>Standards Track</td></tr>
<tr><th>Category</th><td>ERC</td></tr>
<tr><th>Created</th><td>2022-05-30</td></tr>
<tr><th>Requires</th><td>
<a href="eip-20">20</a>
</td></tr>
</table>
<div class="toc">
<h2>Table of Contents</h2>
<ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#motivation">Motivation</a>
<ul>
<li><a href="#use-cases">Use Cases</a></li>
</ul>
</li>
<li><a href="#specification">Specification</a>
<ul>
<li><a href="#generic-yield-generating-pool">Generic Yield Generating Pool</a></li>
<li><a href="#super-composable-yield-token-standard">Super Composable Yield Token Standard</a></li>
</ul>
</li>
<li><a href="#rationale">Rationale</a></li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#security-considerations">Security Considerations</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</div>
<h2 id="abstract">
<a href="#abstract" class="anchor-link"></a> Abstract
</h2>
<p>This standard proposes an API for wrapped yield-generating tokens within smart contracts. It is an extension on the <a href="/EIPS/eip-20">EIP-20</a> token that provides basic functionality for transferring, depositing, withdrawing tokens, as well as reading balances.</p>
<h2 id="motivation">
<a href="#motivation" class="anchor-link"></a> Motivation
</h2>
<p>Yield generating mechanisms are built in all shapes and sizes, necessitating a manual integration every time a protocol builds on top of another protocol’s yield generating mechanism.</p>
<p><a href="/EIPS/eip-4626">EIP-4626</a> tackled a significant part of this fragmentation by standardizing the interfaces for vaults, a major category among various yield-generating mechanisms.</p>
<p>In this EIP, we’re extending the coverage to include assets beyond EIP-4626’s reach, namely:</p>
<ul>
<li>Yield-generating assets that have different base tokens used for minting vs accounting for the pool value.
<ul>
<li>This category includes AMM liquidity tokens (which are yield generating assets that yield swap fees) since the value of the pool is measured in “liquidity units” (for example, $\sqrt k$ in UniswapV2, as defined in UniswapV2 whitepaper) which can’t be deposited in (as they are not tokens).</li>
<li>This extends the flexibility in minting the yield-bearing assets. For example, there could be an ETH vault that wants to allow users to deposit cETH directly instead of ETH, for gas efficiency or UX reasons.</li>
</ul>
</li>
<li>Assets with reward tokens by default (e.g. COMP rewards for supplying in Compound). The reward tokens are expected to be sold to compound into the same asset.</li>
</ul>
<p>While EIP-4626 is a well-designed and suitable standard for most vaults, there will inevitably be some yield-generating mechanisms that do not fit into their category (LP tokens for instance). A more flexible standard is required to standardize the interaction with all types of yield generating mechanisms.</p>
<p>Therefore, we are proposing Super Composable Yield (SCY), a flexible standard for wrapped yield generating tokens that could cover most mechanisms in DeFi. We foresee that:</p>
<ul>
<li>EIP-4626 will still be a popular vault standard, that most vaults should adopt.</li>
<li>SCY tokens can wrap over most yield generating mechanisms in DeFi, including EIP-4626 vaults for projects built on top of interest-bearing tokens.</li>
<li>Whoever needs the functionalities of SCY could integrate with the existing SCY tokens or write a new SCY (to wrap over the target interest-bearing token).</li>
</ul>
<h3 id="use-cases">
<a href="#use-cases" class="anchor-link"></a> Use Cases
</h3>
<p>This EIP is designed for flexibility, aiming to accommodate as many yield generating mechanisms as possible. Particularly, this standard aims to be generalized enough that it supports the following uses cases and more:</p>
<ul>
<li>Money market supply positions
<ul>
<li>Lending DAI in Compound, getting DAI interests and COMP rewards</li>
<li>Lending ETH in BenQi, getting ETH interests and QI + AVAX rewards</li>
<li>Lending USDC in Aave, getting USDC interests and stkAAVE rewards</li>
</ul>
</li>
<li>AMM liquidity provision
<ul>
<li>Provide ETH + USDC to ETHUSDC pool in SushiSwap, getting swap fees in more ETH+USDC</li>
<li>Provide ETH + USDC to ETHUSDC pool in SushiSwap and stake it in Sushi Onsen, getting swap fees and SUSHI rewards</li>
<li>Provide USDC+DAI+USDT to 3crv pool and stake it in Convex, getting 3crv swap fees and CRV + CVX rewards</li>
</ul>
</li>
<li>Vault positions
<ul>
<li>Provide ETH into Yearn EIP-4626 vault, where the vault accrues yield from Yearn’s ETH strategy</li>
<li>Provide DAI into Harvest and staking it, getting DAI interests and FARM rewards</li>
</ul>
</li>
<li>Liquid staking positions
<ul>
<li>Holding stETH (in Lido), getting yields in more stETH</li>
</ul>
</li>
<li>Liquidity mining programs
<ul>
<li>Provide USDC in Stargate, getting STG rewards</li>
<li>Provide LOOKS in LooksRare, getting LOOKS yield and WETH rewards</li>
</ul>
</li>
<li>Rebasing tokens
<ul>
<li>Stake OHM into sOHM/gOHM, getting OHM rebase yield</li>
<li>Stake BTRFLY into xBTRFLY, getting BTRFLY rebase yield</li>
</ul>
</li>
</ul>
<p>The EIP hopes to minimize, if not possibly eliminate, the use of customized adapters in order to interact with many different forms of yield-generating token mechanisms.</p>
<h2 id="specification">
<a href="#specification" class="anchor-link"></a> Specification
</h2>
<h3 id="generic-yield-generating-pool">
<a href="#generic-yield-generating-pool" class="anchor-link"></a> Generic Yield Generating Pool
</h3>
<p>We will first introduce Generic Yield Generating Pool (GYGP), a model to describe most yield generating mechanisms in DeFi. In every yield generating mechanism, there is a pool of funds, whose value is measured in <strong>assets</strong>. There are a number of users who contribute liquidity to the pool, in exchange for <strong>shares</strong> of the pool, which represents units of ownership of the pool. Over time, the value (measured in <strong>assets</strong>) of the pool grows, such that each <strong>share</strong> is worth more <strong>assets</strong> over time. The pool could earn a number of <strong>reward tokens</strong> over time, which are distributed to the users according to some logic (For example, proportionally the number of <strong>shares</strong>).</p>
<p>Here are the more concrete definitions of the terms:</p>
<h4 id="definitions">
<a href="#definitions" class="anchor-link"></a> Definitions:
</h4>
<ul>
<li><strong>asset</strong>: Is a unit to measure the value of the pool. At time <em>t</em>, the pool has a total value of <em>TotalAsset(t)</em> <strong>assets</strong>.</li>
<li><strong>shares</strong>: Is a unit that represents ownership of the pool. At time <em>t</em>, there are <em>TotalShares(t)</em> <strong>shares</strong> in total.</li>
<li><strong>reward tokens</strong>: Over time, the pool earns $n_{rewards}$ types of reward tokens $(n_{rewards} \ge 0)$. At time <em>t</em>, $TotalRewards_i(t)$ is the amount of <strong>reward token <em>i</em></strong> that has accumulated for the pool up until time <em>t</em>.</li>
<li><strong>exchange rate</strong>: At time <em>t</em>, the <strong>exchange rate</strong> <em>ExchangeRate(t)</em> is simply how many <strong>assets</strong> each <strong>shares</strong> is worth $ExchangeRate(t) = \frac{TotalAsset(t)}{TotalShares(t)}$</li>
<li><strong>users</strong>: At time <em>t</em>, each user <em>u</em> has $shares_u(t)$ <strong>shares</strong> in the pool, which is worth $asset_u(t) = shares_u(t) \cdot ExchangeRate(t)$ <strong>assets</strong>. Until time <em>t</em>, user <em>u</em> is entitled to receive a total of $rewards_{u_i}(t)$ <strong>reward token <em>i</em></strong>. The sum of all users’ shares, assets and rewards should be the same as the total shares, assets and rewards of the whole pool.</li>
</ul>
<h4 id="state-changes">
<a href="#state-changes" class="anchor-link"></a> State changes:
</h4>
<ol>
<li>A user deposits <strong>assets</strong> into the pool, in exchange for new <strong>shares</strong> that will be created for the user, proportionally to the asset amount being deposited compared to the value of the pool.</li>
<li>A user withdraws <strong>assets</strong> from the pool, by burning their <strong>shares</strong>, proportionally to the asset amount being burned compared to the value of the pool</li>
<li>The pool earns some <strong>assets</strong>. The <strong>exchange rate</strong> will simply increase due to the additional <strong>assets.</strong></li>
<li>The pool earns some <strong>reward tokens</strong>. The additional reward tokens will be distributed among the users.</li>
</ol>
<h4 id="examples-of-gygps-in-defi">
<a href="#examples-of-gygps-in-defi" class="anchor-link"></a> Examples of GYGPs in DeFi:
</h4>
<table>
<thead>
<tr>
<th>Yield generating mechanism</th>
<th>Asset</th>
<th>Shares</th>
<th>Reward tokens</th>
<th>Exchange rate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Supply USDC in Compound</td>
<td>USDC</td>
<td>cUSDC</td>
<td>COMP</td>
<td>USDC value per cUSDC, increases with USDC supply interests</td>
</tr>
<tr>
<td>ETH liquid staking in Lido</td>
<td>stETH</td>
<td>wstETH</td>
<td>None</td>
<td>stETH value per wstETH, increases with ETH staking rewards</td>
</tr>
<tr>
<td>Stake LOOKS in LooksRare</td>
<td>LOOKS</td>
<td>shares (in contract)</td>
<td>WETH</td>
<td>LOOKS value per shares, increases with LOOKS rewards</td>
</tr>
<tr>
<td>Stake BTRFLY into xBTRFLY</td>
<td>BTRFLY</td>
<td>xBTRFLY</td>
<td>None</td>
<td>BTRFLY value per xBTRFLY, increases due to rebase rewards</td>
</tr>
<tr>
<td>Provide ETH+USDC liquidity on Sushiswap</td>
<td>ETHUSDC liquidity (a pool of x ETH + y USDC has sqrt(xy) ETHUSDC liquidity)</td>
<td>ETHUSDC Sushiswap LP (SLP) token</td>
<td>None</td>
<td>ETHUSDC liquidity value per ETHUSDC SLP, increases due to swap fees</td>
</tr>
<tr>
<td>Provide ETH+USDC liquidity on Sushiswap and stake into Onsen</td>
<td>ETHUSDC liquidity (a pool of x ETH + y USDC has sqrt(xy) ETHUSDC liquidity)</td>
<td>ETHUSDC Sushiswap LP (SLP) token</td>
<td>SUSHI</td>
<td>ETHUSDC liquidity value per ETHUSDC SLP, increases due to swap fees</td>
</tr>
<tr>
<td>Provide USDC+USDT+DAI liquidity in Curve</td>
<td>3crv pool’s liquidity (amount of D per 3crv token)</td>
<td>3crv token</td>
<td>CRV</td>
<td>3crv pool’s liquidity per 3crv token, increases due to swap fees</td>
</tr>
<tr>
<td>Provide BAL+WETH liquidity in Balancer (80% BAL, 20% WETH)</td>
<td>BALWETH liquidity (a pool of x BAL + y WETH has x^0.8*y^0.2 BALWETH liquidity)</td>
<td>BALWETH Balancer LP token</td>
<td>None</td>
<td>BALWETH liquidity per BALWETH Balancer LP token, increases due to swap fees</td>
</tr>
</tbody>
</table>
<h3 id="super-composable-yield-token-standard">
<a href="#super-composable-yield-token-standard" class="anchor-link"></a> Super Composable Yield Token Standard
</h3>
<h4 id="overview">
<a href="#overview" class="anchor-link"></a> Overview
</h4>
<p>Super Composable Yield is a token standard for all GYGPs. Each Super Composable Yield token represents <strong>shares</strong> in a GYGP and allows for interacting with the GYGP via a standard interface</p>
<p>All SCY tokens:</p>
<ul>
<li><strong>MUST</strong> implement <strong><code class="language-plaintext highlighter-rouge">EIP-20</code></strong> to represent shares in the underlying GYGP.</li>
<li><strong>MUST</strong> implement EIP-20’s optional metadata extensions <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">symbol</code>, and <code class="language-plaintext highlighter-rouge">decimals</code>, which <strong>SHOULD</strong> reflect the underlying GYGP’s accounting asset’s <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">symbol</code>, and <code class="language-plaintext highlighter-rouge">decimals</code>.</li>
<li><strong>MAY</strong> implement <a href="/EIPS/eip-2612">EIP-2612</a> to improve the UX of approving SCY tokens on various integrations.</li>
<li><strong>MAY</strong> revert on calls to <code class="language-plaintext highlighter-rouge">transfer</code> and <code class="language-plaintext highlighter-rouge">transferFrom</code> if a SCY token is to be non-transferable.</li>
<li>The EIP-20 operations <code class="language-plaintext highlighter-rouge">balanceOf</code>, <code class="language-plaintext highlighter-rouge">transfer</code>, <code class="language-plaintext highlighter-rouge">totalSupply</code>, etc. <strong>SHOULD</strong> operate on the GYGP “shares”, which represent a claim to ownership on a fraction of the GYGP’s underlying holdings.</li>
</ul>
<h4 id="definition-of-base-tokens">
<a href="#definition-of-base-tokens" class="anchor-link"></a> Definition of base tokens
</h4>
<p>Base tokens are tokens that could be deposited to mint SCY tokens (and hence, to enter the underlying GYGP), or redeemed when burning SCY tokens (and hence, exiting the underlying GYGP). Essentially, base tokens are implicitly converted into units of <strong>assets</strong> when deposited or redeemed, to conform to state change #1 and #2 of the GYGP definition above.</p>
<p>There could be multiple kinds of base tokens in a SCY. This allows for maximum flexibility in how to mint SCY to enter the underlying yield generating pool. For example, both BAL and WETH (and even BALWETH LP token) could be used to mint the SCY token for BALWETH Balancer pool (by providing single-sided liquidity).</p>
<p>As such, base tokens are not necessarily the same as the asset (which is a key difference between SCY and EIP-4626).</p>
<h4 id="interface">
<a href="#interface" class="anchor-link"></a> Interface
</h4>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="n">ISuperComposableYield</span> <span class="p">{</span>
    <span class="k">enum</span> <span class="n">AssetType</span> <span class="p">{</span>
        <span class="n">TOKEN</span><span class="p">,</span>
        <span class="n">LIQUIDITY</span>
    <span class="p">}</span>

    <span class="k">event</span> <span class="n">Deposit</span><span class="p">(</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">caller</span><span class="p">,</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">receiver</span><span class="p">,</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">tokenIn</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">amountDeposited</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">amountScyOut</span>
    <span class="p">);</span>

    <span class="k">event</span> <span class="n">Redeem</span><span class="p">(</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">caller</span><span class="p">,</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">receiver</span><span class="p">,</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">tokenOut</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">amountScyToRedeem</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">amountTokenOut</span>
    <span class="p">);</span>

    <span class="k">event</span> <span class="n">ClaimRewards</span><span class="p">(</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">caller</span><span class="p">,</span>
        <span class="kt">address</span> <span class="k">indexed</span> <span class="n">user</span><span class="p">,</span>
        <span class="kt">address</span><span class="p">[]</span> <span class="n">rewardTokens</span><span class="p">,</span>
        <span class="kt">uint256</span><span class="p">[]</span> <span class="n">rewardAmounts</span>
    <span class="p">);</span>

    <span class="k">event</span> <span class="n">ExchangeRateUpdated</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">oldExchangeRate</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">newExchangeRate</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">deposit</span><span class="p">(</span>
        <span class="kt">address</span> <span class="n">receiver</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">tokenIn</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">amountTokenToPull</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">minSharesOut</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">amountSharesOut</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">redeem</span><span class="p">(</span>
        <span class="kt">address</span> <span class="n">receiver</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">amountSharesToPull</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">tokenOut</span><span class="p">,</span>
        <span class="kt">uint256</span> <span class="n">minTokenOut</span>
    <span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">amountTokenOut</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">claimRewards</span><span class="p">(</span><span class="kt">address</span> <span class="n">user</span><span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">rewardAmounts</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">exchangeRateCurrent</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">exchangeRateStored</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">getRewardTokens</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">[]</span> <span class="k">memory</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">getBaseTokens</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">[]</span> <span class="k">memory</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">yieldToken</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">isValidBaseToken</span><span class="p">(</span><span class="kt">address</span> <span class="n">token</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">assetInfo</span><span class="p">()</span>
    <span class="k">external</span>
    <span class="k">view</span>
    <span class="k">returns</span> <span class="p">(</span>
        <span class="n">AssetType</span> <span class="n">assetType</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">assetAddress</span><span class="p">,</span>
        <span class="kt">uint8</span> <span class="n">assetDecimals</span>
    <span class="p">);</span>

    <span class="k">function</span> <span class="n">name</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">symbol</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">decimals</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint8</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="methods">
<a href="#methods" class="anchor-link"></a> Methods
</h4>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">deposit</span><span class="p">(</span>
    <span class="kt">address</span> <span class="n">receiver</span><span class="p">,</span>
    <span class="kt">address</span> <span class="n">tokenIn</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">amountTokenToPull</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">minSharesOut</span>
<span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">amountSharesOut</span><span class="p">);</span>
</code></pre></div></div>
<p>This method will first pull <code class="language-plaintext highlighter-rouge">amountTokenToPull</code> of <code class="language-plaintext highlighter-rouge">tokenIn</code> (a <strong>base token</strong>), and use the floating amount <code class="language-plaintext highlighter-rouge">tokenIn</code> in the SCY contract to deposit to mint new <strong>shares</strong>.</p>
<p>The ideal way to deposit is to send <code class="language-plaintext highlighter-rouge">tokenIn</code> in first, then call the <code class="language-plaintext highlighter-rouge">deposit</code> function with <code class="language-plaintext highlighter-rouge">amountTokenToPull = 0</code>. This pattern is similar to UniswapV2 (and UniswapV3) pools, which allow for better composability and gas efficiency by minimizing token transfers. For example, a router contract could swap from some other token to <code class="language-plaintext highlighter-rouge">tokenIn</code> which is sent directly to the SCY contract before <code class="language-plaintext highlighter-rouge">deposit</code> is called.</p>
<p>This function will convert the amount of <code class="language-plaintext highlighter-rouge">tokenIn</code> into some worth of <strong>assets</strong> and deposit this amount into the SCY contract for the recipient, who will receive <code class="language-plaintext highlighter-rouge">amountSharesOut</code> of SCY tokens (<strong>shares</strong>).</p>
<ul>
<li><strong>MUST</strong> emit the <code class="language-plaintext highlighter-rouge">Deposit</code> event.</li>
<li><strong>MUST</strong> support EIP-20’s <code class="language-plaintext highlighter-rouge">approve</code> / <code class="language-plaintext highlighter-rouge">transferFrom</code> flow where <code class="language-plaintext highlighter-rouge">tokenIn</code> are taken from receiver directly (as msg.sender) or if the msg.sender has EIP-20 approved allowance over the base token of the receiver.</li>
<li><strong>MUST</strong> revert if $amountSharesOut \lt minSharesOut$ (due to deposit limit being reached, slippage, or the user not approving enough <code class="language-plaintext highlighter-rouge">tokenIn</code> **to the SCY contract, etc).</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">redeem</span><span class="p">(</span>
    <span class="kt">address</span> <span class="n">receiver</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">amountSharesToPull</span><span class="p">,</span>
    <span class="kt">address</span> <span class="n">tokenOut</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">minTokenOut</span>
<span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">amountTokenOut</span><span class="p">);</span>
</code></pre></div></div>
<p>This method will first pull <code class="language-plaintext highlighter-rouge">amountSharesToPull</code> of SCY tokens, and use the floating amount of SCY tokens in the SCY contract to redeem to <code class="language-plaintext highlighter-rouge">tokenOut</code> (a <strong>base token</strong>). This pattern is similar to the one in <code class="language-plaintext highlighter-rouge">deposit</code></p>
<p>This function will redeem the exact SCY token (<strong>shares</strong>) from the SCY contract. The <strong>assets</strong> are converted into <code class="language-plaintext highlighter-rouge">tokenOut</code> of <code class="language-plaintext highlighter-rouge">tokenOut</code>.</p>
<ul>
<li><strong>MUST</strong> emit the <code class="language-plaintext highlighter-rouge">Redeem</code> event.</li>
<li><strong>MUST</strong> support EIP-20’s <code class="language-plaintext highlighter-rouge">approve</code> / <code class="language-plaintext highlighter-rouge">transferFrom</code> flow where the shares are burned from receiver directly (as msg.sender) or if the msg.sender has EIP-20 approved allowance over the shares of the receiver.</li>
<li><strong>MUST</strong> revert if $tokenOut \lt minTokenOut$ (due to redeem limit being reached, slippage, or the user not approving enough <code class="language-plaintext highlighter-rouge">amountSharesToPull</code> **to the SCY contract, etc).</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">claimRewards</span><span class="p">(</span><span class="kt">address</span> <span class="n">user</span><span class="p">)</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">rewardAmounts</span><span class="p">);</span>
</code></pre></div></div>
<p>This method sends all the available claimable rewards to the user as is, with the amounts in the list being in the same order as <code class="language-plaintext highlighter-rouge">getRewardTokens</code>.</p>
<ul>
<li><strong>MUST</strong> emit the <code class="language-plaintext highlighter-rouge">ClaimRewards</code> event.</li>
<li><strong>MAY</strong> return one or multiple rewards to the user.</li>
<li><strong>MAY</strong> return zero rewards to the user.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">exchangeRateCurrent</span><span class="p">()</span> <span class="k">external</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>
</code></pre></div></div>
<p>This method updates and returns the latest <strong>exchange rate</strong>, which is the <strong>exchange rate</strong> from SCY token amount into asset amount, scaled by a fixed scaling factor of 1e18.</p>
<ul>
<li><strong>MUST</strong> return $ExchangeRate(t_{now})$ such that $ExchangeRate(t_{now}) \times scyBalance / 1e18 = assetBalance$.</li>
<li><strong>MUST NOT</strong> include fees that are charged against the underlying yield token in the SCY contract.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">exchangeRateStored</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">);</span>
</code></pre></div></div>
<p>This read-only method returns the last saved value of the exchange rate.</p>
<ul>
<li><strong>MUST</strong> return the value of <code class="language-plaintext highlighter-rouge">exchangeRateCurrent</code> of a past timestamp where it was last updated in the contract</li>
<li><strong>MUST NOT</strong> include fees that are charged against the underlying yield token in the SCY contract.</li>
<li><strong>MUST NOT</strong> revert.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">yieldToken</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">);</span>
</code></pre></div></div>
<p>This read-only method returns the underlying yield-generating token (representing a GYGP) that was wrapped into a SCY token.</p>
<ul>
<li><strong>MUST</strong> return a token address that conforms to the EIP-20 interface, or zero address</li>
<li><strong>MUST NOT</strong> revert.</li>
<li><strong>MUST</strong> reflect the exact underlying yield-generating token address if the SCY token is a wrapped token.</li>
<li><strong>MAY</strong> return 0x or zero address if the SCY token is natively implemented, and not from wrapping.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">getRewardTokens</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">[]</span> <span class="k">memory</span><span class="p">);</span>
</code></pre></div></div>
<p>This read-only method returns the latest list of all reward tokens.</p>
<ul>
<li><strong>MUST</strong> return EIP-20 token addresses.</li>
<li><strong>MUST NOT</strong> revert.</li>
<li><strong>MAY</strong> return an empty list, one, or several token addresses.</li>
<li><strong>MAY</strong> return additional reward tokens over time, depending on when <code class="language-plaintext highlighter-rouge">underlyingYieldToken</code> supports more or less reward tokens.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">getBaseTokens</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">address</span><span class="p">[]</span> <span class="k">memory</span><span class="p">);</span>
</code></pre></div></div>
<p>This read-only method returns the list of all base tokens that can be used to deposit into the SCY contract.</p>
<ul>
<li><strong>MUST</strong> return EIP-20 token addresses.</li>
<li><strong>MUST</strong> return at least one address.</li>
<li><strong>MUST NOT</strong> revert.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">isValidBaseToken</span><span class="p">(</span><span class="kt">address</span> <span class="n">token</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">);</span>
</code></pre></div></div>
<p>This read-only method checks whether a token address entered is a base token that can be used to mint SCY.</p>
<ul>
<li><strong>MUST NOT</strong> revert.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">assetInfo</span><span class="p">()</span>
    <span class="k">external</span>
    <span class="k">view</span>
    <span class="k">returns</span> <span class="p">(</span>
        <span class="n">AssetType</span> <span class="n">assetType</span><span class="p">,</span>
        <span class="kt">address</span> <span class="n">assetAddress</span><span class="p">,</span>
        <span class="kt">uint8</span> <span class="n">assetDecimals</span>
    <span class="p">);</span>
</code></pre></div></div>
<p>This read-only function returns useful information about the asset, intended for front-ends or off-chain systems to display balances and information about the asset.</p>
<p><code class="language-plaintext highlighter-rouge">decimals</code> is the decimals to format asset balances.</p>
<p>Convention for <code class="language-plaintext highlighter-rouge">assetType</code> and format of the <code class="language-plaintext highlighter-rouge">info</code> field: 1) If asset is an EIP-20 token, <code class="language-plaintext highlighter-rouge">assetType = 0</code>, <code class="language-plaintext highlighter-rouge">assetAddress</code> is the address of the token; 2) If asset is liquidity of an AMM (like $\sqrt{k}$ in UniswapV2 forks), <code class="language-plaintext highlighter-rouge">assetType = 1</code>, <code class="language-plaintext highlighter-rouge">assetAddress</code> is the address of the LP token.</p>
<ul>
<li><strong>MUST</strong> reflect the underlying asset’s decimals if at all possible in order to eliminate any possible source of confusion or be deemed malicious.</li>
<li><strong>MUST</strong> conform to the conventions for assetType and info.</li>
<li><strong>MUST NOT</strong> revert.</li>
</ul>
<h4 id="events">
<a href="#events" class="anchor-link"></a> Events
</h4>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">event</span> <span class="n">Deposit</span><span class="p">(</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">caller</span><span class="p">,</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">receiver</span><span class="p">,</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">tokenIn</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">amountDeposited</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">amountScyOut</span>
<span class="p">);</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">caller</code> has converted exact base tokens into SCY (shares) and transferred those SCY to <code class="language-plaintext highlighter-rouge">receiver</code>.</p>
<ul>
<li><strong>MUST</strong> be emitted when base tokens are deposited into the SCY contract via <code class="language-plaintext highlighter-rouge">deposit</code> method.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">event</span> <span class="n">Redeem</span><span class="p">(</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">caller</span><span class="p">,</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">receiver</span><span class="p">,</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">tokenOut</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">amountScyToRedeem</span><span class="p">,</span>
    <span class="kt">uint256</span> <span class="n">amountTokenOut</span>
<span class="p">);</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">caller</code> has converted exact SCY (shares) into base tokens and transferred those base tokens to <code class="language-plaintext highlighter-rouge">receiver</code>.</p>
<ul>
<li><strong>MUST</strong> be emitted when base tokens are redeemed from the SCY contract via <code class="language-plaintext highlighter-rouge">redeem</code> method.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">event</span> <span class="n">ClaimRewards</span><span class="p">(</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">caller</span><span class="p">,</span>
    <span class="kt">address</span> <span class="k">indexed</span> <span class="n">user</span><span class="p">,</span>
    <span class="kt">address</span><span class="p">[]</span> <span class="n">rewardTokens</span><span class="p">,</span>
    <span class="kt">uint256</span><span class="p">[]</span> <span class="n">rewardAmounts</span>
<span class="p">);</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">caller</code> has claimed user rewards and transferred them to the user.</p>
<ul>
<li><strong>MUST</strong> be emitted when rewards are claimed from the SCY contract via <code class="language-plaintext highlighter-rouge">claimRewards</code> method.</li>
</ul>
<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">event</span> <span class="n">ExchangeRateUpdated</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">oldExchangeRate</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">newExchangeRate</span><span class="p">);</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">exchangeRateCurrent</code> is updated to the latest exchange rate.</p>
<ul>
<li><strong>MUST</strong> be emitted when the exchange rate is updated in the SCY contract via <code class="language-plaintext highlighter-rouge">exchangeRateCurrent</code> method.</li>
</ul>
<p><strong>“SCY” Word Choice:</strong></p>
<p>“SCY” (pronunciation: <em>/sʌɪ/</em>), an abbreviation of Super Composable Yield, was found to be appropriate to describe a broad universe of composable yield-bearing digital assets.</p>
<h2 id="rationale">
<a href="#rationale" class="anchor-link"></a> Rationale
</h2>
<p><a href="/EIPS/eip-20">EIP-20</a> is enforced because implementation details such as transfer, token approvals, and balance calculation directly carry over to the SCY tokens. This standardization makes the SCY tokens immediately compatible with all EIP-20 use cases.</p>
<p><a href="/EIPS/eip-165">EIP-165</a> is not explicitly mentioned to be supported as there are no optional methods in this standard. It is expected for all methods defined in the interface to be implemented.</p>
<p><a href="/EIPS/eip-2612">EIP-2612</a> can optionally be implemented in order to improve the UX of approving SCY tokens on various integrations.</p>
<p>The <code class="language-plaintext highlighter-rouge">exchangeRateStored</code> read-only method serves as a rough estimate of the prevalent exchange rate since the last update. It is included for frontends, wallets, and applications that need an estimate on the exchange rate of SCY tokens into assets, not an exact value possibly including slippage or other fees as this would require them doing a state update and spending gas. For applications that need an exact exchange rate, the <code class="language-plaintext highlighter-rouge">exchangeRateCurrent</code> mutable function can be used.</p>
<h2 id="backwards-compatibility">
<a href="#backwards-compatibility" class="anchor-link"></a> Backwards Compatibility
</h2>
<p>This EIP is fully backwards compatible as its implementation extends the functionality of <a href="/EIPS/eip-20">EIP-20</a>, however the optional metadata extensions, namely <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">decimals</code>, and <code class="language-plaintext highlighter-rouge">symbol</code> semantics MUST be implemented for all SCY token implementations.</p>
<h2 id="security-considerations">
<a href="#security-considerations" class="anchor-link"></a> Security Considerations
</h2>
<p>Malicious implementations which conform to the interface can put users at risk. It is recommended that all integrators (such as wallets, aggregators, or other smart contract protocols) review the implementation to avoid possible exploits and users losing funds.</p>
<p>The method <code class="language-plaintext highlighter-rouge">exchangeRateStored</code> returns an outdated estimated value and does not confer the exact current exchange rate of asset per share. Should accuracy be needed, <code class="language-plaintext highlighter-rouge">exchangeRateCurrent</code> should be used instead (which additionally updates <code class="language-plaintext highlighter-rouge">exchangeRateStored</code>.)</p>
<p><code class="language-plaintext highlighter-rouge">decimals</code> in <code class="language-plaintext highlighter-rouge">assetInfo</code> must strongly reflect the underlying asset’s decimals if at all possible in order to eliminate any possible source of confusion or be deemed malicious.</p>
<p><code class="language-plaintext highlighter-rouge">yieldToken</code> must strongly reflect the address of the underlying wrapped yield-generating token. For a native implementation wherein the SCY token does not wrap a yield-generating token, but natively represents a GYGP share, then the address returned MAY be a zero address. Otherwise, for wrapped tokens, you may introduce confusion on what the SCY token represents, or may be deemed malicious.</p>
<h2 id="copyright">
<a href="#copyright" class="anchor-link"></a> Copyright
</h2>
<p>Copyright and related rights waived via <a href="/LICENSE">CC0</a>.</p>
<h2>Citation</h2>
<p>Please cite this document as:</p>
<p><a href="https://github.com/mrenoon">Vu Nguyen</a>, <a href="https://github.com/UncleGrandpa925">Long Vuong</a>, <a href="https://github.com/ayobuenavista">Anton Buenavista</a>, "EIP-5115: Super Composable Yield Token [DRAFT]," <em>Ethereum Improvement Proposals</em>, no. 5115, May 2022. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-5115.</p>
</div>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "TechArticle",
    "headline": "EIP-5115: Super Composable Yield Token [DRAFT]",
    "author": "Vu Nguyen (@mrenoon), Long Vuong (@UncleGrandpa925), Anton Buenavista (@ayobuenavista)",
    "name": "EIP-5115: Super Composable Yield Token [DRAFT]",
    "dateCreated": "2022-05-30",
    "datePublished": "2022-05-30",

    "discussionUrl": "https://ethereum-magicians.org/t/eip-5115-super-composable-yield-token-standard/9423",
    
    "inLanguage": "en-US",
    "license": "#copyright",
    "copyrightYear": "2022"
  }
</script>
</div>
</main><footer class="site-footer h-card">
<data class="u-url" href="/"></data>
<div class="wrapper">
<h2 class="footer-heading">Ethereum Improvement Proposals</h2>
<div class="footer-col-wrapper">
<div class="footer-col footer-col-1">
<ul class="contact-list">
<li class="p-name">Ethereum Improvement Proposals</li></ul>
</div>
<div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/ethereum/EIPs"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">ethereum/EIPs</span></a></li></ul>
</div>
<div class="footer-col footer-col-3">
<p>Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.</p>
</div>
</div>
</div>
</footer>
</body>
</html>
